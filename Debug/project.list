
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000189c  080096dc  080096dc  000196dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af78  0800af78  00029cb4  2**0
                  CONTENTS
  4 .ARM          00000000  0800af78  0800af78  00029cb4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af78  0800af78  00029cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af78  0800af78  0001af78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00009cb4  20000000  0800af80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  20009cb4  08014c34  00029cb4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a41c  08014c34  0002a41c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00029cb4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d862  00000000  00000000  00029cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc0  00000000  00000000  0003753f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00039500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  0003a238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bd6  00000000  00000000  0003aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e986  00000000  00000000  00054a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098967  00000000  00000000  00063414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fbd7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c6c  00000000  00000000  000fbdd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20009cb4 	.word	0x20009cb4
 8000204:	00000000 	.word	0x00000000
 8000208:	080096c4 	.word	0x080096c4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20009cb8 	.word	0x20009cb8
 8000224:	080096c4 	.word	0x080096c4

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <LCD_WR_REG+0x40>)
 8000840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000844:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <LCD_WR_REG+0x40>)
 8000848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084c:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <LCD_WR_REG+0x44>)
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <LCD_WR_REG+0x40>)
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <LCD_WR_REG+0x40>)
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <LCD_WR_REG+0x40>)
 8000862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000866:	611a      	str	r2, [r3, #16]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40011000 	.word	0x40011000
 8000878:	40010c00 	.word	0x40010c00

0800087c <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <LCD_WR_DATAX+0x40>)
 8000888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800088c:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <LCD_WR_DATAX+0x40>)
 8000890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000894:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LCD_WR_DATAX+0x44>)
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <LCD_WR_DATAX+0x40>)
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <LCD_WR_DATAX+0x40>)
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <LCD_WR_DATAX+0x40>)
 80008aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ae:	611a      	str	r2, [r3, #16]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40011000 	.word	0x40011000
 80008c0:	40010c00 	.word	0x40010c00

080008c4 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <LCD_RD_DATA+0x7c>)
 80008cc:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80008d0:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <LCD_RD_DATA+0x7c>)
 80008d4:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80008d8:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <LCD_RD_DATA+0x7c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <LCD_RD_DATA+0x80>)
 80008e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e6:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <LCD_RD_DATA+0x80>)
 80008ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ee:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <LCD_RD_DATA+0x80>)
 80008f2:	2240      	movs	r2, #64	; 0x40
 80008f4:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <LCD_RD_DATA+0x84>)
 80008f8:	889b      	ldrh	r3, [r3, #4]
 80008fa:	f648 1289 	movw	r2, #35209	; 0x8989
 80008fe:	4293      	cmp	r3, r2
 8000900:	d102      	bne.n	8000908 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000902:	2001      	movs	r0, #1
 8000904:	f006 f8d2 	bl	8006aac <HAL_Delay>
	t = DATAIN
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <LCD_RD_DATA+0x7c>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <LCD_RD_DATA+0x80>)
 8000910:	2240      	movs	r2, #64	; 0x40
 8000912:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <LCD_RD_DATA+0x80>)
 8000916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091a:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <LCD_RD_DATA+0x7c>)
 800091e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000922:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <LCD_RD_DATA+0x7c>)
 8000926:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800092a:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <LCD_RD_DATA+0x7c>)
 800092e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000932:	60da      	str	r2, [r3, #12]
	return t;
 8000934:	88fb      	ldrh	r3, [r7, #6]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40010c00 	.word	0x40010c00
 8000944:	40011000 	.word	0x40011000
 8000948:	20009ce0 	.word	0x20009ce0

0800094c <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	460a      	mov	r2, r1
 8000956:	80fb      	strh	r3, [r7, #6]
 8000958:	4613      	mov	r3, r2
 800095a:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff68 	bl	8000834 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <LCD_WriteReg+0x4c>)
 8000966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <LCD_WriteReg+0x4c>)
 800096e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000972:	615a      	str	r2, [r3, #20]
 8000974:	4a09      	ldr	r2, [pc, #36]	; (800099c <LCD_WriteReg+0x50>)
 8000976:	88bb      	ldrh	r3, [r7, #4]
 8000978:	60d3      	str	r3, [r2, #12]
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <LCD_WriteReg+0x4c>)
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	615a      	str	r2, [r3, #20]
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <LCD_WriteReg+0x4c>)
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	611a      	str	r2, [r3, #16]
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <LCD_WriteReg+0x4c>)
 8000988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098c:	611a      	str	r2, [r3, #16]
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40011000 	.word	0x40011000
 800099c:	40010c00 	.word	0x40010c00

080009a0 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff41 	bl	8000834 <LCD_WR_REG>
	return LCD_RD_DATA();
 80009b2:	f7ff ff87 	bl	80008c4 <LCD_RD_DATA>
 80009b6:	4603      	mov	r3, r0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <LCD_WriteRAM_Prepare+0x14>)
 80009c6:	891b      	ldrh	r3, [r3, #8]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff33 	bl	8000834 <LCD_WR_REG>
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20009ce0 	.word	0x20009ce0

080009d8 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	460a      	mov	r2, r1
 80009e2:	80fb      	strh	r3, [r7, #6]
 80009e4:	4613      	mov	r3, r2
 80009e6:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80009e8:	4b73      	ldr	r3, [pc, #460]	; (8000bb8 <LCD_SetCursor+0x1e0>)
 80009ea:	889b      	ldrh	r3, [r3, #4]
 80009ec:	f249 3241 	movw	r2, #37697	; 0x9341
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d005      	beq.n	8000a00 <LCD_SetCursor+0x28>
 80009f4:	4b70      	ldr	r3, [pc, #448]	; (8000bb8 <LCD_SetCursor+0x1e0>)
 80009f6:	889b      	ldrh	r3, [r3, #4]
 80009f8:	f245 3210 	movw	r2, #21264	; 0x5310
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d164      	bne.n	8000aca <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000a00:	4b6d      	ldr	r3, [pc, #436]	; (8000bb8 <LCD_SetCursor+0x1e0>)
 8000a02:	895b      	ldrh	r3, [r3, #10]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff15 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000a0a:	4b6c      	ldr	r3, [pc, #432]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a10:	611a      	str	r2, [r3, #16]
 8000a12:	4b6a      	ldr	r3, [pc, #424]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a18:	615a      	str	r2, [r3, #20]
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	4b67      	ldr	r3, [pc, #412]	; (8000bc0 <LCD_SetCursor+0x1e8>)
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	4b65      	ldr	r3, [pc, #404]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	615a      	str	r2, [r3, #20]
 8000a2a:	4b64      	ldr	r3, [pc, #400]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	611a      	str	r2, [r3, #16]
 8000a30:	4b62      	ldr	r3, [pc, #392]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a36:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000a38:	4b60      	ldr	r3, [pc, #384]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	4b5e      	ldr	r3, [pc, #376]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	4a5d      	ldr	r2, [pc, #372]	; (8000bc0 <LCD_SetCursor+0x1e8>)
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	60d3      	str	r3, [r2, #12]
 8000a50:	4b5a      	ldr	r3, [pc, #360]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	615a      	str	r2, [r3, #20]
 8000a56:	4b59      	ldr	r3, [pc, #356]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	611a      	str	r2, [r3, #16]
 8000a5c:	4b57      	ldr	r3, [pc, #348]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a62:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000a64:	4b54      	ldr	r3, [pc, #336]	; (8000bb8 <LCD_SetCursor+0x1e0>)
 8000a66:	899b      	ldrh	r3, [r3, #12]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fee3 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000a6e:	4b53      	ldr	r3, [pc, #332]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	4b51      	ldr	r3, [pc, #324]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7c:	615a      	str	r2, [r3, #20]
 8000a7e:	88bb      	ldrh	r3, [r7, #4]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <LCD_SetCursor+0x1e8>)
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	4b4c      	ldr	r3, [pc, #304]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	615a      	str	r2, [r3, #20]
 8000a8e:	4b4b      	ldr	r3, [pc, #300]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	611a      	str	r2, [r3, #16]
 8000a94:	4b49      	ldr	r3, [pc, #292]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000a9c:	4b47      	ldr	r3, [pc, #284]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa2:	611a      	str	r2, [r3, #16]
 8000aa4:	4b45      	ldr	r3, [pc, #276]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aaa:	615a      	str	r2, [r3, #20]
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	4a44      	ldr	r2, [pc, #272]	; (8000bc0 <LCD_SetCursor+0x1e8>)
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	60d3      	str	r3, [r2, #12]
 8000ab4:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	615a      	str	r2, [r3, #20]
 8000aba:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	611a      	str	r2, [r3, #16]
 8000ac0:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac6:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000ac8:	e248      	b.n	8000f5c <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000aca:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <LCD_SetCursor+0x1e0>)
 8000acc:	889b      	ldrh	r3, [r3, #4]
 8000ace:	f646 0204 	movw	r2, #26628	; 0x6804
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d176      	bne.n	8000bc4 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000ad6:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <LCD_SetCursor+0x1e0>)
 8000ad8:	799b      	ldrb	r3, [r3, #6]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d106      	bne.n	8000aec <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000ade:	4b36      	ldr	r3, [pc, #216]	; (8000bb8 <LCD_SetCursor+0x1e0>)
 8000ae0:	881a      	ldrh	r2, [r3, #0]
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000aec:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <LCD_SetCursor+0x1e0>)
 8000aee:	895b      	ldrh	r3, [r3, #10]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fe9f 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000afc:	611a      	str	r2, [r3, #16]
 8000afe:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b04:	615a      	str	r2, [r3, #20]
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <LCD_SetCursor+0x1e8>)
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	615a      	str	r2, [r3, #20]
 8000b16:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b18:	2280      	movs	r2, #128	; 0x80
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b22:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2a:	611a      	str	r2, [r3, #16]
 8000b2c:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b32:	615a      	str	r2, [r3, #20]
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <LCD_SetCursor+0x1e8>)
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	60d3      	str	r3, [r2, #12]
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b3e:	2280      	movs	r2, #128	; 0x80
 8000b40:	615a      	str	r2, [r3, #20]
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	611a      	str	r2, [r3, #16]
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <LCD_SetCursor+0x1e0>)
 8000b52:	899b      	ldrh	r3, [r3, #12]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fe6d 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <LCD_SetCursor+0x1e8>)
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	615a      	str	r2, [r3, #20]
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	611a      	str	r2, [r3, #16]
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b86:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b8e:	611a      	str	r2, [r3, #16]
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b96:	615a      	str	r2, [r3, #20]
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <LCD_SetCursor+0x1e8>)
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	60d3      	str	r3, [r2, #12]
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	615a      	str	r2, [r3, #20]
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000ba8:	2280      	movs	r2, #128	; 0x80
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <LCD_SetCursor+0x1e4>)
 8000bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb2:	611a      	str	r2, [r3, #16]
}
 8000bb4:	e1d2      	b.n	8000f5c <LCD_SetCursor+0x584>
 8000bb6:	bf00      	nop
 8000bb8:	20009ce0 	.word	0x20009ce0
 8000bbc:	40011000 	.word	0x40011000
 8000bc0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000bc4:	4b99      	ldr	r3, [pc, #612]	; (8000e2c <LCD_SetCursor+0x454>)
 8000bc6:	889b      	ldrh	r3, [r3, #4]
 8000bc8:	f641 1263 	movw	r2, #6499	; 0x1963
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	f040 8133 	bne.w	8000e38 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000bd2:	4b96      	ldr	r3, [pc, #600]	; (8000e2c <LCD_SetCursor+0x454>)
 8000bd4:	799b      	ldrb	r3, [r3, #6]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d163      	bne.n	8000ca2 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000bda:	4b94      	ldr	r3, [pc, #592]	; (8000e2c <LCD_SetCursor+0x454>)
 8000bdc:	881a      	ldrh	r2, [r3, #0]
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	3b01      	subs	r3, #1
 8000be6:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000be8:	4b90      	ldr	r3, [pc, #576]	; (8000e2c <LCD_SetCursor+0x454>)
 8000bea:	895b      	ldrh	r3, [r3, #10]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fe21 	bl	8000834 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000bf2:	4b8f      	ldr	r3, [pc, #572]	; (8000e30 <LCD_SetCursor+0x458>)
 8000bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf8:	611a      	str	r2, [r3, #16]
 8000bfa:	4b8d      	ldr	r3, [pc, #564]	; (8000e30 <LCD_SetCursor+0x458>)
 8000bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c00:	615a      	str	r2, [r3, #20]
 8000c02:	4b8c      	ldr	r3, [pc, #560]	; (8000e34 <LCD_SetCursor+0x45c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	4b89      	ldr	r3, [pc, #548]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	615a      	str	r2, [r3, #20]
 8000c0e:	4b88      	ldr	r3, [pc, #544]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	4b86      	ldr	r3, [pc, #536]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000c1c:	4b84      	ldr	r3, [pc, #528]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	4b82      	ldr	r3, [pc, #520]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c2a:	615a      	str	r2, [r3, #20]
 8000c2c:	4b81      	ldr	r3, [pc, #516]	; (8000e34 <LCD_SetCursor+0x45c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	4b7f      	ldr	r3, [pc, #508]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	615a      	str	r2, [r3, #20]
 8000c38:	4b7d      	ldr	r3, [pc, #500]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	611a      	str	r2, [r3, #16]
 8000c3e:	4b7c      	ldr	r3, [pc, #496]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c44:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000c46:	4b7a      	ldr	r3, [pc, #488]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c4c:	611a      	str	r2, [r3, #16]
 8000c4e:	4b78      	ldr	r3, [pc, #480]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b75      	ldr	r3, [pc, #468]	; (8000e34 <LCD_SetCursor+0x45c>)
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	4b73      	ldr	r3, [pc, #460]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	4b72      	ldr	r3, [pc, #456]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	4b70      	ldr	r3, [pc, #448]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c72:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000c74:	4b6e      	ldr	r3, [pc, #440]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	4b6c      	ldr	r3, [pc, #432]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c82:	615a      	str	r2, [r3, #20]
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	4a6b      	ldr	r2, [pc, #428]	; (8000e34 <LCD_SetCursor+0x45c>)
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	60d3      	str	r3, [r2, #12]
 8000c8c:	4b68      	ldr	r3, [pc, #416]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c8e:	2280      	movs	r2, #128	; 0x80
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	4b67      	ldr	r3, [pc, #412]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c94:	2280      	movs	r2, #128	; 0x80
 8000c96:	611a      	str	r2, [r3, #16]
 8000c98:	4b65      	ldr	r3, [pc, #404]	; (8000e30 <LCD_SetCursor+0x458>)
 8000c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	e061      	b.n	8000d66 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000ca2:	4b62      	ldr	r3, [pc, #392]	; (8000e2c <LCD_SetCursor+0x454>)
 8000ca4:	895b      	ldrh	r3, [r3, #10]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fdc4 	bl	8000834 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000cac:	4b60      	ldr	r3, [pc, #384]	; (8000e30 <LCD_SetCursor+0x458>)
 8000cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb2:	611a      	str	r2, [r3, #16]
 8000cb4:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <LCD_SetCursor+0x458>)
 8000cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	0a1b      	lsrs	r3, r3, #8
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	4b5c      	ldr	r3, [pc, #368]	; (8000e34 <LCD_SetCursor+0x45c>)
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	4b5a      	ldr	r3, [pc, #360]	; (8000e30 <LCD_SetCursor+0x458>)
 8000cc8:	2280      	movs	r2, #128	; 0x80
 8000cca:	615a      	str	r2, [r3, #20]
 8000ccc:	4b58      	ldr	r3, [pc, #352]	; (8000e30 <LCD_SetCursor+0x458>)
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	611a      	str	r2, [r3, #16]
 8000cd2:	4b57      	ldr	r3, [pc, #348]	; (8000e30 <LCD_SetCursor+0x458>)
 8000cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000cda:	4b55      	ldr	r3, [pc, #340]	; (8000e30 <LCD_SetCursor+0x458>)
 8000cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce0:	611a      	str	r2, [r3, #16]
 8000ce2:	4b53      	ldr	r3, [pc, #332]	; (8000e30 <LCD_SetCursor+0x458>)
 8000ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	4a51      	ldr	r2, [pc, #324]	; (8000e34 <LCD_SetCursor+0x45c>)
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	60d3      	str	r3, [r2, #12]
 8000cf2:	4b4f      	ldr	r3, [pc, #316]	; (8000e30 <LCD_SetCursor+0x458>)
 8000cf4:	2280      	movs	r2, #128	; 0x80
 8000cf6:	615a      	str	r2, [r3, #20]
 8000cf8:	4b4d      	ldr	r3, [pc, #308]	; (8000e30 <LCD_SetCursor+0x458>)
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d04:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000d06:	4b4a      	ldr	r3, [pc, #296]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	4b48      	ldr	r3, [pc, #288]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	4b45      	ldr	r3, [pc, #276]	; (8000e2c <LCD_SetCursor+0x454>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	121a      	asrs	r2, r3, #8
 8000d1e:	4b45      	ldr	r3, [pc, #276]	; (8000e34 <LCD_SetCursor+0x45c>)
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	615a      	str	r2, [r3, #20]
 8000d28:	4b41      	ldr	r3, [pc, #260]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	611a      	str	r2, [r3, #16]
 8000d2e:	4b40      	ldr	r3, [pc, #256]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d34:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000d36:	4b3e      	ldr	r3, [pc, #248]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d3c:	611a      	str	r2, [r3, #16]
 8000d3e:	4b3c      	ldr	r3, [pc, #240]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d44:	615a      	str	r2, [r3, #20]
 8000d46:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <LCD_SetCursor+0x454>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	4a39      	ldr	r2, [pc, #228]	; (8000e34 <LCD_SetCursor+0x45c>)
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	60d3      	str	r3, [r2, #12]
 8000d52:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d5a:	2280      	movs	r2, #128	; 0x80
 8000d5c:	611a      	str	r2, [r3, #16]
 8000d5e:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d64:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000d66:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <LCD_SetCursor+0x454>)
 8000d68:	899b      	ldrh	r3, [r3, #12]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fd62 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000d70:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d76:	611a      	str	r2, [r3, #16]
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7e:	615a      	str	r2, [r3, #20]
 8000d80:	88bb      	ldrh	r3, [r7, #4]
 8000d82:	0a1b      	lsrs	r3, r3, #8
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <LCD_SetCursor+0x45c>)
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	615a      	str	r2, [r3, #20]
 8000d90:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <LCD_SetCursor+0x458>)
 8000d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000d9e:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <LCD_SetCursor+0x458>)
 8000da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da4:	611a      	str	r2, [r3, #16]
 8000da6:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <LCD_SetCursor+0x458>)
 8000da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dac:	615a      	str	r2, [r3, #20]
 8000dae:	88bb      	ldrh	r3, [r7, #4]
 8000db0:	4a20      	ldr	r2, [pc, #128]	; (8000e34 <LCD_SetCursor+0x45c>)
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	60d3      	str	r3, [r2, #12]
 8000db6:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <LCD_SetCursor+0x458>)
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <LCD_SetCursor+0x458>)
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <LCD_SetCursor+0x458>)
 8000dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <LCD_SetCursor+0x458>)
 8000dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd0:	611a      	str	r2, [r3, #16]
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <LCD_SetCursor+0x458>)
 8000dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <LCD_SetCursor+0x454>)
 8000ddc:	885b      	ldrh	r3, [r3, #2]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	121a      	asrs	r2, r3, #8
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <LCD_SetCursor+0x45c>)
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <LCD_SetCursor+0x458>)
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	615a      	str	r2, [r3, #20]
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <LCD_SetCursor+0x458>)
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <LCD_SetCursor+0x458>)
 8000df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <LCD_SetCursor+0x458>)
 8000dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e00:	611a      	str	r2, [r3, #16]
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <LCD_SetCursor+0x458>)
 8000e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e08:	615a      	str	r2, [r3, #20]
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <LCD_SetCursor+0x454>)
 8000e0c:	885b      	ldrh	r3, [r3, #2]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <LCD_SetCursor+0x45c>)
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	60d3      	str	r3, [r2, #12]
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <LCD_SetCursor+0x458>)
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <LCD_SetCursor+0x458>)
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	611a      	str	r2, [r3, #16]
 8000e22:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <LCD_SetCursor+0x458>)
 8000e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e28:	611a      	str	r2, [r3, #16]
}
 8000e2a:	e097      	b.n	8000f5c <LCD_SetCursor+0x584>
 8000e2c:	20009ce0 	.word	0x20009ce0
 8000e30:	40011000 	.word	0x40011000
 8000e34:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000e38:	4b4a      	ldr	r3, [pc, #296]	; (8000f64 <LCD_SetCursor+0x58c>)
 8000e3a:	889b      	ldrh	r3, [r3, #4]
 8000e3c:	f245 5210 	movw	r2, #21776	; 0x5510
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d172      	bne.n	8000f2a <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000e44:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <LCD_SetCursor+0x58c>)
 8000e46:	895b      	ldrh	r3, [r3, #10]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fcf3 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000e4e:	4b46      	ldr	r3, [pc, #280]	; (8000f68 <LCD_SetCursor+0x590>)
 8000e50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	4b44      	ldr	r3, [pc, #272]	; (8000f68 <LCD_SetCursor+0x590>)
 8000e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e5c:	615a      	str	r2, [r3, #20]
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	4b41      	ldr	r3, [pc, #260]	; (8000f6c <LCD_SetCursor+0x594>)
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <LCD_SetCursor+0x590>)
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	4b3e      	ldr	r3, [pc, #248]	; (8000f68 <LCD_SetCursor+0x590>)
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	611a      	str	r2, [r3, #16]
 8000e74:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <LCD_SetCursor+0x590>)
 8000e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8000e7c:	4b39      	ldr	r3, [pc, #228]	; (8000f64 <LCD_SetCursor+0x58c>)
 8000e7e:	895b      	ldrh	r3, [r3, #10]
 8000e80:	3301      	adds	r3, #1
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fcd5 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8000e8a:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <LCD_SetCursor+0x590>)
 8000e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e90:	611a      	str	r2, [r3, #16]
 8000e92:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <LCD_SetCursor+0x590>)
 8000e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e98:	615a      	str	r2, [r3, #20]
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4a33      	ldr	r2, [pc, #204]	; (8000f6c <LCD_SetCursor+0x594>)
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	60d3      	str	r3, [r2, #12]
 8000ea2:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <LCD_SetCursor+0x590>)
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	615a      	str	r2, [r3, #20]
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <LCD_SetCursor+0x590>)
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	611a      	str	r2, [r3, #16]
 8000eae:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <LCD_SetCursor+0x590>)
 8000eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <LCD_SetCursor+0x58c>)
 8000eb8:	899b      	ldrh	r3, [r3, #12]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fcba 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <LCD_SetCursor+0x590>)
 8000ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <LCD_SetCursor+0x590>)
 8000eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ece:	615a      	str	r2, [r3, #20]
 8000ed0:	88bb      	ldrh	r3, [r7, #4]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <LCD_SetCursor+0x594>)
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <LCD_SetCursor+0x590>)
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <LCD_SetCursor+0x590>)
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	611a      	str	r2, [r3, #16]
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <LCD_SetCursor+0x590>)
 8000ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eec:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <LCD_SetCursor+0x58c>)
 8000ef0:	899b      	ldrh	r3, [r3, #12]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fc9c 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <LCD_SetCursor+0x590>)
 8000efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <LCD_SetCursor+0x590>)
 8000f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0a:	615a      	str	r2, [r3, #20]
 8000f0c:	88bb      	ldrh	r3, [r7, #4]
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <LCD_SetCursor+0x594>)
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	60d3      	str	r3, [r2, #12]
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <LCD_SetCursor+0x590>)
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <LCD_SetCursor+0x590>)
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	611a      	str	r2, [r3, #16]
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <LCD_SetCursor+0x590>)
 8000f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f26:	611a      	str	r2, [r3, #16]
}
 8000f28:	e018      	b.n	8000f5c <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <LCD_SetCursor+0x58c>)
 8000f2c:	799b      	ldrb	r3, [r3, #6]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d106      	bne.n	8000f40 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <LCD_SetCursor+0x58c>)
 8000f34:	881a      	ldrh	r2, [r3, #0]
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <LCD_SetCursor+0x58c>)
 8000f42:	895b      	ldrh	r3, [r3, #10]
 8000f44:	88fa      	ldrh	r2, [r7, #6]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fcff 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <LCD_SetCursor+0x58c>)
 8000f50:	899b      	ldrh	r3, [r3, #12]
 8000f52:	88ba      	ldrh	r2, [r7, #4]
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fcf8 	bl	800094c <LCD_WriteReg>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20009ce0 	.word	0x20009ce0
 8000f68:	40011000 	.word	0x40011000
 8000f6c:	40010c00 	.word	0x40010c00

08000f70 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8000f82:	4b78      	ldr	r3, [pc, #480]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 8000f84:	799b      	ldrb	r3, [r3, #6]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10b      	bne.n	8000fa2 <LCD_Scan_Dir+0x32>
 8000f8a:	4b76      	ldr	r3, [pc, #472]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 8000f8c:	889b      	ldrh	r3, [r3, #4]
 8000f8e:	f646 0204 	movw	r2, #26628	; 0x6804
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d005      	beq.n	8000fa2 <LCD_Scan_Dir+0x32>
 8000f96:	4b73      	ldr	r3, [pc, #460]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 8000f98:	889b      	ldrh	r3, [r3, #4]
 8000f9a:	f641 1263 	movw	r2, #6499	; 0x1963
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d109      	bne.n	8000fb6 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8000fa2:	4b70      	ldr	r3, [pc, #448]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 8000fa4:	799b      	ldrb	r3, [r3, #6]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d134      	bne.n	8001014 <LCD_Scan_Dir+0xa4>
 8000faa:	4b6e      	ldr	r3, [pc, #440]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 8000fac:	889b      	ldrh	r3, [r3, #4]
 8000fae:	f641 1263 	movw	r2, #6499	; 0x1963
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d12e      	bne.n	8001014 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	d82c      	bhi.n	8001016 <LCD_Scan_Dir+0xa6>
 8000fbc:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <LCD_Scan_Dir+0x54>)
 8000fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc2:	bf00      	nop
 8000fc4:	08000fe5 	.word	0x08000fe5
 8000fc8:	08000feb 	.word	0x08000feb
 8000fcc:	08000ff1 	.word	0x08000ff1
 8000fd0:	08000ff7 	.word	0x08000ff7
 8000fd4:	08000ffd 	.word	0x08000ffd
 8000fd8:	08001003 	.word	0x08001003
 8000fdc:	08001009 	.word	0x08001009
 8000fe0:	0800100f 	.word	0x0800100f
		{
		case 0:
			dir = 6;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	71fb      	strb	r3, [r7, #7]
			break;
 8000fe8:	e015      	b.n	8001016 <LCD_Scan_Dir+0xa6>
		case 1:
			dir = 7;
 8000fea:	2307      	movs	r3, #7
 8000fec:	71fb      	strb	r3, [r7, #7]
			break;
 8000fee:	e012      	b.n	8001016 <LCD_Scan_Dir+0xa6>
		case 2:
			dir = 4;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	71fb      	strb	r3, [r7, #7]
			break;
 8000ff4:	e00f      	b.n	8001016 <LCD_Scan_Dir+0xa6>
		case 3:
			dir = 5;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	71fb      	strb	r3, [r7, #7]
			break;
 8000ffa:	e00c      	b.n	8001016 <LCD_Scan_Dir+0xa6>
		case 4:
			dir = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	71fb      	strb	r3, [r7, #7]
			break;
 8001000:	e009      	b.n	8001016 <LCD_Scan_Dir+0xa6>
		case 5:
			dir = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
			break;
 8001006:	e006      	b.n	8001016 <LCD_Scan_Dir+0xa6>
		case 6:
			dir = 3;
 8001008:	2303      	movs	r3, #3
 800100a:	71fb      	strb	r3, [r7, #7]
			break;
 800100c:	e003      	b.n	8001016 <LCD_Scan_Dir+0xa6>
		case 7:
			dir = 2;
 800100e:	2302      	movs	r3, #2
 8001010:	71fb      	strb	r3, [r7, #7]
			break;
 8001012:	e000      	b.n	8001016 <LCD_Scan_Dir+0xa6>
		}
	}
 8001014:	bf00      	nop
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8001016:	4b53      	ldr	r3, [pc, #332]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 8001018:	889b      	ldrh	r3, [r3, #4]
 800101a:	f249 3241 	movw	r2, #37697	; 0x9341
 800101e:	4293      	cmp	r3, r2
 8001020:	d018      	beq.n	8001054 <LCD_Scan_Dir+0xe4>
 8001022:	4b50      	ldr	r3, [pc, #320]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 8001024:	889b      	ldrh	r3, [r3, #4]
 8001026:	f646 0204 	movw	r2, #26628	; 0x6804
 800102a:	4293      	cmp	r3, r2
 800102c:	d012      	beq.n	8001054 <LCD_Scan_Dir+0xe4>
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 8001030:	889b      	ldrh	r3, [r3, #4]
 8001032:	f245 3210 	movw	r2, #21264	; 0x5310
 8001036:	4293      	cmp	r3, r2
 8001038:	d00c      	beq.n	8001054 <LCD_Scan_Dir+0xe4>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 800103c:	889b      	ldrh	r3, [r3, #4]
 800103e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001042:	4293      	cmp	r3, r2
 8001044:	d006      	beq.n	8001054 <LCD_Scan_Dir+0xe4>
 8001046:	4b47      	ldr	r3, [pc, #284]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	f641 1263 	movw	r2, #6499	; 0x1963
 800104e:	4293      	cmp	r3, r2
 8001050:	f040 824f 	bne.w	80014f2 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b07      	cmp	r3, #7
 8001058:	d835      	bhi.n	80010c6 <LCD_Scan_Dir+0x156>
 800105a:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <LCD_Scan_Dir+0xf0>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	080010c7 	.word	0x080010c7
 8001064:	08001081 	.word	0x08001081
 8001068:	0800108b 	.word	0x0800108b
 800106c:	08001095 	.word	0x08001095
 8001070:	0800109f 	.word	0x0800109f
 8001074:	080010a9 	.word	0x080010a9
 8001078:	080010b3 	.word	0x080010b3
 800107c:	080010bd 	.word	0x080010bd
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001080:	89fb      	ldrh	r3, [r7, #14]
 8001082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001086:	81fb      	strh	r3, [r7, #14]
			break;
 8001088:	e01d      	b.n	80010c6 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800108a:	89fb      	ldrh	r3, [r7, #14]
 800108c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001090:	81fb      	strh	r3, [r7, #14]
			break;
 8001092:	e018      	b.n	80010c6 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001094:	89fb      	ldrh	r3, [r7, #14]
 8001096:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800109a:	81fb      	strh	r3, [r7, #14]
			break;
 800109c:	e013      	b.n	80010c6 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800109e:	89fb      	ldrh	r3, [r7, #14]
 80010a0:	f043 0320 	orr.w	r3, r3, #32
 80010a4:	81fb      	strh	r3, [r7, #14]
			break;
 80010a6:	e00e      	b.n	80010c6 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80010a8:	89fb      	ldrh	r3, [r7, #14]
 80010aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010ae:	81fb      	strh	r3, [r7, #14]
			break;
 80010b0:	e009      	b.n	80010c6 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80010b8:	81fb      	strh	r3, [r7, #14]
			break;
 80010ba:	e004      	b.n	80010c6 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80010c2:	81fb      	strh	r3, [r7, #14]
			break;
 80010c4:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80010c6:	4b27      	ldr	r3, [pc, #156]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 80010c8:	889b      	ldrh	r3, [r3, #4]
 80010ca:	f245 5210 	movw	r2, #21776	; 0x5510
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d103      	bne.n	80010da <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80010d2:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80010d6:	81bb      	strh	r3, [r7, #12]
 80010d8:	e001      	b.n	80010de <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80010da:	2336      	movs	r3, #54	; 0x36
 80010dc:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 80010e0:	889b      	ldrh	r3, [r3, #4]
 80010e2:	f245 3210 	movw	r2, #21264	; 0x5310
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00f      	beq.n	800110a <LCD_Scan_Dir+0x19a>
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 80010ec:	889b      	ldrh	r3, [r3, #4]
 80010ee:	f245 5210 	movw	r2, #21776	; 0x5510
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d009      	beq.n	800110a <LCD_Scan_Dir+0x19a>
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 80010f8:	889b      	ldrh	r3, [r3, #4]
 80010fa:	f641 1263 	movw	r2, #6499	; 0x1963
 80010fe:	4293      	cmp	r3, r2
 8001100:	d003      	beq.n	800110a <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 800110c:	889b      	ldrh	r3, [r3, #4]
 800110e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001112:	4293      	cmp	r3, r2
 8001114:	d103      	bne.n	800111e <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800111e:	89fa      	ldrh	r2, [r7, #14]
 8001120:	89bb      	ldrh	r3, [r7, #12]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fc11 	bl	800094c <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 800112c:	889b      	ldrh	r3, [r3, #4]
 800112e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001132:	4293      	cmp	r3, r2
 8001134:	d028      	beq.n	8001188 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8001136:	89fb      	ldrh	r3, [r7, #14]
 8001138:	f003 0320 	and.w	r3, r3, #32
 800113c:	2b00      	cmp	r3, #0
 800113e:	d013      	beq.n	8001168 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 8001142:	881a      	ldrh	r2, [r3, #0]
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 8001146:	885b      	ldrh	r3, [r3, #2]
 8001148:	429a      	cmp	r2, r3
 800114a:	d21d      	bcs.n	8001188 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 8001154:	885a      	ldrh	r2, [r3, #2]
 8001156:	4b03      	ldr	r3, [pc, #12]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 8001158:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800115a:	4a02      	ldr	r2, [pc, #8]	; (8001164 <LCD_Scan_Dir+0x1f4>)
 800115c:	897b      	ldrh	r3, [r7, #10]
 800115e:	8053      	strh	r3, [r2, #2]
 8001160:	e012      	b.n	8001188 <LCD_Scan_Dir+0x218>
 8001162:	bf00      	nop
 8001164:	20009ce0 	.word	0x20009ce0
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001168:	4b7f      	ldr	r3, [pc, #508]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 800116a:	881a      	ldrh	r2, [r3, #0]
 800116c:	4b7e      	ldr	r3, [pc, #504]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 800116e:	885b      	ldrh	r3, [r3, #2]
 8001170:	429a      	cmp	r2, r3
 8001172:	d909      	bls.n	8001188 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001174:	4b7c      	ldr	r3, [pc, #496]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800117a:	4b7b      	ldr	r3, [pc, #492]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 800117c:	885a      	ldrh	r2, [r3, #2]
 800117e:	4b7a      	ldr	r3, [pc, #488]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 8001180:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001182:	4a79      	ldr	r2, [pc, #484]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001188:	4b77      	ldr	r3, [pc, #476]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 800118a:	889b      	ldrh	r3, [r3, #4]
 800118c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001190:	4293      	cmp	r3, r2
 8001192:	f040 80ef 	bne.w	8001374 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001196:	4b74      	ldr	r3, [pc, #464]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 8001198:	895b      	ldrh	r3, [r3, #10]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fb4a 	bl	8000834 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80011a0:	4b72      	ldr	r3, [pc, #456]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80011a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	4b70      	ldr	r3, [pc, #448]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80011aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ae:	615a      	str	r2, [r3, #20]
 80011b0:	4b6f      	ldr	r3, [pc, #444]	; (8001370 <LCD_Scan_Dir+0x400>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	4b6d      	ldr	r3, [pc, #436]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	4b6b      	ldr	r3, [pc, #428]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	4b6a      	ldr	r3, [pc, #424]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80011ca:	4b67      	ldr	r3, [pc, #412]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 80011cc:	895b      	ldrh	r3, [r3, #10]
 80011ce:	3301      	adds	r3, #1
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fb2e 	bl	8000834 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80011d8:	4b64      	ldr	r3, [pc, #400]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80011da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	4b62      	ldr	r3, [pc, #392]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80011e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e6:	615a      	str	r2, [r3, #20]
 80011e8:	4b61      	ldr	r3, [pc, #388]	; (8001370 <LCD_Scan_Dir+0x400>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	4b5f      	ldr	r3, [pc, #380]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	4b5d      	ldr	r3, [pc, #372]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80011f6:	2280      	movs	r2, #128	; 0x80
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	4b5c      	ldr	r3, [pc, #368]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80011fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001200:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8001202:	4b59      	ldr	r3, [pc, #356]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 8001204:	895b      	ldrh	r3, [r3, #10]
 8001206:	3302      	adds	r3, #2
 8001208:	b29b      	uxth	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fb12 	bl	8000834 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001210:	4b56      	ldr	r3, [pc, #344]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	4b54      	ldr	r3, [pc, #336]	; (800136c <LCD_Scan_Dir+0x3fc>)
 800121a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	4b51      	ldr	r3, [pc, #324]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	3b01      	subs	r3, #1
 8001226:	121a      	asrs	r2, r3, #8
 8001228:	4b51      	ldr	r3, [pc, #324]	; (8001370 <LCD_Scan_Dir+0x400>)
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	4b4f      	ldr	r3, [pc, #316]	; (800136c <LCD_Scan_Dir+0x3fc>)
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	4b4e      	ldr	r3, [pc, #312]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	4b4c      	ldr	r3, [pc, #304]	; (800136c <LCD_Scan_Dir+0x3fc>)
 800123a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001240:	4b49      	ldr	r3, [pc, #292]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 8001242:	895b      	ldrh	r3, [r3, #10]
 8001244:	3303      	adds	r3, #3
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff faf3 	bl	8000834 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800124e:	4b47      	ldr	r3, [pc, #284]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001254:	611a      	str	r2, [r3, #16]
 8001256:	4b45      	ldr	r3, [pc, #276]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	4b42      	ldr	r3, [pc, #264]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	3b01      	subs	r3, #1
 8001264:	4a42      	ldr	r2, [pc, #264]	; (8001370 <LCD_Scan_Dir+0x400>)
 8001266:	b2db      	uxtb	r3, r3
 8001268:	60d3      	str	r3, [r2, #12]
 800126a:	4b40      	ldr	r3, [pc, #256]	; (800136c <LCD_Scan_Dir+0x3fc>)
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	615a      	str	r2, [r3, #20]
 8001270:	4b3e      	ldr	r3, [pc, #248]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	611a      	str	r2, [r3, #16]
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800127c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800127e:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 8001280:	899b      	ldrh	r3, [r3, #12]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fad6 	bl	8000834 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001288:	4b38      	ldr	r3, [pc, #224]	; (800136c <LCD_Scan_Dir+0x3fc>)
 800128a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	4b36      	ldr	r3, [pc, #216]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001296:	615a      	str	r2, [r3, #20]
 8001298:	4b35      	ldr	r3, [pc, #212]	; (8001370 <LCD_Scan_Dir+0x400>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	4b33      	ldr	r3, [pc, #204]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80012a0:	2280      	movs	r2, #128	; 0x80
 80012a2:	615a      	str	r2, [r3, #20]
 80012a4:	4b31      	ldr	r3, [pc, #196]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	4b30      	ldr	r3, [pc, #192]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80012ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 80012b4:	899b      	ldrh	r3, [r3, #12]
 80012b6:	3301      	adds	r3, #1
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff faba 	bl	8000834 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012c0:	4b2a      	ldr	r3, [pc, #168]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80012c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80012ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ce:	615a      	str	r2, [r3, #20]
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <LCD_Scan_Dir+0x400>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	611a      	str	r2, [r3, #16]
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80012e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 80012ec:	899b      	ldrh	r3, [r3, #12]
 80012ee:	3302      	adds	r3, #2
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fa9e 	bl	8000834 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <LCD_Scan_Dir+0x3fc>)
 80012fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 800130a:	885b      	ldrh	r3, [r3, #2]
 800130c:	3b01      	subs	r3, #1
 800130e:	121a      	asrs	r2, r3, #8
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <LCD_Scan_Dir+0x400>)
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	615a      	str	r2, [r3, #20]
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <LCD_Scan_Dir+0x3fc>)
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001326:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 800132a:	899b      	ldrh	r3, [r3, #12]
 800132c:	3303      	adds	r3, #3
 800132e:	b29b      	uxth	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fa7f 	bl	8000834 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800133c:	611a      	str	r2, [r3, #16]
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001344:	615a      	str	r2, [r3, #20]
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <LCD_Scan_Dir+0x3f8>)
 8001348:	885b      	ldrh	r3, [r3, #2]
 800134a:	3b01      	subs	r3, #1
 800134c:	4a08      	ldr	r2, [pc, #32]	; (8001370 <LCD_Scan_Dir+0x400>)
 800134e:	b2db      	uxtb	r3, r3
 8001350:	60d3      	str	r3, [r2, #12]
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001354:	2280      	movs	r2, #128	; 0x80
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <LCD_Scan_Dir+0x3fc>)
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	611a      	str	r2, [r3, #16]
 800135e:	4b03      	ldr	r3, [pc, #12]	; (800136c <LCD_Scan_Dir+0x3fc>)
 8001360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001364:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001366:	e10b      	b.n	8001580 <LCD_Scan_Dir+0x610>
 8001368:	20009ce0 	.word	0x20009ce0
 800136c:	40011000 	.word	0x40011000
 8001370:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001374:	4b84      	ldr	r3, [pc, #528]	; (8001588 <LCD_Scan_Dir+0x618>)
 8001376:	895b      	ldrh	r3, [r3, #10]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fa5b 	bl	8000834 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800137e:	4b83      	ldr	r3, [pc, #524]	; (800158c <LCD_Scan_Dir+0x61c>)
 8001380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001384:	611a      	str	r2, [r3, #16]
 8001386:	4b81      	ldr	r3, [pc, #516]	; (800158c <LCD_Scan_Dir+0x61c>)
 8001388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	4b80      	ldr	r3, [pc, #512]	; (8001590 <LCD_Scan_Dir+0x620>)
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	4b7d      	ldr	r3, [pc, #500]	; (800158c <LCD_Scan_Dir+0x61c>)
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	4b7c      	ldr	r3, [pc, #496]	; (800158c <LCD_Scan_Dir+0x61c>)
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	4b7a      	ldr	r3, [pc, #488]	; (800158c <LCD_Scan_Dir+0x61c>)
 80013a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80013a8:	4b78      	ldr	r3, [pc, #480]	; (800158c <LCD_Scan_Dir+0x61c>)
 80013aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ae:	611a      	str	r2, [r3, #16]
 80013b0:	4b76      	ldr	r3, [pc, #472]	; (800158c <LCD_Scan_Dir+0x61c>)
 80013b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	4b75      	ldr	r3, [pc, #468]	; (8001590 <LCD_Scan_Dir+0x620>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	4b73      	ldr	r3, [pc, #460]	; (800158c <LCD_Scan_Dir+0x61c>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	615a      	str	r2, [r3, #20]
 80013c4:	4b71      	ldr	r3, [pc, #452]	; (800158c <LCD_Scan_Dir+0x61c>)
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	4b70      	ldr	r3, [pc, #448]	; (800158c <LCD_Scan_Dir+0x61c>)
 80013cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80013d2:	4b6e      	ldr	r3, [pc, #440]	; (800158c <LCD_Scan_Dir+0x61c>)
 80013d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	4b6c      	ldr	r3, [pc, #432]	; (800158c <LCD_Scan_Dir+0x61c>)
 80013dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e0:	615a      	str	r2, [r3, #20]
 80013e2:	4b69      	ldr	r3, [pc, #420]	; (8001588 <LCD_Scan_Dir+0x618>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	121a      	asrs	r2, r3, #8
 80013ea:	4b69      	ldr	r3, [pc, #420]	; (8001590 <LCD_Scan_Dir+0x620>)
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	4b67      	ldr	r3, [pc, #412]	; (800158c <LCD_Scan_Dir+0x61c>)
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	615a      	str	r2, [r3, #20]
 80013f4:	4b65      	ldr	r3, [pc, #404]	; (800158c <LCD_Scan_Dir+0x61c>)
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	611a      	str	r2, [r3, #16]
 80013fa:	4b64      	ldr	r3, [pc, #400]	; (800158c <LCD_Scan_Dir+0x61c>)
 80013fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001400:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001402:	4b62      	ldr	r3, [pc, #392]	; (800158c <LCD_Scan_Dir+0x61c>)
 8001404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001408:	611a      	str	r2, [r3, #16]
 800140a:	4b60      	ldr	r3, [pc, #384]	; (800158c <LCD_Scan_Dir+0x61c>)
 800140c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	4b5d      	ldr	r3, [pc, #372]	; (8001588 <LCD_Scan_Dir+0x618>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	3b01      	subs	r3, #1
 8001418:	4a5d      	ldr	r2, [pc, #372]	; (8001590 <LCD_Scan_Dir+0x620>)
 800141a:	b2db      	uxtb	r3, r3
 800141c:	60d3      	str	r3, [r2, #12]
 800141e:	4b5b      	ldr	r3, [pc, #364]	; (800158c <LCD_Scan_Dir+0x61c>)
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	4b59      	ldr	r3, [pc, #356]	; (800158c <LCD_Scan_Dir+0x61c>)
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	611a      	str	r2, [r3, #16]
 800142a:	4b58      	ldr	r3, [pc, #352]	; (800158c <LCD_Scan_Dir+0x61c>)
 800142c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001430:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001432:	4b55      	ldr	r3, [pc, #340]	; (8001588 <LCD_Scan_Dir+0x618>)
 8001434:	899b      	ldrh	r3, [r3, #12]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f9fc 	bl	8000834 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <LCD_Scan_Dir+0x61c>)
 800143e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001442:	611a      	str	r2, [r3, #16]
 8001444:	4b51      	ldr	r3, [pc, #324]	; (800158c <LCD_Scan_Dir+0x61c>)
 8001446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	4b50      	ldr	r3, [pc, #320]	; (8001590 <LCD_Scan_Dir+0x620>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	4b4e      	ldr	r3, [pc, #312]	; (800158c <LCD_Scan_Dir+0x61c>)
 8001454:	2280      	movs	r2, #128	; 0x80
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	4b4c      	ldr	r3, [pc, #304]	; (800158c <LCD_Scan_Dir+0x61c>)
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	611a      	str	r2, [r3, #16]
 800145e:	4b4b      	ldr	r3, [pc, #300]	; (800158c <LCD_Scan_Dir+0x61c>)
 8001460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001464:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001466:	4b49      	ldr	r3, [pc, #292]	; (800158c <LCD_Scan_Dir+0x61c>)
 8001468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800146c:	611a      	str	r2, [r3, #16]
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <LCD_Scan_Dir+0x61c>)
 8001470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	4b46      	ldr	r3, [pc, #280]	; (8001590 <LCD_Scan_Dir+0x620>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <LCD_Scan_Dir+0x61c>)
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	615a      	str	r2, [r3, #20]
 8001482:	4b42      	ldr	r3, [pc, #264]	; (800158c <LCD_Scan_Dir+0x61c>)
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	4b40      	ldr	r3, [pc, #256]	; (800158c <LCD_Scan_Dir+0x61c>)
 800148a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001490:	4b3e      	ldr	r3, [pc, #248]	; (800158c <LCD_Scan_Dir+0x61c>)
 8001492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	4b3c      	ldr	r3, [pc, #240]	; (800158c <LCD_Scan_Dir+0x61c>)
 800149a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149e:	615a      	str	r2, [r3, #20]
 80014a0:	4b39      	ldr	r3, [pc, #228]	; (8001588 <LCD_Scan_Dir+0x618>)
 80014a2:	885b      	ldrh	r3, [r3, #2]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	121a      	asrs	r2, r3, #8
 80014a8:	4b39      	ldr	r3, [pc, #228]	; (8001590 <LCD_Scan_Dir+0x620>)
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	4b37      	ldr	r3, [pc, #220]	; (800158c <LCD_Scan_Dir+0x61c>)
 80014ae:	2280      	movs	r2, #128	; 0x80
 80014b0:	615a      	str	r2, [r3, #20]
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <LCD_Scan_Dir+0x61c>)
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	4b34      	ldr	r3, [pc, #208]	; (800158c <LCD_Scan_Dir+0x61c>)
 80014ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014be:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <LCD_Scan_Dir+0x61c>)
 80014c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <LCD_Scan_Dir+0x61c>)
 80014ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <LCD_Scan_Dir+0x618>)
 80014d2:	885b      	ldrh	r3, [r3, #2]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	4a2e      	ldr	r2, [pc, #184]	; (8001590 <LCD_Scan_Dir+0x620>)
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	60d3      	str	r3, [r2, #12]
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <LCD_Scan_Dir+0x61c>)
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	615a      	str	r2, [r3, #20]
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <LCD_Scan_Dir+0x61c>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <LCD_Scan_Dir+0x61c>)
 80014ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ee:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80014f0:	e046      	b.n	8001580 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b07      	cmp	r3, #7
 80014f6:	d836      	bhi.n	8001566 <LCD_Scan_Dir+0x5f6>
 80014f8:	a201      	add	r2, pc, #4	; (adr r2, 8001500 <LCD_Scan_Dir+0x590>)
 80014fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fe:	bf00      	nop
 8001500:	08001521 	.word	0x08001521
 8001504:	0800152b 	.word	0x0800152b
 8001508:	08001535 	.word	0x08001535
 800150c:	08001567 	.word	0x08001567
 8001510:	0800153f 	.word	0x0800153f
 8001514:	08001549 	.word	0x08001549
 8001518:	08001553 	.word	0x08001553
 800151c:	0800155d 	.word	0x0800155d
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001526:	81fb      	strh	r3, [r7, #14]
			break;
 8001528:	e01d      	b.n	8001566 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	81fb      	strh	r3, [r7, #14]
			break;
 8001532:	e018      	b.n	8001566 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	f043 0320 	orr.w	r3, r3, #32
 800153a:	81fb      	strh	r3, [r7, #14]
			break;
 800153c:	e013      	b.n	8001566 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001544:	81fb      	strh	r3, [r7, #14]
			break;
 8001546:	e00e      	b.n	8001566 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001548:	89fb      	ldrh	r3, [r7, #14]
 800154a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800154e:	81fb      	strh	r3, [r7, #14]
			break;
 8001550:	e009      	b.n	8001566 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8001552:	89fb      	ldrh	r3, [r7, #14]
 8001554:	f043 0318 	orr.w	r3, r3, #24
 8001558:	81fb      	strh	r3, [r7, #14]
			break;
 800155a:	e004      	b.n	8001566 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 800155c:	89fb      	ldrh	r3, [r7, #14]
 800155e:	f043 0308 	orr.w	r3, r3, #8
 8001562:	81fb      	strh	r3, [r7, #14]
			break;
 8001564:	bf00      	nop
		}
		dirreg = 0X03;
 8001566:	2303      	movs	r3, #3
 8001568:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 800156a:	89fb      	ldrh	r3, [r7, #14]
 800156c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001570:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001572:	89fa      	ldrh	r2, [r7, #14]
 8001574:	89bb      	ldrh	r3, [r7, #12]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff f9e7 	bl	800094c <LCD_WriteReg>
	}
}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20009ce0 	.word	0x20009ce0
 800158c:	40011000 	.word	0x40011000
 8001590:	40010c00 	.word	0x40010c00

08001594 <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
 800159e:	460b      	mov	r3, r1
 80015a0:	80bb      	strh	r3, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80015a6:	4b75      	ldr	r3, [pc, #468]	; (800177c <LCD_Fast_DrawPoint+0x1e8>)
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	f249 3241 	movw	r2, #37697	; 0x9341
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d005      	beq.n	80015be <LCD_Fast_DrawPoint+0x2a>
 80015b2:	4b72      	ldr	r3, [pc, #456]	; (800177c <LCD_Fast_DrawPoint+0x1e8>)
 80015b4:	889b      	ldrh	r3, [r3, #4]
 80015b6:	f245 3210 	movw	r2, #21264	; 0x5310
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d164      	bne.n	8001688 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 80015be:	4b6f      	ldr	r3, [pc, #444]	; (800177c <LCD_Fast_DrawPoint+0x1e8>)
 80015c0:	895b      	ldrh	r3, [r3, #10]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f936 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80015c8:	4b6d      	ldr	r3, [pc, #436]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80015ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	4b6b      	ldr	r3, [pc, #428]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80015d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4b69      	ldr	r3, [pc, #420]	; (8001784 <LCD_Fast_DrawPoint+0x1f0>)
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	4b67      	ldr	r3, [pc, #412]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	615a      	str	r2, [r3, #20]
 80015e8:	4b65      	ldr	r3, [pc, #404]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	4b64      	ldr	r3, [pc, #400]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80015f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80015f6:	4b62      	ldr	r3, [pc, #392]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80015f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fc:	611a      	str	r2, [r3, #16]
 80015fe:	4b60      	ldr	r3, [pc, #384]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001604:	615a      	str	r2, [r3, #20]
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	4a5e      	ldr	r2, [pc, #376]	; (8001784 <LCD_Fast_DrawPoint+0x1f0>)
 800160a:	b2db      	uxtb	r3, r3
 800160c:	60d3      	str	r3, [r2, #12]
 800160e:	4b5c      	ldr	r3, [pc, #368]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001610:	2280      	movs	r2, #128	; 0x80
 8001612:	615a      	str	r2, [r3, #20]
 8001614:	4b5a      	ldr	r3, [pc, #360]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	4b59      	ldr	r3, [pc, #356]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 800161c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001620:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001622:	4b56      	ldr	r3, [pc, #344]	; (800177c <LCD_Fast_DrawPoint+0x1e8>)
 8001624:	899b      	ldrh	r3, [r3, #12]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff f904 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 800162c:	4b54      	ldr	r3, [pc, #336]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 800162e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	4b52      	ldr	r3, [pc, #328]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163a:	615a      	str	r2, [r3, #20]
 800163c:	88bb      	ldrh	r3, [r7, #4]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b50      	ldr	r3, [pc, #320]	; (8001784 <LCD_Fast_DrawPoint+0x1f0>)
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	4b4c      	ldr	r3, [pc, #304]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	611a      	str	r2, [r3, #16]
 8001652:	4b4b      	ldr	r3, [pc, #300]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001658:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800165a:	4b49      	ldr	r3, [pc, #292]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 800165c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	88bb      	ldrh	r3, [r7, #4]
 800166c:	4a45      	ldr	r2, [pc, #276]	; (8001784 <LCD_Fast_DrawPoint+0x1f0>)
 800166e:	b2db      	uxtb	r3, r3
 8001670:	60d3      	str	r3, [r2, #12]
 8001672:	4b43      	ldr	r3, [pc, #268]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	4b41      	ldr	r3, [pc, #260]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 800167a:	2280      	movs	r2, #128	; 0x80
 800167c:	611a      	str	r2, [r3, #16]
 800167e:	4b40      	ldr	r3, [pc, #256]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001684:	611a      	str	r2, [r3, #16]
 8001686:	e1e6      	b.n	8001a56 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8001688:	4b3c      	ldr	r3, [pc, #240]	; (800177c <LCD_Fast_DrawPoint+0x1e8>)
 800168a:	889b      	ldrh	r3, [r3, #4]
 800168c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001690:	4293      	cmp	r3, r2
 8001692:	d179      	bne.n	8001788 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8001694:	4b39      	ldr	r3, [pc, #228]	; (800177c <LCD_Fast_DrawPoint+0x1e8>)
 8001696:	895b      	ldrh	r3, [r3, #10]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff f8cb 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800169e:	4b38      	ldr	r3, [pc, #224]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80016a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80016a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ac:	615a      	str	r2, [r3, #20]
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b33      	ldr	r3, [pc, #204]	; (8001784 <LCD_Fast_DrawPoint+0x1f0>)
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	4b31      	ldr	r3, [pc, #196]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80016ba:	2280      	movs	r2, #128	; 0x80
 80016bc:	615a      	str	r2, [r3, #20]
 80016be:	4b30      	ldr	r3, [pc, #192]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	611a      	str	r2, [r3, #16]
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80016c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ca:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <LCD_Fast_DrawPoint+0x1e8>)
 80016ce:	895b      	ldrh	r3, [r3, #10]
 80016d0:	3301      	adds	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff f8ad 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 80016da:	4b29      	ldr	r3, [pc, #164]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80016dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e0:	611a      	str	r2, [r3, #16]
 80016e2:	4b27      	ldr	r3, [pc, #156]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80016e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	4a25      	ldr	r2, [pc, #148]	; (8001784 <LCD_Fast_DrawPoint+0x1f0>)
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	60d3      	str	r3, [r2, #12]
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	615a      	str	r2, [r3, #20]
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 80016fa:	2280      	movs	r2, #128	; 0x80
 80016fc:	611a      	str	r2, [r3, #16]
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001704:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <LCD_Fast_DrawPoint+0x1e8>)
 8001708:	899b      	ldrh	r3, [r3, #12]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f892 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 800171a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	88bb      	ldrh	r3, [r7, #4]
 8001722:	0a1b      	lsrs	r3, r3, #8
 8001724:	b29a      	uxth	r2, r3
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <LCD_Fast_DrawPoint+0x1f0>)
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800173c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <LCD_Fast_DrawPoint+0x1e8>)
 8001740:	899b      	ldrh	r3, [r3, #12]
 8001742:	3301      	adds	r3, #1
 8001744:	b29b      	uxth	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f874 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 800174e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001752:	611a      	str	r2, [r3, #16]
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175a:	615a      	str	r2, [r3, #20]
 800175c:	88bb      	ldrh	r3, [r7, #4]
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <LCD_Fast_DrawPoint+0x1f0>)
 8001760:	b2db      	uxtb	r3, r3
 8001762:	60d3      	str	r3, [r2, #12]
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	615a      	str	r2, [r3, #20]
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	611a      	str	r2, [r3, #16]
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <LCD_Fast_DrawPoint+0x1ec>)
 8001772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	e16d      	b.n	8001a56 <LCD_Fast_DrawPoint+0x4c2>
 800177a:	bf00      	nop
 800177c:	20009ce0 	.word	0x20009ce0
 8001780:	40011000 	.word	0x40011000
 8001784:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001788:	4b68      	ldr	r3, [pc, #416]	; (800192c <LCD_Fast_DrawPoint+0x398>)
 800178a:	889b      	ldrh	r3, [r3, #4]
 800178c:	f641 1263 	movw	r2, #6499	; 0x1963
 8001790:	4293      	cmp	r3, r2
 8001792:	f040 80d1 	bne.w	8001938 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8001796:	4b65      	ldr	r3, [pc, #404]	; (800192c <LCD_Fast_DrawPoint+0x398>)
 8001798:	799b      	ldrb	r3, [r3, #6]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 800179e:	4b63      	ldr	r3, [pc, #396]	; (800192c <LCD_Fast_DrawPoint+0x398>)
 80017a0:	881a      	ldrh	r2, [r3, #0]
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b01      	subs	r3, #1
 80017aa:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80017ac:	4b5f      	ldr	r3, [pc, #380]	; (800192c <LCD_Fast_DrawPoint+0x398>)
 80017ae:	895b      	ldrh	r3, [r3, #10]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff f83f 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80017b6:	4b5e      	ldr	r3, [pc, #376]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80017b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017bc:	611a      	str	r2, [r3, #16]
 80017be:	4b5c      	ldr	r3, [pc, #368]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80017c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c4:	615a      	str	r2, [r3, #20]
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b59      	ldr	r3, [pc, #356]	; (8001934 <LCD_Fast_DrawPoint+0x3a0>)
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	4b57      	ldr	r3, [pc, #348]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	615a      	str	r2, [r3, #20]
 80017d6:	4b56      	ldr	r3, [pc, #344]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80017d8:	2280      	movs	r2, #128	; 0x80
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	4b54      	ldr	r3, [pc, #336]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80017de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80017e4:	4b52      	ldr	r3, [pc, #328]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80017e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	4b50      	ldr	r3, [pc, #320]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80017ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f2:	615a      	str	r2, [r3, #20]
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	4a4f      	ldr	r2, [pc, #316]	; (8001934 <LCD_Fast_DrawPoint+0x3a0>)
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	60d3      	str	r3, [r2, #12]
 80017fc:	4b4c      	ldr	r3, [pc, #304]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	615a      	str	r2, [r3, #20]
 8001802:	4b4b      	ldr	r3, [pc, #300]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	611a      	str	r2, [r3, #16]
 8001808:	4b49      	ldr	r3, [pc, #292]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 800180a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001810:	4b47      	ldr	r3, [pc, #284]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001816:	611a      	str	r2, [r3, #16]
 8001818:	4b45      	ldr	r3, [pc, #276]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 800181a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800181e:	615a      	str	r2, [r3, #20]
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b43      	ldr	r3, [pc, #268]	; (8001934 <LCD_Fast_DrawPoint+0x3a0>)
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	615a      	str	r2, [r3, #20]
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	611a      	str	r2, [r3, #16]
 8001836:	4b3e      	ldr	r3, [pc, #248]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800183c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800183e:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001844:	611a      	str	r2, [r3, #16]
 8001846:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184c:	615a      	str	r2, [r3, #20]
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	4a38      	ldr	r2, [pc, #224]	; (8001934 <LCD_Fast_DrawPoint+0x3a0>)
 8001852:	b2db      	uxtb	r3, r3
 8001854:	60d3      	str	r3, [r2, #12]
 8001856:	4b36      	ldr	r3, [pc, #216]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	615a      	str	r2, [r3, #20]
 800185c:	4b34      	ldr	r3, [pc, #208]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	4b33      	ldr	r3, [pc, #204]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001868:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800186a:	4b30      	ldr	r3, [pc, #192]	; (800192c <LCD_Fast_DrawPoint+0x398>)
 800186c:	899b      	ldrh	r3, [r3, #12]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe ffe0 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001874:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187a:	611a      	str	r2, [r3, #16]
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 800187e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	88bb      	ldrh	r3, [r7, #4]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	b29a      	uxth	r2, r3
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <LCD_Fast_DrawPoint+0x3a0>)
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	615a      	str	r2, [r3, #20]
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	611a      	str	r2, [r3, #16]
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 800189c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80018a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a8:	611a      	str	r2, [r3, #16]
 80018aa:	4b21      	ldr	r3, [pc, #132]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80018ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b0:	615a      	str	r2, [r3, #20]
 80018b2:	88bb      	ldrh	r3, [r7, #4]
 80018b4:	4a1f      	ldr	r2, [pc, #124]	; (8001934 <LCD_Fast_DrawPoint+0x3a0>)
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	60d3      	str	r3, [r2, #12]
 80018ba:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80018c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018cc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80018d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	88bb      	ldrh	r3, [r7, #4]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <LCD_Fast_DrawPoint+0x3a0>)
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80018ea:	2280      	movs	r2, #128	; 0x80
 80018ec:	615a      	str	r2, [r3, #20]
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80018f0:	2280      	movs	r2, #128	; 0x80
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80018f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018fa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 80018fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800190a:	615a      	str	r2, [r3, #20]
 800190c:	88bb      	ldrh	r3, [r7, #4]
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <LCD_Fast_DrawPoint+0x3a0>)
 8001910:	b2db      	uxtb	r3, r3
 8001912:	60d3      	str	r3, [r2, #12]
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001916:	2280      	movs	r2, #128	; 0x80
 8001918:	615a      	str	r2, [r3, #20]
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <LCD_Fast_DrawPoint+0x39c>)
 8001922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	e095      	b.n	8001a56 <LCD_Fast_DrawPoint+0x4c2>
 800192a:	bf00      	nop
 800192c:	20009ce0 	.word	0x20009ce0
 8001930:	40011000 	.word	0x40011000
 8001934:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001938:	4b5e      	ldr	r3, [pc, #376]	; (8001ab4 <LCD_Fast_DrawPoint+0x520>)
 800193a:	889b      	ldrh	r3, [r3, #4]
 800193c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001940:	4293      	cmp	r3, r2
 8001942:	d16f      	bne.n	8001a24 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001944:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <LCD_Fast_DrawPoint+0x520>)
 8001946:	799b      	ldrb	r3, [r3, #6]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d106      	bne.n	800195a <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 800194c:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <LCD_Fast_DrawPoint+0x520>)
 800194e:	881a      	ldrh	r2, [r3, #0]
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 800195a:	4b56      	ldr	r3, [pc, #344]	; (8001ab4 <LCD_Fast_DrawPoint+0x520>)
 800195c:	895b      	ldrh	r3, [r3, #10]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe ff68 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001964:	4b54      	ldr	r3, [pc, #336]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196a:	611a      	str	r2, [r3, #16]
 800196c:	4b52      	ldr	r3, [pc, #328]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 800196e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001972:	615a      	str	r2, [r3, #20]
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b50      	ldr	r3, [pc, #320]	; (8001abc <LCD_Fast_DrawPoint+0x528>)
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	4b4e      	ldr	r3, [pc, #312]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001980:	2280      	movs	r2, #128	; 0x80
 8001982:	615a      	str	r2, [r3, #20]
 8001984:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001986:	2280      	movs	r2, #128	; 0x80
 8001988:	611a      	str	r2, [r3, #16]
 800198a:	4b4b      	ldr	r3, [pc, #300]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 800198c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001990:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001992:	4b49      	ldr	r3, [pc, #292]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001998:	611a      	str	r2, [r3, #16]
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 800199c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a0:	615a      	str	r2, [r3, #20]
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	4a45      	ldr	r2, [pc, #276]	; (8001abc <LCD_Fast_DrawPoint+0x528>)
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	60d3      	str	r3, [r2, #12]
 80019aa:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	615a      	str	r2, [r3, #20]
 80019b0:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	611a      	str	r2, [r3, #16]
 80019b6:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 80019b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019bc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <LCD_Fast_DrawPoint+0x520>)
 80019c0:	899b      	ldrh	r3, [r3, #12]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe ff36 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 80019ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ce:	611a      	str	r2, [r3, #16]
 80019d0:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 80019d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d6:	615a      	str	r2, [r3, #20]
 80019d8:	88bb      	ldrh	r3, [r7, #4]
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	b29a      	uxth	r2, r3
 80019de:	4b37      	ldr	r3, [pc, #220]	; (8001abc <LCD_Fast_DrawPoint+0x528>)
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	615a      	str	r2, [r3, #20]
 80019e8:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 80019f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 80019f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019fc:	611a      	str	r2, [r3, #16]
 80019fe:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a04:	615a      	str	r2, [r3, #20]
 8001a06:	88bb      	ldrh	r3, [r7, #4]
 8001a08:	4a2c      	ldr	r2, [pc, #176]	; (8001abc <LCD_Fast_DrawPoint+0x528>)
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	60d3      	str	r3, [r2, #12]
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001a10:	2280      	movs	r2, #128	; 0x80
 8001a12:	615a      	str	r2, [r3, #20]
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	611a      	str	r2, [r3, #16]
 8001a1a:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a20:	611a      	str	r2, [r3, #16]
 8001a22:	e018      	b.n	8001a56 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <LCD_Fast_DrawPoint+0x520>)
 8001a26:	799b      	ldrb	r3, [r3, #6]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d106      	bne.n	8001a3a <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <LCD_Fast_DrawPoint+0x520>)
 8001a2e:	881a      	ldrh	r2, [r3, #0]
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3b01      	subs	r3, #1
 8001a38:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <LCD_Fast_DrawPoint+0x520>)
 8001a3c:	895b      	ldrh	r3, [r3, #10]
 8001a3e:	88fa      	ldrh	r2, [r7, #6]
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe ff82 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <LCD_Fast_DrawPoint+0x520>)
 8001a4a:	899b      	ldrh	r3, [r3, #12]
 8001a4c:	88ba      	ldrh	r2, [r7, #4]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe ff7b 	bl	800094c <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a64:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <LCD_Fast_DrawPoint+0x520>)
 8001a68:	891a      	ldrh	r2, [r3, #8]
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <LCD_Fast_DrawPoint+0x528>)
 8001a6c:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a80:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a88:	611a      	str	r2, [r3, #16]
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a90:	615a      	str	r2, [r3, #20]
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <LCD_Fast_DrawPoint+0x528>)
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	60d3      	str	r3, [r2, #12]
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	615a      	str	r2, [r3, #20]
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001aa0:	2280      	movs	r2, #128	; 0x80
 8001aa2:	611a      	str	r2, [r3, #16]
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <LCD_Fast_DrawPoint+0x524>)
 8001aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aaa:	611a      	str	r2, [r3, #16]
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20009ce0 	.word	0x20009ce0
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	40010c00 	.word	0x40010c00

08001ac0 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001aca:	20be      	movs	r0, #190	; 0xbe
 8001acc:	f7fe feb2 	bl	8000834 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001ad0:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ade:	615a      	str	r2, [r3, #20]
 8001ae0:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <LCD_SSD_BackLightSet+0x144>)
 8001ae2:	2205      	movs	r2, #5
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	4b44      	ldr	r3, [pc, #272]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	611a      	str	r2, [r3, #16]
 8001af2:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b00:	611a      	str	r2, [r3, #16]
 8001b02:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b08:	615a      	str	r2, [r3, #20]
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fe07 	bl	8000720 <__aeabi_i2d>
 8001b12:	a339      	add	r3, pc, #228	; (adr r3, 8001bf8 <LCD_SSD_BackLightSet+0x138>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fb86 	bl	8000228 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4c38      	ldr	r4, [pc, #224]	; (8001c04 <LCD_SSD_BackLightSet+0x144>)
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f7fe fe65 	bl	80007f4 <__aeabi_d2uiz>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	60e3      	str	r3, [r4, #12]
 8001b2e:	4b34      	ldr	r3, [pc, #208]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	611a      	str	r2, [r3, #16]
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b40:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001b42:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b48:	611a      	str	r2, [r3, #16]
 8001b4a:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b50:	615a      	str	r2, [r3, #20]
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <LCD_SSD_BackLightSet+0x144>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	615a      	str	r2, [r3, #20]
 8001b5e:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	611a      	str	r2, [r3, #16]
 8001b64:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b72:	611a      	str	r2, [r3, #16]
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7a:	615a      	str	r2, [r3, #20]
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <LCD_SSD_BackLightSet+0x144>)
 8001b7e:	22ff      	movs	r2, #255	; 0xff
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	615a      	str	r2, [r3, #20]
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b94:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b9c:	611a      	str	r2, [r3, #16]
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba4:	615a      	str	r2, [r3, #20]
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <LCD_SSD_BackLightSet+0x144>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	615a      	str	r2, [r3, #20]
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	611a      	str	r2, [r3, #16]
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bbe:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc6:	611a      	str	r2, [r3, #16]
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bce:	615a      	str	r2, [r3, #20]
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <LCD_SSD_BackLightSet+0x144>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	615a      	str	r2, [r3, #20]
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001bde:	2280      	movs	r2, #128	; 0x80
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <LCD_SSD_BackLightSet+0x140>)
 8001be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be8:	611a      	str	r2, [r3, #16]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd90      	pop	{r4, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	66666666 	.word	0x66666666
 8001bfc:	40046666 	.word	0x40046666
 8001c00:	40011000 	.word	0x40011000
 8001c04:	40010c00 	.word	0x40010c00

08001c08 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d177      	bne.n	8001d08 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001c18:	4b80      	ldr	r3, [pc, #512]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001c1e:	4b7f      	ldr	r3, [pc, #508]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c20:	22f0      	movs	r2, #240	; 0xf0
 8001c22:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001c24:	4b7d      	ldr	r3, [pc, #500]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c26:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c2a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001c2c:	4b7b      	ldr	r3, [pc, #492]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c2e:	889b      	ldrh	r3, [r3, #4]
 8001c30:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00b      	beq.n	8001c50 <LCD_Display_Dir+0x48>
 8001c38:	4b78      	ldr	r3, [pc, #480]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c3a:	889b      	ldrh	r3, [r3, #4]
 8001c3c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d005      	beq.n	8001c50 <LCD_Display_Dir+0x48>
 8001c44:	4b75      	ldr	r3, [pc, #468]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c46:	889b      	ldrh	r3, [r3, #4]
 8001c48:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d11e      	bne.n	8001c8e <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001c50:	4b72      	ldr	r3, [pc, #456]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c52:	222c      	movs	r2, #44	; 0x2c
 8001c54:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001c56:	4b71      	ldr	r3, [pc, #452]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c58:	222a      	movs	r2, #42	; 0x2a
 8001c5a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001c5c:	4b6f      	ldr	r3, [pc, #444]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c5e:	222b      	movs	r2, #43	; 0x2b
 8001c60:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001c62:	4b6e      	ldr	r3, [pc, #440]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c64:	889b      	ldrh	r3, [r3, #4]
 8001c66:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d006      	beq.n	8001c7c <LCD_Display_Dir+0x74>
 8001c6e:	4b6b      	ldr	r3, [pc, #428]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c70:	889b      	ldrh	r3, [r3, #4]
 8001c72:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c76:	4293      	cmp	r3, r2
 8001c78:	f040 80c7 	bne.w	8001e0a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001c7c:	4b67      	ldr	r3, [pc, #412]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c82:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001c84:	4b65      	ldr	r3, [pc, #404]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c86:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c8a:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001c8c:	e0bd      	b.n	8001e0a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001c8e:	4b63      	ldr	r3, [pc, #396]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c90:	889b      	ldrh	r3, [r3, #4]
 8001c92:	f245 5210 	movw	r2, #21776	; 0x5510
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d114      	bne.n	8001cc4 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001c9a:	4b60      	ldr	r3, [pc, #384]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001c9c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001ca0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001ca2:	4b5e      	ldr	r3, [pc, #376]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001ca4:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001ca8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001cac:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001cb0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001cb2:	4b5a      	ldr	r3, [pc, #360]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001cb4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001cb8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001cba:	4b58      	ldr	r3, [pc, #352]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001cbc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001cc0:	805a      	strh	r2, [r3, #2]
 8001cc2:	e0a3      	b.n	8001e0c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001cc4:	4b55      	ldr	r3, [pc, #340]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001cc6:	889b      	ldrh	r3, [r3, #4]
 8001cc8:	f641 1263 	movw	r2, #6499	; 0x1963
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d111      	bne.n	8001cf4 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001cd0:	4b52      	ldr	r3, [pc, #328]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001cd2:	222c      	movs	r2, #44	; 0x2c
 8001cd4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001cd6:	4b51      	ldr	r3, [pc, #324]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001cd8:	222b      	movs	r2, #43	; 0x2b
 8001cda:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001cdc:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001cde:	222a      	movs	r2, #42	; 0x2a
 8001ce0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001ce2:	4b4e      	ldr	r3, [pc, #312]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001ce4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ce8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001cea:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001cec:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001cf0:	805a      	strh	r2, [r3, #2]
 8001cf2:	e08b      	b.n	8001e0c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001cf4:	4b49      	ldr	r3, [pc, #292]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001cf6:	2222      	movs	r2, #34	; 0x22
 8001cf8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001cfa:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001d00:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d02:	2221      	movs	r2, #33	; 0x21
 8001d04:	819a      	strh	r2, [r3, #12]
 8001d06:	e081      	b.n	8001e0c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001d08:	4b44      	ldr	r3, [pc, #272]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001d0e:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d10:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d14:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001d16:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d18:	22f0      	movs	r2, #240	; 0xf0
 8001d1a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001d1c:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d1e:	889b      	ldrh	r3, [r3, #4]
 8001d20:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d005      	beq.n	8001d34 <LCD_Display_Dir+0x12c>
 8001d28:	4b3c      	ldr	r3, [pc, #240]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d2a:	889b      	ldrh	r3, [r3, #4]
 8001d2c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d109      	bne.n	8001d48 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001d34:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d36:	222c      	movs	r2, #44	; 0x2c
 8001d38:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001d3a:	4b38      	ldr	r3, [pc, #224]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d3c:	222a      	movs	r2, #42	; 0x2a
 8001d3e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001d40:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d42:	222b      	movs	r2, #43	; 0x2b
 8001d44:	819a      	strh	r2, [r3, #12]
 8001d46:	e04b      	b.n	8001de0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001d48:	4b34      	ldr	r3, [pc, #208]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d4a:	889b      	ldrh	r3, [r3, #4]
 8001d4c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d109      	bne.n	8001d68 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001d54:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d56:	222c      	movs	r2, #44	; 0x2c
 8001d58:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001d5a:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d5c:	222b      	movs	r2, #43	; 0x2b
 8001d5e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001d60:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d62:	222a      	movs	r2, #42	; 0x2a
 8001d64:	819a      	strh	r2, [r3, #12]
 8001d66:	e03b      	b.n	8001de0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001d68:	4b2c      	ldr	r3, [pc, #176]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d6a:	889b      	ldrh	r3, [r3, #4]
 8001d6c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d114      	bne.n	8001d9e <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001d74:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d76:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001d7a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001d7c:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d7e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001d82:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d86:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001d8a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001d8c:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d8e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d92:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001d96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d9a:	805a      	strh	r2, [r3, #2]
 8001d9c:	e020      	b.n	8001de0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001da0:	889b      	ldrh	r3, [r3, #4]
 8001da2:	f641 1263 	movw	r2, #6499	; 0x1963
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d111      	bne.n	8001dce <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001dac:	222c      	movs	r2, #44	; 0x2c
 8001dae:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001db2:	222a      	movs	r2, #42	; 0x2a
 8001db4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001db6:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001db8:	222b      	movs	r2, #43	; 0x2b
 8001dba:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001dbe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001dc2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001dc6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001dca:	805a      	strh	r2, [r3, #2]
 8001dcc:	e008      	b.n	8001de0 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001dd0:	2222      	movs	r2, #34	; 0x22
 8001dd2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001dd6:	2221      	movs	r2, #33	; 0x21
 8001dd8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001ddc:	2220      	movs	r2, #32
 8001dde:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001de2:	889b      	ldrh	r3, [r3, #4]
 8001de4:	f646 0204 	movw	r2, #26628	; 0x6804
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d005      	beq.n	8001df8 <LCD_Display_Dir+0x1f0>
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001dee:	889b      	ldrh	r3, [r3, #4]
 8001df0:	f245 3210 	movw	r2, #21264	; 0x5310
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d109      	bne.n	8001e0c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001dfa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001dfe:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <LCD_Display_Dir+0x214>)
 8001e02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e06:	805a      	strh	r2, [r3, #2]
 8001e08:	e000      	b.n	8001e0c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001e0a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff f8af 	bl	8000f70 <LCD_Scan_Dir>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20009ce0 	.word	0x20009ce0

08001e20 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001e26:	4b90      	ldr	r3, [pc, #576]	; (8002068 <LCD_Init+0x248>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	4a8f      	ldr	r2, [pc, #572]	; (8002068 <LCD_Init+0x248>)
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	6193      	str	r3, [r2, #24]
 8001e32:	4b8d      	ldr	r3, [pc, #564]	; (8002068 <LCD_Init+0x248>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001e3e:	4b8a      	ldr	r3, [pc, #552]	; (8002068 <LCD_Init+0x248>)
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	4a89      	ldr	r2, [pc, #548]	; (8002068 <LCD_Init+0x248>)
 8001e44:	f043 0310 	orr.w	r3, r3, #16
 8001e48:	6193      	str	r3, [r2, #24]
 8001e4a:	4b87      	ldr	r3, [pc, #540]	; (8002068 <LCD_Init+0x248>)
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001e56:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001e5a:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001e60:	2301      	movs	r3, #1
 8001e62:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001e64:	2303      	movs	r3, #3
 8001e66:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001e68:	f107 0308 	add.w	r3, r7, #8
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	487f      	ldr	r0, [pc, #508]	; (800206c <LCD_Init+0x24c>)
 8001e70:	f005 f890 	bl	8006f94 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e78:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001e7a:	f107 0308 	add.w	r3, r7, #8
 8001e7e:	4619      	mov	r1, r3
 8001e80:	487b      	ldr	r0, [pc, #492]	; (8002070 <LCD_Init+0x250>)
 8001e82:	f005 f887 	bl	8006f94 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001e86:	2032      	movs	r0, #50	; 0x32
 8001e88:	f004 fe10 	bl	8006aac <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7fe fd5c 	bl	800094c <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001e94:	2032      	movs	r0, #50	; 0x32
 8001e96:	f004 fe09 	bl	8006aac <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7fe fd80 	bl	80009a0 <LCD_ReadReg>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b73      	ldr	r3, [pc, #460]	; (8002074 <LCD_Init+0x254>)
 8001ea6:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001ea8:	4b72      	ldr	r3, [pc, #456]	; (8002074 <LCD_Init+0x254>)
 8001eaa:	889b      	ldrh	r3, [r3, #4]
 8001eac:	2bfe      	cmp	r3, #254	; 0xfe
 8001eae:	d90b      	bls.n	8001ec8 <LCD_Init+0xa8>
 8001eb0:	4b70      	ldr	r3, [pc, #448]	; (8002074 <LCD_Init+0x254>)
 8001eb2:	889b      	ldrh	r3, [r3, #4]
 8001eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d005      	beq.n	8001ec8 <LCD_Init+0xa8>
 8001ebc:	4b6d      	ldr	r3, [pc, #436]	; (8002074 <LCD_Init+0x254>)
 8001ebe:	889b      	ldrh	r3, [r3, #4]
 8001ec0:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001ec4:	f040 80c8 	bne.w	8002058 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001ec8:	20d3      	movs	r0, #211	; 0xd3
 8001eca:	f7fe fcb3 	bl	8000834 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8001ece:	f7fe fcf9 	bl	80008c4 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8001ed2:	f7fe fcf7 	bl	80008c4 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8001ed6:	f7fe fcf5 	bl	80008c4 <LCD_RD_DATA>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b65      	ldr	r3, [pc, #404]	; (8002074 <LCD_Init+0x254>)
 8001ee0:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8001ee2:	4b64      	ldr	r3, [pc, #400]	; (8002074 <LCD_Init+0x254>)
 8001ee4:	889b      	ldrh	r3, [r3, #4]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b62      	ldr	r3, [pc, #392]	; (8002074 <LCD_Init+0x254>)
 8001eec:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8001eee:	f7fe fce9 	bl	80008c4 <LCD_RD_DATA>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b5f      	ldr	r3, [pc, #380]	; (8002074 <LCD_Init+0x254>)
 8001ef8:	889b      	ldrh	r3, [r3, #4]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <LCD_Init+0x254>)
 8001f00:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8001f02:	4b5c      	ldr	r3, [pc, #368]	; (8002074 <LCD_Init+0x254>)
 8001f04:	889b      	ldrh	r3, [r3, #4]
 8001f06:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	f000 80a4 	beq.w	8002058 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8001f10:	20bf      	movs	r0, #191	; 0xbf
 8001f12:	f7fe fc8f 	bl	8000834 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8001f16:	f7fe fcd5 	bl	80008c4 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8001f1a:	f7fe fcd3 	bl	80008c4 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8001f1e:	f7fe fcd1 	bl	80008c4 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8001f22:	f7fe fccf 	bl	80008c4 <LCD_RD_DATA>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b52      	ldr	r3, [pc, #328]	; (8002074 <LCD_Init+0x254>)
 8001f2c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8001f2e:	4b51      	ldr	r3, [pc, #324]	; (8002074 <LCD_Init+0x254>)
 8001f30:	889b      	ldrh	r3, [r3, #4]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <LCD_Init+0x254>)
 8001f38:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8001f3a:	f7fe fcc3 	bl	80008c4 <LCD_RD_DATA>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <LCD_Init+0x254>)
 8001f44:	889b      	ldrh	r3, [r3, #4]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <LCD_Init+0x254>)
 8001f4c:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8001f4e:	4b49      	ldr	r3, [pc, #292]	; (8002074 <LCD_Init+0x254>)
 8001f50:	889b      	ldrh	r3, [r3, #4]
 8001f52:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d07e      	beq.n	8002058 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8001f5a:	20d4      	movs	r0, #212	; 0xd4
 8001f5c:	f7fe fc6a 	bl	8000834 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8001f60:	f7fe fcb0 	bl	80008c4 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8001f64:	f7fe fcae 	bl	80008c4 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8001f68:	f7fe fcac 	bl	80008c4 <LCD_RD_DATA>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b40      	ldr	r3, [pc, #256]	; (8002074 <LCD_Init+0x254>)
 8001f72:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8001f74:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <LCD_Init+0x254>)
 8001f76:	889b      	ldrh	r3, [r3, #4]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <LCD_Init+0x254>)
 8001f7e:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8001f80:	f7fe fca0 	bl	80008c4 <LCD_RD_DATA>
 8001f84:	4603      	mov	r3, r0
 8001f86:	461a      	mov	r2, r3
 8001f88:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <LCD_Init+0x254>)
 8001f8a:	889b      	ldrh	r3, [r3, #4]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	4b38      	ldr	r3, [pc, #224]	; (8002074 <LCD_Init+0x254>)
 8001f92:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001f94:	4b37      	ldr	r3, [pc, #220]	; (8002074 <LCD_Init+0x254>)
 8001f96:	889b      	ldrh	r3, [r3, #4]
 8001f98:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d05b      	beq.n	8002058 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8001fa0:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001fa4:	f7fe fc46 	bl	8000834 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8001fa8:	f7fe fc8c 	bl	80008c4 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8001fac:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001fb0:	f7fe fc40 	bl	8000834 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8001fb4:	f7fe fc86 	bl	80008c4 <LCD_RD_DATA>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <LCD_Init+0x254>)
 8001fbe:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8001fc0:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <LCD_Init+0x254>)
 8001fc2:	889b      	ldrh	r3, [r3, #4]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <LCD_Init+0x254>)
 8001fca:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8001fcc:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001fd0:	f7fe fc30 	bl	8000834 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8001fd4:	f7fe fc76 	bl	80008c4 <LCD_RD_DATA>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <LCD_Init+0x254>)
 8001fde:	889b      	ldrh	r3, [r3, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <LCD_Init+0x254>)
 8001fe6:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <LCD_Init+0x254>)
 8001fea:	889b      	ldrh	r3, [r3, #4]
 8001fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ff0:	d103      	bne.n	8001ffa <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <LCD_Init+0x254>)
 8001ff4:	f245 5210 	movw	r2, #21776	; 0x5510
 8001ff8:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <LCD_Init+0x254>)
 8001ffc:	889b      	ldrh	r3, [r3, #4]
 8001ffe:	f245 5210 	movw	r2, #21776	; 0x5510
 8002002:	4293      	cmp	r3, r2
 8002004:	d028      	beq.n	8002058 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8002006:	20a1      	movs	r0, #161	; 0xa1
 8002008:	f7fe fc14 	bl	8000834 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 800200c:	f7fe fc5a 	bl	80008c4 <LCD_RD_DATA>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <LCD_Init+0x254>)
 8002016:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002018:	f7fe fc54 	bl	80008c4 <LCD_RD_DATA>
 800201c:	4603      	mov	r3, r0
 800201e:	461a      	mov	r2, r3
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <LCD_Init+0x254>)
 8002022:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <LCD_Init+0x254>)
 8002026:	889b      	ldrh	r3, [r3, #4]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <LCD_Init+0x254>)
 800202e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002030:	f7fe fc48 	bl	80008c4 <LCD_RD_DATA>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <LCD_Init+0x254>)
 800203a:	889b      	ldrh	r3, [r3, #4]
 800203c:	4313      	orrs	r3, r2
 800203e:	b29a      	uxth	r2, r3
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <LCD_Init+0x254>)
 8002042:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <LCD_Init+0x254>)
 8002046:	889b      	ldrh	r3, [r3, #4]
 8002048:	f245 7261 	movw	r2, #22369	; 0x5761
 800204c:	4293      	cmp	r3, r2
 800204e:	d103      	bne.n	8002058 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <LCD_Init+0x254>)
 8002052:	f641 1263 	movw	r2, #6499	; 0x1963
 8002056:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <LCD_Init+0x254>)
 800205a:	889b      	ldrh	r3, [r3, #4]
 800205c:	f249 3241 	movw	r2, #37697	; 0x9341
 8002060:	4293      	cmp	r3, r2
 8002062:	f040 811f 	bne.w	80022a4 <LCD_Init+0x484>
 8002066:	e007      	b.n	8002078 <LCD_Init+0x258>
 8002068:	40021000 	.word	0x40021000
 800206c:	40011000 	.word	0x40011000
 8002070:	40010c00 	.word	0x40010c00
 8002074:	20009ce0 	.word	0x20009ce0
			{
		LCD_WR_REG(0xCF);
 8002078:	20cf      	movs	r0, #207	; 0xcf
 800207a:	f7fe fbdb 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800207e:	2000      	movs	r0, #0
 8002080:	f7fe fbfc 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8002084:	20c1      	movs	r0, #193	; 0xc1
 8002086:	f7fe fbf9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 800208a:	2030      	movs	r0, #48	; 0x30
 800208c:	f7fe fbf6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8002090:	20ed      	movs	r0, #237	; 0xed
 8002092:	f7fe fbcf 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8002096:	2064      	movs	r0, #100	; 0x64
 8002098:	f7fe fbf0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800209c:	2003      	movs	r0, #3
 800209e:	f7fe fbed 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80020a2:	2012      	movs	r0, #18
 80020a4:	f7fe fbea 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80020a8:	2081      	movs	r0, #129	; 0x81
 80020aa:	f7fe fbe7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80020ae:	20e8      	movs	r0, #232	; 0xe8
 80020b0:	f7fe fbc0 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80020b4:	2085      	movs	r0, #133	; 0x85
 80020b6:	f7fe fbe1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80020ba:	2010      	movs	r0, #16
 80020bc:	f7fe fbde 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80020c0:	207a      	movs	r0, #122	; 0x7a
 80020c2:	f7fe fbdb 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 80020c6:	20cb      	movs	r0, #203	; 0xcb
 80020c8:	f7fe fbb4 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 80020cc:	2039      	movs	r0, #57	; 0x39
 80020ce:	f7fe fbd5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80020d2:	202c      	movs	r0, #44	; 0x2c
 80020d4:	f7fe fbd2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020d8:	2000      	movs	r0, #0
 80020da:	f7fe fbcf 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80020de:	2034      	movs	r0, #52	; 0x34
 80020e0:	f7fe fbcc 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80020e4:	2002      	movs	r0, #2
 80020e6:	f7fe fbc9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 80020ea:	20f7      	movs	r0, #247	; 0xf7
 80020ec:	f7fe fba2 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80020f0:	2020      	movs	r0, #32
 80020f2:	f7fe fbc3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 80020f6:	20ea      	movs	r0, #234	; 0xea
 80020f8:	f7fe fb9c 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7fe fbbd 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002102:	2000      	movs	r0, #0
 8002104:	f7fe fbba 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002108:	20c0      	movs	r0, #192	; 0xc0
 800210a:	f7fe fb93 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 800210e:	201b      	movs	r0, #27
 8002110:	f7fe fbb4 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8002114:	20c1      	movs	r0, #193	; 0xc1
 8002116:	f7fe fb8d 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 800211a:	2001      	movs	r0, #1
 800211c:	f7fe fbae 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002120:	20c5      	movs	r0, #197	; 0xc5
 8002122:	f7fe fb87 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8002126:	2030      	movs	r0, #48	; 0x30
 8002128:	f7fe fba8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 800212c:	2030      	movs	r0, #48	; 0x30
 800212e:	f7fe fba5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8002132:	20c7      	movs	r0, #199	; 0xc7
 8002134:	f7fe fb7e 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002138:	20b7      	movs	r0, #183	; 0xb7
 800213a:	f7fe fb9f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 800213e:	2036      	movs	r0, #54	; 0x36
 8002140:	f7fe fb78 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8002144:	2048      	movs	r0, #72	; 0x48
 8002146:	f7fe fb99 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 800214a:	203a      	movs	r0, #58	; 0x3a
 800214c:	f7fe fb72 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002150:	2055      	movs	r0, #85	; 0x55
 8002152:	f7fe fb93 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8002156:	20b1      	movs	r0, #177	; 0xb1
 8002158:	f7fe fb6c 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800215c:	2000      	movs	r0, #0
 800215e:	f7fe fb8d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8002162:	201a      	movs	r0, #26
 8002164:	f7fe fb8a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8002168:	20b6      	movs	r0, #182	; 0xb6
 800216a:	f7fe fb63 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800216e:	200a      	movs	r0, #10
 8002170:	f7fe fb84 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002174:	20a2      	movs	r0, #162	; 0xa2
 8002176:	f7fe fb81 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 800217a:	20f2      	movs	r0, #242	; 0xf2
 800217c:	f7fe fb5a 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002180:	2000      	movs	r0, #0
 8002182:	f7fe fb7b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8002186:	2026      	movs	r0, #38	; 0x26
 8002188:	f7fe fb54 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800218c:	2001      	movs	r0, #1
 800218e:	f7fe fb75 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8002192:	20e0      	movs	r0, #224	; 0xe0
 8002194:	f7fe fb4e 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002198:	200f      	movs	r0, #15
 800219a:	f7fe fb6f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800219e:	202a      	movs	r0, #42	; 0x2a
 80021a0:	f7fe fb6c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80021a4:	2028      	movs	r0, #40	; 0x28
 80021a6:	f7fe fb69 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80021aa:	2008      	movs	r0, #8
 80021ac:	f7fe fb66 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80021b0:	200e      	movs	r0, #14
 80021b2:	f7fe fb63 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80021b6:	2008      	movs	r0, #8
 80021b8:	f7fe fb60 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80021bc:	2054      	movs	r0, #84	; 0x54
 80021be:	f7fe fb5d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 80021c2:	20a9      	movs	r0, #169	; 0xa9
 80021c4:	f7fe fb5a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80021c8:	2043      	movs	r0, #67	; 0x43
 80021ca:	f7fe fb57 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 80021ce:	200a      	movs	r0, #10
 80021d0:	f7fe fb54 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80021d4:	200f      	movs	r0, #15
 80021d6:	f7fe fb51 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021da:	2000      	movs	r0, #0
 80021dc:	f7fe fb4e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7fe fb4b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7fe fb48 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7fe fb45 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 80021f2:	20e1      	movs	r0, #225	; 0xe1
 80021f4:	f7fe fb1e 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f7fe fb3f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 80021fe:	2015      	movs	r0, #21
 8002200:	f7fe fb3c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002204:	2017      	movs	r0, #23
 8002206:	f7fe fb39 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 800220a:	2007      	movs	r0, #7
 800220c:	f7fe fb36 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002210:	2011      	movs	r0, #17
 8002212:	f7fe fb33 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8002216:	2006      	movs	r0, #6
 8002218:	f7fe fb30 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 800221c:	202b      	movs	r0, #43	; 0x2b
 800221e:	f7fe fb2d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002222:	2056      	movs	r0, #86	; 0x56
 8002224:	f7fe fb2a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002228:	203c      	movs	r0, #60	; 0x3c
 800222a:	f7fe fb27 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800222e:	2005      	movs	r0, #5
 8002230:	f7fe fb24 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002234:	2010      	movs	r0, #16
 8002236:	f7fe fb21 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800223a:	200f      	movs	r0, #15
 800223c:	f7fe fb1e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002240:	203f      	movs	r0, #63	; 0x3f
 8002242:	f7fe fb1b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002246:	203f      	movs	r0, #63	; 0x3f
 8002248:	f7fe fb18 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800224c:	200f      	movs	r0, #15
 800224e:	f7fe fb15 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8002252:	202b      	movs	r0, #43	; 0x2b
 8002254:	f7fe faee 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002258:	2000      	movs	r0, #0
 800225a:	f7fe fb0f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe fb0c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002264:	2001      	movs	r0, #1
 8002266:	f7fe fb09 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 800226a:	203f      	movs	r0, #63	; 0x3f
 800226c:	f7fe fb06 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002270:	202a      	movs	r0, #42	; 0x2a
 8002272:	f7fe fadf 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002276:	2000      	movs	r0, #0
 8002278:	f7fe fb00 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800227c:	2000      	movs	r0, #0
 800227e:	f7fe fafd 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002282:	2000      	movs	r0, #0
 8002284:	f7fe fafa 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8002288:	20ef      	movs	r0, #239	; 0xef
 800228a:	f7fe faf7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 800228e:	2011      	movs	r0, #17
 8002290:	f7fe fad0 	bl	8000834 <LCD_WR_REG>
		HAL_Delay(120);
 8002294:	2078      	movs	r0, #120	; 0x78
 8002296:	f004 fc09 	bl	8006aac <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 800229a:	2029      	movs	r0, #41	; 0x29
 800229c:	f7fe faca 	bl	8000834 <LCD_WR_REG>
 80022a0:	f003 bcd8 	b.w	8005c54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80022a4:	4b58      	ldr	r3, [pc, #352]	; (8002408 <LCD_Init+0x5e8>)
 80022a6:	889b      	ldrh	r3, [r3, #4]
 80022a8:	f646 0204 	movw	r2, #26628	; 0x6804
 80022ac:	4293      	cmp	r3, r2
 80022ae:	f040 80ad 	bne.w	800240c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80022b2:	2011      	movs	r0, #17
 80022b4:	f7fe fabe 	bl	8000834 <LCD_WR_REG>
		HAL_Delay(20);
 80022b8:	2014      	movs	r0, #20
 80022ba:	f004 fbf7 	bl	8006aac <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 80022be:	20d0      	movs	r0, #208	; 0xd0
 80022c0:	f7fe fab8 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 80022c4:	2007      	movs	r0, #7
 80022c6:	f7fe fad9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 80022ca:	2042      	movs	r0, #66	; 0x42
 80022cc:	f7fe fad6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 80022d0:	201d      	movs	r0, #29
 80022d2:	f7fe fad3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 80022d6:	20d1      	movs	r0, #209	; 0xd1
 80022d8:	f7fe faac 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80022dc:	2000      	movs	r0, #0
 80022de:	f7fe facd 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 80022e2:	201a      	movs	r0, #26
 80022e4:	f7fe faca 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 80022e8:	2009      	movs	r0, #9
 80022ea:	f7fe fac7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 80022ee:	20d2      	movs	r0, #210	; 0xd2
 80022f0:	f7fe faa0 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7fe fac1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 80022fa:	2022      	movs	r0, #34	; 0x22
 80022fc:	f7fe fabe 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002300:	20c0      	movs	r0, #192	; 0xc0
 8002302:	f7fe fa97 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8002306:	2010      	movs	r0, #16
 8002308:	f7fe fab8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 800230c:	203b      	movs	r0, #59	; 0x3b
 800230e:	f7fe fab5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002312:	2000      	movs	r0, #0
 8002314:	f7fe fab2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002318:	2002      	movs	r0, #2
 800231a:	f7fe faaf 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 800231e:	2011      	movs	r0, #17
 8002320:	f7fe faac 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8002324:	20c5      	movs	r0, #197	; 0xc5
 8002326:	f7fe fa85 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 800232a:	2003      	movs	r0, #3
 800232c:	f7fe faa6 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002330:	20c8      	movs	r0, #200	; 0xc8
 8002332:	f7fe fa7f 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002336:	2000      	movs	r0, #0
 8002338:	f7fe faa0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 800233c:	2025      	movs	r0, #37	; 0x25
 800233e:	f7fe fa9d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8002342:	2021      	movs	r0, #33	; 0x21
 8002344:	f7fe fa9a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002348:	2005      	movs	r0, #5
 800234a:	f7fe fa97 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800234e:	2000      	movs	r0, #0
 8002350:	f7fe fa94 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8002354:	200a      	movs	r0, #10
 8002356:	f7fe fa91 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 800235a:	2065      	movs	r0, #101	; 0x65
 800235c:	f7fe fa8e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002360:	2025      	movs	r0, #37	; 0x25
 8002362:	f7fe fa8b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8002366:	2077      	movs	r0, #119	; 0x77
 8002368:	f7fe fa88 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 800236c:	2050      	movs	r0, #80	; 0x50
 800236e:	f7fe fa85 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8002372:	200f      	movs	r0, #15
 8002374:	f7fe fa82 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002378:	2000      	movs	r0, #0
 800237a:	f7fe fa7f 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 800237e:	20f8      	movs	r0, #248	; 0xf8
 8002380:	f7fe fa58 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002384:	2001      	movs	r0, #1
 8002386:	f7fe fa79 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 800238a:	20fe      	movs	r0, #254	; 0xfe
 800238c:	f7fe fa52 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002390:	2000      	movs	r0, #0
 8002392:	f7fe fa73 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002396:	2002      	movs	r0, #2
 8002398:	f7fe fa70 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 800239c:	2020      	movs	r0, #32
 800239e:	f7fe fa49 	bl	8000834 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80023a2:	2036      	movs	r0, #54	; 0x36
 80023a4:	f7fe fa46 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 80023a8:	2008      	movs	r0, #8
 80023aa:	f7fe fa67 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 80023ae:	203a      	movs	r0, #58	; 0x3a
 80023b0:	f7fe fa40 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80023b4:	2055      	movs	r0, #85	; 0x55
 80023b6:	f7fe fa61 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 80023ba:	202b      	movs	r0, #43	; 0x2b
 80023bc:	f7fe fa3a 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fa5b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7fe fa58 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f7fe fa55 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 80023d2:	203f      	movs	r0, #63	; 0x3f
 80023d4:	f7fe fa52 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 80023d8:	202a      	movs	r0, #42	; 0x2a
 80023da:	f7fe fa2b 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7fe fa4c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe fa49 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f7fe fa46 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 80023f0:	20df      	movs	r0, #223	; 0xdf
 80023f2:	f7fe fa43 	bl	800087c <LCD_WR_DATAX>
		HAL_Delay(120);
 80023f6:	2078      	movs	r0, #120	; 0x78
 80023f8:	f004 fb58 	bl	8006aac <HAL_Delay>
		LCD_WR_REG(0X29);
 80023fc:	2029      	movs	r0, #41	; 0x29
 80023fe:	f7fe fa19 	bl	8000834 <LCD_WR_REG>
 8002402:	f003 bc27 	b.w	8005c54 <LCD_Init+0x3e34>
 8002406:	bf00      	nop
 8002408:	20009ce0 	.word	0x20009ce0
	} else if (lcddev.id == 0x5310) {
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <LCD_Init+0x5fc>)
 800240e:	889b      	ldrh	r3, [r3, #4]
 8002410:	f245 3210 	movw	r2, #21264	; 0x5310
 8002414:	4293      	cmp	r3, r2
 8002416:	f040 877c 	bne.w	8003312 <LCD_Init+0x14f2>
 800241a:	e001      	b.n	8002420 <LCD_Init+0x600>
 800241c:	20009ce0 	.word	0x20009ce0
		LCD_WR_REG(0xED);
 8002420:	20ed      	movs	r0, #237	; 0xed
 8002422:	f7fe fa07 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002426:	2001      	movs	r0, #1
 8002428:	f7fe fa28 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 800242c:	20fe      	movs	r0, #254	; 0xfe
 800242e:	f7fe fa25 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8002432:	20ee      	movs	r0, #238	; 0xee
 8002434:	f7fe f9fe 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002438:	20de      	movs	r0, #222	; 0xde
 800243a:	f7fe fa1f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800243e:	2021      	movs	r0, #33	; 0x21
 8002440:	f7fe fa1c 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8002444:	20f1      	movs	r0, #241	; 0xf1
 8002446:	f7fe f9f5 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800244a:	2001      	movs	r0, #1
 800244c:	f7fe fa16 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002450:	20df      	movs	r0, #223	; 0xdf
 8002452:	f7fe f9ef 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8002456:	2010      	movs	r0, #16
 8002458:	f7fe fa10 	bl	800087c <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 800245c:	20c4      	movs	r0, #196	; 0xc4
 800245e:	f7fe f9e9 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8002462:	208f      	movs	r0, #143	; 0x8f
 8002464:	f7fe fa0a 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002468:	20c6      	movs	r0, #198	; 0xc6
 800246a:	f7fe f9e3 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800246e:	2000      	movs	r0, #0
 8002470:	f7fe fa04 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002474:	20e2      	movs	r0, #226	; 0xe2
 8002476:	f7fe fa01 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800247a:	20e2      	movs	r0, #226	; 0xe2
 800247c:	f7fe f9fe 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002480:	20e2      	movs	r0, #226	; 0xe2
 8002482:	f7fe f9fb 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8002486:	20bf      	movs	r0, #191	; 0xbf
 8002488:	f7fe f9d4 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800248c:	20aa      	movs	r0, #170	; 0xaa
 800248e:	f7fe f9f5 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8002492:	20b0      	movs	r0, #176	; 0xb0
 8002494:	f7fe f9ce 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002498:	200d      	movs	r0, #13
 800249a:	f7fe f9ef 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7fe f9ec 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80024a4:	200d      	movs	r0, #13
 80024a6:	f7fe f9e9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7fe f9e6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80024b0:	2011      	movs	r0, #17
 80024b2:	f7fe f9e3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f7fe f9e0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 80024bc:	2019      	movs	r0, #25
 80024be:	f7fe f9dd 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe f9da 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80024c8:	2021      	movs	r0, #33	; 0x21
 80024ca:	f7fe f9d7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7fe f9d4 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 80024d4:	202d      	movs	r0, #45	; 0x2d
 80024d6:	f7fe f9d1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe f9ce 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 80024e0:	203d      	movs	r0, #61	; 0x3d
 80024e2:	f7fe f9cb 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f7fe f9c8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80024ec:	205d      	movs	r0, #93	; 0x5d
 80024ee:	f7fe f9c5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7fe f9c2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80024f8:	205d      	movs	r0, #93	; 0x5d
 80024fa:	f7fe f9bf 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7fe f9bc 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8002504:	20b1      	movs	r0, #177	; 0xb1
 8002506:	f7fe f995 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 800250a:	2080      	movs	r0, #128	; 0x80
 800250c:	f7fe f9b6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002510:	2000      	movs	r0, #0
 8002512:	f7fe f9b3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002516:	208b      	movs	r0, #139	; 0x8b
 8002518:	f7fe f9b0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800251c:	2000      	movs	r0, #0
 800251e:	f7fe f9ad 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002522:	2096      	movs	r0, #150	; 0x96
 8002524:	f7fe f9aa 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002528:	2000      	movs	r0, #0
 800252a:	f7fe f9a7 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 800252e:	20b2      	movs	r0, #178	; 0xb2
 8002530:	f7fe f980 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002534:	2000      	movs	r0, #0
 8002536:	f7fe f9a1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800253a:	2000      	movs	r0, #0
 800253c:	f7fe f99e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002540:	2002      	movs	r0, #2
 8002542:	f7fe f99b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe f998 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800254c:	2003      	movs	r0, #3
 800254e:	f7fe f995 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002552:	2000      	movs	r0, #0
 8002554:	f7fe f992 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002558:	20b3      	movs	r0, #179	; 0xb3
 800255a:	f7fe f96b 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800255e:	2000      	movs	r0, #0
 8002560:	f7fe f98c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002564:	2000      	movs	r0, #0
 8002566:	f7fe f989 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800256a:	2000      	movs	r0, #0
 800256c:	f7fe f986 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002570:	2000      	movs	r0, #0
 8002572:	f7fe f983 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002576:	2000      	movs	r0, #0
 8002578:	f7fe f980 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800257c:	2000      	movs	r0, #0
 800257e:	f7fe f97d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe f97a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002588:	2000      	movs	r0, #0
 800258a:	f7fe f977 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe f974 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002594:	2000      	movs	r0, #0
 8002596:	f7fe f971 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe f96e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7fe f96b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe f968 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7fe f965 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7fe f962 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7fe f95f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025be:	2000      	movs	r0, #0
 80025c0:	f7fe f95c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7fe f959 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe f956 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7fe f953 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe f950 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025dc:	2000      	movs	r0, #0
 80025de:	f7fe f94d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe f94a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7fe f947 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 80025ee:	20b4      	movs	r0, #180	; 0xb4
 80025f0:	f7fe f920 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 80025f4:	208b      	movs	r0, #139	; 0x8b
 80025f6:	f7fe f941 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe f93e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002600:	2096      	movs	r0, #150	; 0x96
 8002602:	f7fe f93b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe f938 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 800260c:	20a1      	movs	r0, #161	; 0xa1
 800260e:	f7fe f935 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe f932 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002618:	20b5      	movs	r0, #181	; 0xb5
 800261a:	f7fe f90b 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 800261e:	2002      	movs	r0, #2
 8002620:	f7fe f92c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f7fe f929 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800262a:	2003      	movs	r0, #3
 800262c:	f7fe f926 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002630:	2000      	movs	r0, #0
 8002632:	f7fe f923 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002636:	2004      	movs	r0, #4
 8002638:	f7fe f920 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe f91d 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8002642:	20b6      	movs	r0, #182	; 0xb6
 8002644:	f7fe f8f6 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe f917 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264e:	2000      	movs	r0, #0
 8002650:	f7fe f914 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8002654:	20b7      	movs	r0, #183	; 0xb7
 8002656:	f7fe f8ed 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800265a:	2000      	movs	r0, #0
 800265c:	f7fe f90e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe f90b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002666:	203f      	movs	r0, #63	; 0x3f
 8002668:	f7fe f908 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe f905 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8002672:	205e      	movs	r0, #94	; 0x5e
 8002674:	f7fe f902 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe f8ff 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800267e:	2064      	movs	r0, #100	; 0x64
 8002680:	f7fe f8fc 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002684:	2000      	movs	r0, #0
 8002686:	f7fe f8f9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 800268a:	208c      	movs	r0, #140	; 0x8c
 800268c:	f7fe f8f6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe f8f3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8002696:	20ac      	movs	r0, #172	; 0xac
 8002698:	f7fe f8f0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800269c:	2000      	movs	r0, #0
 800269e:	f7fe f8ed 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80026a2:	20dc      	movs	r0, #220	; 0xdc
 80026a4:	f7fe f8ea 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7fe f8e7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 80026ae:	2070      	movs	r0, #112	; 0x70
 80026b0:	f7fe f8e4 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe f8e1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 80026ba:	2090      	movs	r0, #144	; 0x90
 80026bc:	f7fe f8de 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe f8db 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 80026c6:	20eb      	movs	r0, #235	; 0xeb
 80026c8:	f7fe f8d8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe f8d5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80026d2:	20dc      	movs	r0, #220	; 0xdc
 80026d4:	f7fe f8d2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7fe f8cf 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 80026de:	20b8      	movs	r0, #184	; 0xb8
 80026e0:	f7fe f8a8 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7fe f8c9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7fe f8c6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7fe f8c3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7fe f8c0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7fe f8bd 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe f8ba 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002708:	2000      	movs	r0, #0
 800270a:	f7fe f8b7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270e:	2000      	movs	r0, #0
 8002710:	f7fe f8b4 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002714:	20ba      	movs	r0, #186	; 0xba
 8002716:	f7fe f88d 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 800271a:	2024      	movs	r0, #36	; 0x24
 800271c:	f7fe f8ae 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe f8ab 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002726:	2000      	movs	r0, #0
 8002728:	f7fe f8a8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe f8a5 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002732:	20c1      	movs	r0, #193	; 0xc1
 8002734:	f7fe f87e 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002738:	2020      	movs	r0, #32
 800273a:	f7fe f89f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800273e:	2000      	movs	r0, #0
 8002740:	f7fe f89c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002744:	2054      	movs	r0, #84	; 0x54
 8002746:	f7fe f899 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe f896 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002750:	20ff      	movs	r0, #255	; 0xff
 8002752:	f7fe f893 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002756:	2000      	movs	r0, #0
 8002758:	f7fe f890 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 800275c:	20c2      	movs	r0, #194	; 0xc2
 800275e:	f7fe f869 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002762:	200a      	movs	r0, #10
 8002764:	f7fe f88a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe f887 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800276e:	2004      	movs	r0, #4
 8002770:	f7fe f884 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe f881 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 800277a:	20c3      	movs	r0, #195	; 0xc3
 800277c:	f7fe f85a 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002780:	203c      	movs	r0, #60	; 0x3c
 8002782:	f7fe f87b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe f878 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 800278c:	203a      	movs	r0, #58	; 0x3a
 800278e:	f7fe f875 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe f872 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002798:	2039      	movs	r0, #57	; 0x39
 800279a:	f7fe f86f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800279e:	2000      	movs	r0, #0
 80027a0:	f7fe f86c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 80027a4:	2037      	movs	r0, #55	; 0x37
 80027a6:	f7fe f869 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7fe f866 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80027b0:	203c      	movs	r0, #60	; 0x3c
 80027b2:	f7fe f863 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe f860 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80027bc:	2036      	movs	r0, #54	; 0x36
 80027be:	f7fe f85d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7fe f85a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80027c8:	2032      	movs	r0, #50	; 0x32
 80027ca:	f7fe f857 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe f854 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80027d4:	202f      	movs	r0, #47	; 0x2f
 80027d6:	f7fe f851 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027da:	2000      	movs	r0, #0
 80027dc:	f7fe f84e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80027e0:	202c      	movs	r0, #44	; 0x2c
 80027e2:	f7fe f84b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7fe f848 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80027ec:	2029      	movs	r0, #41	; 0x29
 80027ee:	f7fe f845 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7fe f842 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80027f8:	2026      	movs	r0, #38	; 0x26
 80027fa:	f7fe f83f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe f83c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002804:	2024      	movs	r0, #36	; 0x24
 8002806:	f7fe f839 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280a:	2000      	movs	r0, #0
 800280c:	f7fe f836 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002810:	2024      	movs	r0, #36	; 0x24
 8002812:	f7fe f833 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002816:	2000      	movs	r0, #0
 8002818:	f7fe f830 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800281c:	2023      	movs	r0, #35	; 0x23
 800281e:	f7fe f82d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002822:	2000      	movs	r0, #0
 8002824:	f7fe f82a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002828:	203c      	movs	r0, #60	; 0x3c
 800282a:	f7fe f827 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800282e:	2000      	movs	r0, #0
 8002830:	f7fe f824 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002834:	2036      	movs	r0, #54	; 0x36
 8002836:	f7fe f821 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283a:	2000      	movs	r0, #0
 800283c:	f7fe f81e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002840:	2032      	movs	r0, #50	; 0x32
 8002842:	f7fe f81b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe f818 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800284c:	202f      	movs	r0, #47	; 0x2f
 800284e:	f7fe f815 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002852:	2000      	movs	r0, #0
 8002854:	f7fe f812 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002858:	202c      	movs	r0, #44	; 0x2c
 800285a:	f7fe f80f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285e:	2000      	movs	r0, #0
 8002860:	f7fe f80c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002864:	2029      	movs	r0, #41	; 0x29
 8002866:	f7fe f809 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286a:	2000      	movs	r0, #0
 800286c:	f7fe f806 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002870:	2026      	movs	r0, #38	; 0x26
 8002872:	f7fe f803 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe f800 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800287c:	2024      	movs	r0, #36	; 0x24
 800287e:	f7fd fffd 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002882:	2000      	movs	r0, #0
 8002884:	f7fd fffa 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002888:	2024      	movs	r0, #36	; 0x24
 800288a:	f7fd fff7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fd fff4 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002894:	2023      	movs	r0, #35	; 0x23
 8002896:	f7fd fff1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289a:	2000      	movs	r0, #0
 800289c:	f7fd ffee 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 80028a0:	20c4      	movs	r0, #196	; 0xc4
 80028a2:	f7fd ffc7 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 80028a6:	2062      	movs	r0, #98	; 0x62
 80028a8:	f7fd ffe8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7fd ffe5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80028b2:	2005      	movs	r0, #5
 80028b4:	f7fd ffe2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f7fd ffdf 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80028be:	2084      	movs	r0, #132	; 0x84
 80028c0:	f7fd ffdc 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7fd ffd9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 80028ca:	20f0      	movs	r0, #240	; 0xf0
 80028cc:	f7fd ffd6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d0:	2000      	movs	r0, #0
 80028d2:	f7fd ffd3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80028d6:	2018      	movs	r0, #24
 80028d8:	f7fd ffd0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028dc:	2000      	movs	r0, #0
 80028de:	f7fd ffcd 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 80028e2:	20a4      	movs	r0, #164	; 0xa4
 80028e4:	f7fd ffca 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7fd ffc7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80028ee:	2018      	movs	r0, #24
 80028f0:	f7fd ffc4 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f4:	2000      	movs	r0, #0
 80028f6:	f7fd ffc1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80028fa:	2050      	movs	r0, #80	; 0x50
 80028fc:	f7fd ffbe 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002900:	2000      	movs	r0, #0
 8002902:	f7fd ffbb 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002906:	200c      	movs	r0, #12
 8002908:	f7fd ffb8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290c:	2000      	movs	r0, #0
 800290e:	f7fd ffb5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002912:	2017      	movs	r0, #23
 8002914:	f7fd ffb2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002918:	2000      	movs	r0, #0
 800291a:	f7fd ffaf 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 800291e:	2095      	movs	r0, #149	; 0x95
 8002920:	f7fd ffac 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002924:	2000      	movs	r0, #0
 8002926:	f7fd ffa9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800292a:	20f3      	movs	r0, #243	; 0xf3
 800292c:	f7fd ffa6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002930:	2000      	movs	r0, #0
 8002932:	f7fd ffa3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002936:	20e6      	movs	r0, #230	; 0xe6
 8002938:	f7fd ffa0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293c:	2000      	movs	r0, #0
 800293e:	f7fd ff9d 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002942:	20c5      	movs	r0, #197	; 0xc5
 8002944:	f7fd ff76 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002948:	2032      	movs	r0, #50	; 0x32
 800294a:	f7fd ff97 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294e:	2000      	movs	r0, #0
 8002950:	f7fd ff94 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002954:	2044      	movs	r0, #68	; 0x44
 8002956:	f7fd ff91 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800295a:	2000      	movs	r0, #0
 800295c:	f7fd ff8e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002960:	2065      	movs	r0, #101	; 0x65
 8002962:	f7fd ff8b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002966:	2000      	movs	r0, #0
 8002968:	f7fd ff88 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800296c:	2076      	movs	r0, #118	; 0x76
 800296e:	f7fd ff85 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002972:	2000      	movs	r0, #0
 8002974:	f7fd ff82 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002978:	2088      	movs	r0, #136	; 0x88
 800297a:	f7fd ff7f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800297e:	2000      	movs	r0, #0
 8002980:	f7fd ff7c 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002984:	20c6      	movs	r0, #198	; 0xc6
 8002986:	f7fd ff55 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 800298a:	2020      	movs	r0, #32
 800298c:	f7fd ff76 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002990:	2000      	movs	r0, #0
 8002992:	f7fd ff73 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002996:	2017      	movs	r0, #23
 8002998:	f7fd ff70 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fd ff6d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7fd ff6a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7fd ff67 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 80029ae:	20c7      	movs	r0, #199	; 0xc7
 80029b0:	f7fd ff40 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fd ff61 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7fd ff5e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7fd ff5b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7fd ff58 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 80029cc:	20c8      	movs	r0, #200	; 0xc8
 80029ce:	f7fd ff31 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029d2:	2000      	movs	r0, #0
 80029d4:	f7fd ff52 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fd ff4f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029de:	2000      	movs	r0, #0
 80029e0:	f7fd ff4c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fd ff49 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 80029ea:	20c9      	movs	r0, #201	; 0xc9
 80029ec:	f7fd ff22 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fd ff43 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7fd ff40 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7fd ff3d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fd ff3a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fd ff37 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fd ff34 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fd ff31 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f7fd ff2e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7fd ff2b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7fd ff28 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fd ff25 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7fd ff22 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fd ff1f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7fd ff1c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fd ff19 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f7fd ff16 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002a50:	20e0      	movs	r0, #224	; 0xe0
 8002a52:	f7fd feef 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002a56:	2016      	movs	r0, #22
 8002a58:	f7fd ff10 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fd ff0d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002a62:	201c      	movs	r0, #28
 8002a64:	f7fd ff0a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fd ff07 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002a6e:	2021      	movs	r0, #33	; 0x21
 8002a70:	f7fd ff04 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7fd ff01 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002a7a:	2036      	movs	r0, #54	; 0x36
 8002a7c:	f7fd fefe 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7fd fefb 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002a86:	2046      	movs	r0, #70	; 0x46
 8002a88:	f7fd fef8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7fd fef5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002a92:	2052      	movs	r0, #82	; 0x52
 8002a94:	f7fd fef2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7fd feef 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002a9e:	2064      	movs	r0, #100	; 0x64
 8002aa0:	f7fd feec 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7fd fee9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002aaa:	207a      	movs	r0, #122	; 0x7a
 8002aac:	f7fd fee6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7fd fee3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002ab6:	208b      	movs	r0, #139	; 0x8b
 8002ab8:	f7fd fee0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002abc:	2000      	movs	r0, #0
 8002abe:	f7fd fedd 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002ac2:	2099      	movs	r0, #153	; 0x99
 8002ac4:	f7fd feda 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fd fed7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002ace:	20a8      	movs	r0, #168	; 0xa8
 8002ad0:	f7fd fed4 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fd fed1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002ada:	20b9      	movs	r0, #185	; 0xb9
 8002adc:	f7fd fece 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f7fd fecb 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002ae6:	20c4      	movs	r0, #196	; 0xc4
 8002ae8:	f7fd fec8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7fd fec5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002af2:	20ca      	movs	r0, #202	; 0xca
 8002af4:	f7fd fec2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7fd febf 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002afe:	20d2      	movs	r0, #210	; 0xd2
 8002b00:	f7fd febc 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fd feb9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002b0a:	20d9      	movs	r0, #217	; 0xd9
 8002b0c:	f7fd feb6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fd feb3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002b16:	20e0      	movs	r0, #224	; 0xe0
 8002b18:	f7fd feb0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fd fead 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002b22:	20f3      	movs	r0, #243	; 0xf3
 8002b24:	f7fd feaa 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7fd fea7 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002b2e:	20e1      	movs	r0, #225	; 0xe1
 8002b30:	f7fd fe80 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002b34:	2016      	movs	r0, #22
 8002b36:	f7fd fea1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7fd fe9e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002b40:	201c      	movs	r0, #28
 8002b42:	f7fd fe9b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7fd fe98 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002b4c:	2022      	movs	r0, #34	; 0x22
 8002b4e:	f7fd fe95 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b52:	2000      	movs	r0, #0
 8002b54:	f7fd fe92 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b58:	2036      	movs	r0, #54	; 0x36
 8002b5a:	f7fd fe8f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7fd fe8c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002b64:	2045      	movs	r0, #69	; 0x45
 8002b66:	f7fd fe89 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f7fd fe86 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002b70:	2052      	movs	r0, #82	; 0x52
 8002b72:	f7fd fe83 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7fd fe80 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002b7c:	2064      	movs	r0, #100	; 0x64
 8002b7e:	f7fd fe7d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7fd fe7a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002b88:	207a      	movs	r0, #122	; 0x7a
 8002b8a:	f7fd fe77 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7fd fe74 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002b94:	208b      	movs	r0, #139	; 0x8b
 8002b96:	f7fd fe71 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7fd fe6e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002ba0:	2099      	movs	r0, #153	; 0x99
 8002ba2:	f7fd fe6b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f7fd fe68 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002bac:	20a8      	movs	r0, #168	; 0xa8
 8002bae:	f7fd fe65 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7fd fe62 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002bb8:	20b9      	movs	r0, #185	; 0xb9
 8002bba:	f7fd fe5f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f7fd fe5c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002bc4:	20c4      	movs	r0, #196	; 0xc4
 8002bc6:	f7fd fe59 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7fd fe56 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002bd0:	20ca      	movs	r0, #202	; 0xca
 8002bd2:	f7fd fe53 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f7fd fe50 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002bdc:	20d2      	movs	r0, #210	; 0xd2
 8002bde:	f7fd fe4d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7fd fe4a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002be8:	20d8      	movs	r0, #216	; 0xd8
 8002bea:	f7fd fe47 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7fd fe44 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002bf4:	20e0      	movs	r0, #224	; 0xe0
 8002bf6:	f7fd fe41 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fd fe3e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c00:	20f3      	movs	r0, #243	; 0xf3
 8002c02:	f7fd fe3b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f7fd fe38 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002c0c:	20e2      	movs	r0, #226	; 0xe2
 8002c0e:	f7fd fe11 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002c12:	2005      	movs	r0, #5
 8002c14:	f7fd fe32 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7fd fe2f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002c1e:	200b      	movs	r0, #11
 8002c20:	f7fd fe2c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fd fe29 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002c2a:	201b      	movs	r0, #27
 8002c2c:	f7fd fe26 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7fd fe23 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002c36:	2034      	movs	r0, #52	; 0x34
 8002c38:	f7fd fe20 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7fd fe1d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002c42:	2044      	movs	r0, #68	; 0x44
 8002c44:	f7fd fe1a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7fd fe17 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002c4e:	204f      	movs	r0, #79	; 0x4f
 8002c50:	f7fd fe14 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7fd fe11 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002c5a:	2061      	movs	r0, #97	; 0x61
 8002c5c:	f7fd fe0e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7fd fe0b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002c66:	2079      	movs	r0, #121	; 0x79
 8002c68:	f7fd fe08 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7fd fe05 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002c72:	2088      	movs	r0, #136	; 0x88
 8002c74:	f7fd fe02 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7fd fdff 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002c7e:	2097      	movs	r0, #151	; 0x97
 8002c80:	f7fd fdfc 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fd fdf9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002c8a:	20a6      	movs	r0, #166	; 0xa6
 8002c8c:	f7fd fdf6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c90:	2000      	movs	r0, #0
 8002c92:	f7fd fdf3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002c96:	20b7      	movs	r0, #183	; 0xb7
 8002c98:	f7fd fdf0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7fd fded 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002ca2:	20c2      	movs	r0, #194	; 0xc2
 8002ca4:	f7fd fdea 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7fd fde7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002cae:	20c7      	movs	r0, #199	; 0xc7
 8002cb0:	f7fd fde4 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f7fd fde1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002cba:	20d1      	movs	r0, #209	; 0xd1
 8002cbc:	f7fd fdde 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fd fddb 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002cc6:	20d6      	movs	r0, #214	; 0xd6
 8002cc8:	f7fd fdd8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7fd fdd5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002cd2:	20dd      	movs	r0, #221	; 0xdd
 8002cd4:	f7fd fdd2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fd fdcf 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002cde:	20f3      	movs	r0, #243	; 0xf3
 8002ce0:	f7fd fdcc 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fd fdc9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002cea:	20e3      	movs	r0, #227	; 0xe3
 8002cec:	f7fd fda2 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002cf0:	2005      	movs	r0, #5
 8002cf2:	f7fd fdc3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f7fd fdc0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002cfc:	200a      	movs	r0, #10
 8002cfe:	f7fd fdbd 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7fd fdba 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002d08:	201c      	movs	r0, #28
 8002d0a:	f7fd fdb7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f7fd fdb4 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002d14:	2033      	movs	r0, #51	; 0x33
 8002d16:	f7fd fdb1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f7fd fdae 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002d20:	2044      	movs	r0, #68	; 0x44
 8002d22:	f7fd fdab 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f7fd fda8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002d2c:	2050      	movs	r0, #80	; 0x50
 8002d2e:	f7fd fda5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d32:	2000      	movs	r0, #0
 8002d34:	f7fd fda2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002d38:	2062      	movs	r0, #98	; 0x62
 8002d3a:	f7fd fd9f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7fd fd9c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002d44:	2078      	movs	r0, #120	; 0x78
 8002d46:	f7fd fd99 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7fd fd96 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002d50:	2088      	movs	r0, #136	; 0x88
 8002d52:	f7fd fd93 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d56:	2000      	movs	r0, #0
 8002d58:	f7fd fd90 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002d5c:	2097      	movs	r0, #151	; 0x97
 8002d5e:	f7fd fd8d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7fd fd8a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002d68:	20a6      	movs	r0, #166	; 0xa6
 8002d6a:	f7fd fd87 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7fd fd84 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002d74:	20b7      	movs	r0, #183	; 0xb7
 8002d76:	f7fd fd81 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7fd fd7e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002d80:	20c2      	movs	r0, #194	; 0xc2
 8002d82:	f7fd fd7b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7fd fd78 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002d8c:	20c7      	movs	r0, #199	; 0xc7
 8002d8e:	f7fd fd75 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fd fd72 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002d98:	20d1      	movs	r0, #209	; 0xd1
 8002d9a:	f7fd fd6f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f7fd fd6c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002da4:	20d5      	movs	r0, #213	; 0xd5
 8002da6:	f7fd fd69 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fd fd66 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002db0:	20dd      	movs	r0, #221	; 0xdd
 8002db2:	f7fd fd63 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7fd fd60 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002dbc:	20f3      	movs	r0, #243	; 0xf3
 8002dbe:	f7fd fd5d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7fd fd5a 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002dc8:	20e4      	movs	r0, #228	; 0xe4
 8002dca:	f7fd fd33 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f7fd fd54 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f7fd fd51 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f7fd fd4e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7fd fd4b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002de6:	2002      	movs	r0, #2
 8002de8:	f7fd fd48 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dec:	2000      	movs	r0, #0
 8002dee:	f7fd fd45 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002df2:	202a      	movs	r0, #42	; 0x2a
 8002df4:	f7fd fd42 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f7fd fd3f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002dfe:	203c      	movs	r0, #60	; 0x3c
 8002e00:	f7fd fd3c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7fd fd39 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002e0a:	204b      	movs	r0, #75	; 0x4b
 8002e0c:	f7fd fd36 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7fd fd33 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002e16:	205d      	movs	r0, #93	; 0x5d
 8002e18:	f7fd fd30 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7fd fd2d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002e22:	2074      	movs	r0, #116	; 0x74
 8002e24:	f7fd fd2a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7fd fd27 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002e2e:	2084      	movs	r0, #132	; 0x84
 8002e30:	f7fd fd24 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e34:	2000      	movs	r0, #0
 8002e36:	f7fd fd21 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002e3a:	2093      	movs	r0, #147	; 0x93
 8002e3c:	f7fd fd1e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e40:	2000      	movs	r0, #0
 8002e42:	f7fd fd1b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002e46:	20a2      	movs	r0, #162	; 0xa2
 8002e48:	f7fd fd18 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7fd fd15 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002e52:	20b3      	movs	r0, #179	; 0xb3
 8002e54:	f7fd fd12 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7fd fd0f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002e5e:	20be      	movs	r0, #190	; 0xbe
 8002e60:	f7fd fd0c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e64:	2000      	movs	r0, #0
 8002e66:	f7fd fd09 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002e6a:	20c4      	movs	r0, #196	; 0xc4
 8002e6c:	f7fd fd06 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fd fd03 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002e76:	20cd      	movs	r0, #205	; 0xcd
 8002e78:	f7fd fd00 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7fd fcfd 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002e82:	20d3      	movs	r0, #211	; 0xd3
 8002e84:	f7fd fcfa 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7fd fcf7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002e8e:	20dd      	movs	r0, #221	; 0xdd
 8002e90:	f7fd fcf4 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7fd fcf1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e9a:	20f3      	movs	r0, #243	; 0xf3
 8002e9c:	f7fd fcee 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7fd fceb 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002ea6:	20e5      	movs	r0, #229	; 0xe5
 8002ea8:	f7fd fcc4 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fd fce5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f7fd fce2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fd fcdf 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7fd fcdc 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002ec4:	2002      	movs	r0, #2
 8002ec6:	f7fd fcd9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f7fd fcd6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002ed0:	2029      	movs	r0, #41	; 0x29
 8002ed2:	f7fd fcd3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7fd fcd0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002edc:	203c      	movs	r0, #60	; 0x3c
 8002ede:	f7fd fccd 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7fd fcca 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002ee8:	204b      	movs	r0, #75	; 0x4b
 8002eea:	f7fd fcc7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f7fd fcc4 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002ef4:	205d      	movs	r0, #93	; 0x5d
 8002ef6:	f7fd fcc1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efa:	2000      	movs	r0, #0
 8002efc:	f7fd fcbe 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002f00:	2074      	movs	r0, #116	; 0x74
 8002f02:	f7fd fcbb 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f06:	2000      	movs	r0, #0
 8002f08:	f7fd fcb8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002f0c:	2084      	movs	r0, #132	; 0x84
 8002f0e:	f7fd fcb5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f12:	2000      	movs	r0, #0
 8002f14:	f7fd fcb2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002f18:	2093      	movs	r0, #147	; 0x93
 8002f1a:	f7fd fcaf 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7fd fcac 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002f24:	20a2      	movs	r0, #162	; 0xa2
 8002f26:	f7fd fca9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f7fd fca6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002f30:	20b3      	movs	r0, #179	; 0xb3
 8002f32:	f7fd fca3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f36:	2000      	movs	r0, #0
 8002f38:	f7fd fca0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002f3c:	20be      	movs	r0, #190	; 0xbe
 8002f3e:	f7fd fc9d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7fd fc9a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002f48:	20c4      	movs	r0, #196	; 0xc4
 8002f4a:	f7fd fc97 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f7fd fc94 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002f54:	20cd      	movs	r0, #205	; 0xcd
 8002f56:	f7fd fc91 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f7fd fc8e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002f60:	20d3      	movs	r0, #211	; 0xd3
 8002f62:	f7fd fc8b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f66:	2000      	movs	r0, #0
 8002f68:	f7fd fc88 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002f6c:	20dc      	movs	r0, #220	; 0xdc
 8002f6e:	f7fd fc85 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7fd fc82 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f78:	20f3      	movs	r0, #243	; 0xf3
 8002f7a:	f7fd fc7f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7fd fc7c 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8002f84:	20e6      	movs	r0, #230	; 0xe6
 8002f86:	f7fd fc55 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8002f8a:	2011      	movs	r0, #17
 8002f8c:	f7fd fc76 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7fd fc73 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002f96:	2034      	movs	r0, #52	; 0x34
 8002f98:	f7fd fc70 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7fd fc6d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002fa2:	2056      	movs	r0, #86	; 0x56
 8002fa4:	f7fd fc6a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f7fd fc67 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002fae:	2076      	movs	r0, #118	; 0x76
 8002fb0:	f7fd fc64 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7fd fc61 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002fba:	2077      	movs	r0, #119	; 0x77
 8002fbc:	f7fd fc5e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7fd fc5b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002fc6:	2066      	movs	r0, #102	; 0x66
 8002fc8:	f7fd fc58 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f7fd fc55 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002fd2:	2088      	movs	r0, #136	; 0x88
 8002fd4:	f7fd fc52 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7fd fc4f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002fde:	2099      	movs	r0, #153	; 0x99
 8002fe0:	f7fd fc4c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7fd fc49 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002fea:	20bb      	movs	r0, #187	; 0xbb
 8002fec:	f7fd fc46 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7fd fc43 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002ff6:	2099      	movs	r0, #153	; 0x99
 8002ff8:	f7fd fc40 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f7fd fc3d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003002:	2066      	movs	r0, #102	; 0x66
 8003004:	f7fd fc3a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003008:	2000      	movs	r0, #0
 800300a:	f7fd fc37 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800300e:	2055      	movs	r0, #85	; 0x55
 8003010:	f7fd fc34 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003014:	2000      	movs	r0, #0
 8003016:	f7fd fc31 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800301a:	2055      	movs	r0, #85	; 0x55
 800301c:	f7fd fc2e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003020:	2000      	movs	r0, #0
 8003022:	f7fd fc2b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003026:	2045      	movs	r0, #69	; 0x45
 8003028:	f7fd fc28 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800302c:	2000      	movs	r0, #0
 800302e:	f7fd fc25 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8003032:	2043      	movs	r0, #67	; 0x43
 8003034:	f7fd fc22 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003038:	2000      	movs	r0, #0
 800303a:	f7fd fc1f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800303e:	2044      	movs	r0, #68	; 0x44
 8003040:	f7fd fc1c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003044:	2000      	movs	r0, #0
 8003046:	f7fd fc19 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 800304a:	20e7      	movs	r0, #231	; 0xe7
 800304c:	f7fd fbf2 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003050:	2032      	movs	r0, #50	; 0x32
 8003052:	f7fd fc13 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003056:	2000      	movs	r0, #0
 8003058:	f7fd fc10 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800305c:	2055      	movs	r0, #85	; 0x55
 800305e:	f7fd fc0d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003062:	2000      	movs	r0, #0
 8003064:	f7fd fc0a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003068:	2076      	movs	r0, #118	; 0x76
 800306a:	f7fd fc07 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800306e:	2000      	movs	r0, #0
 8003070:	f7fd fc04 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003074:	2066      	movs	r0, #102	; 0x66
 8003076:	f7fd fc01 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800307a:	2000      	movs	r0, #0
 800307c:	f7fd fbfe 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003080:	2067      	movs	r0, #103	; 0x67
 8003082:	f7fd fbfb 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003086:	2000      	movs	r0, #0
 8003088:	f7fd fbf8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 800308c:	2067      	movs	r0, #103	; 0x67
 800308e:	f7fd fbf5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003092:	2000      	movs	r0, #0
 8003094:	f7fd fbf2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003098:	2087      	movs	r0, #135	; 0x87
 800309a:	f7fd fbef 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800309e:	2000      	movs	r0, #0
 80030a0:	f7fd fbec 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80030a4:	2099      	movs	r0, #153	; 0x99
 80030a6:	f7fd fbe9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030aa:	2000      	movs	r0, #0
 80030ac:	f7fd fbe6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80030b0:	20bb      	movs	r0, #187	; 0xbb
 80030b2:	f7fd fbe3 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f7fd fbe0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80030bc:	2099      	movs	r0, #153	; 0x99
 80030be:	f7fd fbdd 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c2:	2000      	movs	r0, #0
 80030c4:	f7fd fbda 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80030c8:	2077      	movs	r0, #119	; 0x77
 80030ca:	f7fd fbd7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ce:	2000      	movs	r0, #0
 80030d0:	f7fd fbd4 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80030d4:	2044      	movs	r0, #68	; 0x44
 80030d6:	f7fd fbd1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030da:	2000      	movs	r0, #0
 80030dc:	f7fd fbce 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80030e0:	2056      	movs	r0, #86	; 0x56
 80030e2:	f7fd fbcb 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e6:	2000      	movs	r0, #0
 80030e8:	f7fd fbc8 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80030ec:	2023      	movs	r0, #35	; 0x23
 80030ee:	f7fd fbc5 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f2:	2000      	movs	r0, #0
 80030f4:	f7fd fbc2 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80030f8:	2033      	movs	r0, #51	; 0x33
 80030fa:	f7fd fbbf 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030fe:	2000      	movs	r0, #0
 8003100:	f7fd fbbc 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003104:	2045      	movs	r0, #69	; 0x45
 8003106:	f7fd fbb9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310a:	2000      	movs	r0, #0
 800310c:	f7fd fbb6 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003110:	20e8      	movs	r0, #232	; 0xe8
 8003112:	f7fd fb8f 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003116:	2000      	movs	r0, #0
 8003118:	f7fd fbb0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800311c:	2000      	movs	r0, #0
 800311e:	f7fd fbad 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003122:	2099      	movs	r0, #153	; 0x99
 8003124:	f7fd fbaa 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003128:	2000      	movs	r0, #0
 800312a:	f7fd fba7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 800312e:	2087      	movs	r0, #135	; 0x87
 8003130:	f7fd fba4 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003134:	2000      	movs	r0, #0
 8003136:	f7fd fba1 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800313a:	2088      	movs	r0, #136	; 0x88
 800313c:	f7fd fb9e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003140:	2000      	movs	r0, #0
 8003142:	f7fd fb9b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003146:	2077      	movs	r0, #119	; 0x77
 8003148:	f7fd fb98 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800314c:	2000      	movs	r0, #0
 800314e:	f7fd fb95 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003152:	2066      	movs	r0, #102	; 0x66
 8003154:	f7fd fb92 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003158:	2000      	movs	r0, #0
 800315a:	f7fd fb8f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800315e:	2088      	movs	r0, #136	; 0x88
 8003160:	f7fd fb8c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003164:	2000      	movs	r0, #0
 8003166:	f7fd fb89 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 800316a:	20aa      	movs	r0, #170	; 0xaa
 800316c:	f7fd fb86 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003170:	2000      	movs	r0, #0
 8003172:	f7fd fb83 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003176:	20bb      	movs	r0, #187	; 0xbb
 8003178:	f7fd fb80 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800317c:	2000      	movs	r0, #0
 800317e:	f7fd fb7d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003182:	2099      	movs	r0, #153	; 0x99
 8003184:	f7fd fb7a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003188:	2000      	movs	r0, #0
 800318a:	f7fd fb77 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800318e:	2066      	movs	r0, #102	; 0x66
 8003190:	f7fd fb74 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003194:	2000      	movs	r0, #0
 8003196:	f7fd fb71 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800319a:	2055      	movs	r0, #85	; 0x55
 800319c:	f7fd fb6e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a0:	2000      	movs	r0, #0
 80031a2:	f7fd fb6b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80031a6:	2055      	movs	r0, #85	; 0x55
 80031a8:	f7fd fb68 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ac:	2000      	movs	r0, #0
 80031ae:	f7fd fb65 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80031b2:	2044      	movs	r0, #68	; 0x44
 80031b4:	f7fd fb62 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b8:	2000      	movs	r0, #0
 80031ba:	f7fd fb5f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80031be:	2044      	movs	r0, #68	; 0x44
 80031c0:	f7fd fb5c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7fd fb59 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80031ca:	2055      	movs	r0, #85	; 0x55
 80031cc:	f7fd fb56 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7fd fb53 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 80031d6:	20e9      	movs	r0, #233	; 0xe9
 80031d8:	f7fd fb2c 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80031dc:	20aa      	movs	r0, #170	; 0xaa
 80031de:	f7fd fb4d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e2:	2000      	movs	r0, #0
 80031e4:	f7fd fb4a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e8:	2000      	movs	r0, #0
 80031ea:	f7fd fb47 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ee:	2000      	movs	r0, #0
 80031f0:	f7fd fb44 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 80031f4:	2000      	movs	r0, #0
 80031f6:	f7fd fb1d 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80031fa:	20aa      	movs	r0, #170	; 0xaa
 80031fc:	f7fd fb3e 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003200:	20cf      	movs	r0, #207	; 0xcf
 8003202:	f7fd fb17 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003206:	2000      	movs	r0, #0
 8003208:	f7fd fb38 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320c:	2000      	movs	r0, #0
 800320e:	f7fd fb35 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003212:	2000      	movs	r0, #0
 8003214:	f7fd fb32 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003218:	2000      	movs	r0, #0
 800321a:	f7fd fb2f 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800321e:	2000      	movs	r0, #0
 8003220:	f7fd fb2c 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003224:	2000      	movs	r0, #0
 8003226:	f7fd fb29 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800322a:	2000      	movs	r0, #0
 800322c:	f7fd fb26 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003230:	2000      	movs	r0, #0
 8003232:	f7fd fb23 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003236:	2000      	movs	r0, #0
 8003238:	f7fd fb20 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323c:	2000      	movs	r0, #0
 800323e:	f7fd fb1d 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003242:	2000      	movs	r0, #0
 8003244:	f7fd fb1a 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003248:	2000      	movs	r0, #0
 800324a:	f7fd fb17 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800324e:	2000      	movs	r0, #0
 8003250:	f7fd fb14 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003254:	2000      	movs	r0, #0
 8003256:	f7fd fb11 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800325a:	2000      	movs	r0, #0
 800325c:	f7fd fb0e 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003260:	2000      	movs	r0, #0
 8003262:	f7fd fb0b 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003266:	2000      	movs	r0, #0
 8003268:	f7fd fb08 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 800326c:	20f0      	movs	r0, #240	; 0xf0
 800326e:	f7fd fae1 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003272:	2000      	movs	r0, #0
 8003274:	f7fd fb02 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003278:	2050      	movs	r0, #80	; 0x50
 800327a:	f7fd faff 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800327e:	2000      	movs	r0, #0
 8003280:	f7fd fafc 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003284:	2000      	movs	r0, #0
 8003286:	f7fd faf9 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328a:	2000      	movs	r0, #0
 800328c:	f7fd faf6 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003290:	20f3      	movs	r0, #243	; 0xf3
 8003292:	f7fd facf 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003296:	2000      	movs	r0, #0
 8003298:	f7fd faf0 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 800329c:	20f9      	movs	r0, #249	; 0xf9
 800329e:	f7fd fac9 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80032a2:	2006      	movs	r0, #6
 80032a4:	f7fd faea 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80032a8:	2010      	movs	r0, #16
 80032aa:	f7fd fae7 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80032ae:	2029      	movs	r0, #41	; 0x29
 80032b0:	f7fd fae4 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b4:	2000      	movs	r0, #0
 80032b6:	f7fd fae1 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 80032ba:	203a      	movs	r0, #58	; 0x3a
 80032bc:	f7fd faba 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 80032c0:	2055      	movs	r0, #85	; 0x55
 80032c2:	f7fd fadb 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 80032c6:	2011      	movs	r0, #17
 80032c8:	f7fd fab4 	bl	8000834 <LCD_WR_REG>
		HAL_Delay(100);
 80032cc:	2064      	movs	r0, #100	; 0x64
 80032ce:	f003 fbed 	bl	8006aac <HAL_Delay>
		LCD_WR_REG(0x29);
 80032d2:	2029      	movs	r0, #41	; 0x29
 80032d4:	f7fd faae 	bl	8000834 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 80032d8:	2035      	movs	r0, #53	; 0x35
 80032da:	f7fd faab 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80032de:	2000      	movs	r0, #0
 80032e0:	f7fd facc 	bl	800087c <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 80032e4:	2051      	movs	r0, #81	; 0x51
 80032e6:	f7fd faa5 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 80032ea:	20ff      	movs	r0, #255	; 0xff
 80032ec:	f7fd fac6 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 80032f0:	2053      	movs	r0, #83	; 0x53
 80032f2:	f7fd fa9f 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 80032f6:	202c      	movs	r0, #44	; 0x2c
 80032f8:	f7fd fac0 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 80032fc:	2055      	movs	r0, #85	; 0x55
 80032fe:	f7fd fa99 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8003302:	2082      	movs	r0, #130	; 0x82
 8003304:	f7fd faba 	bl	800087c <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003308:	202c      	movs	r0, #44	; 0x2c
 800330a:	f7fd fa93 	bl	8000834 <LCD_WR_REG>
 800330e:	f002 bca1 	b.w	8005c54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8003312:	4b04      	ldr	r3, [pc, #16]	; (8003324 <LCD_Init+0x1504>)
 8003314:	889b      	ldrh	r3, [r3, #4]
 8003316:	f245 5210 	movw	r2, #21776	; 0x5510
 800331a:	4293      	cmp	r3, r2
 800331c:	f040 8782 	bne.w	8004224 <LCD_Init+0x2404>
 8003320:	e002      	b.n	8003328 <LCD_Init+0x1508>
 8003322:	bf00      	nop
 8003324:	20009ce0 	.word	0x20009ce0
		LCD_WriteReg(0xF000, 0x55);
 8003328:	2155      	movs	r1, #85	; 0x55
 800332a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800332e:	f7fd fb0d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003332:	21aa      	movs	r1, #170	; 0xaa
 8003334:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003338:	f7fd fb08 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800333c:	2152      	movs	r1, #82	; 0x52
 800333e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003342:	f7fd fb03 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003346:	2108      	movs	r1, #8
 8003348:	f24f 0003 	movw	r0, #61443	; 0xf003
 800334c:	f7fd fafe 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003350:	2101      	movs	r1, #1
 8003352:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003356:	f7fd faf9 	bl	800094c <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 800335a:	210d      	movs	r1, #13
 800335c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003360:	f7fd faf4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8003364:	210d      	movs	r1, #13
 8003366:	f24b 0001 	movw	r0, #45057	; 0xb001
 800336a:	f7fd faef 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 800336e:	210d      	movs	r1, #13
 8003370:	f24b 0002 	movw	r0, #45058	; 0xb002
 8003374:	f7fd faea 	bl	800094c <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003378:	2134      	movs	r1, #52	; 0x34
 800337a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800337e:	f7fd fae5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8003382:	2134      	movs	r1, #52	; 0x34
 8003384:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003388:	f7fd fae0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 800338c:	2134      	movs	r1, #52	; 0x34
 800338e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003392:	f7fd fadb 	bl	800094c <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8003396:	210d      	movs	r1, #13
 8003398:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800339c:	f7fd fad6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80033a0:	210d      	movs	r1, #13
 80033a2:	f24b 1001 	movw	r0, #45313	; 0xb101
 80033a6:	f7fd fad1 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 80033aa:	210d      	movs	r1, #13
 80033ac:	f24b 1002 	movw	r0, #45314	; 0xb102
 80033b0:	f7fd facc 	bl	800094c <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80033b4:	2134      	movs	r1, #52	; 0x34
 80033b6:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80033ba:	f7fd fac7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 80033be:	2134      	movs	r1, #52	; 0x34
 80033c0:	f24b 7001 	movw	r0, #46849	; 0xb701
 80033c4:	f7fd fac2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 80033c8:	2134      	movs	r1, #52	; 0x34
 80033ca:	f24b 7002 	movw	r0, #46850	; 0xb702
 80033ce:	f7fd fabd 	bl	800094c <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 80033d2:	2100      	movs	r1, #0
 80033d4:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80033d8:	f7fd fab8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 80033dc:	2100      	movs	r1, #0
 80033de:	f24b 2001 	movw	r0, #45569	; 0xb201
 80033e2:	f7fd fab3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 80033e6:	2100      	movs	r1, #0
 80033e8:	f24b 2002 	movw	r0, #45570	; 0xb202
 80033ec:	f7fd faae 	bl	800094c <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 80033f0:	2124      	movs	r1, #36	; 0x24
 80033f2:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80033f6:	f7fd faa9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 80033fa:	2124      	movs	r1, #36	; 0x24
 80033fc:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003400:	f7fd faa4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8003404:	2124      	movs	r1, #36	; 0x24
 8003406:	f64b 0002 	movw	r0, #47106	; 0xb802
 800340a:	f7fd fa9f 	bl	800094c <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 800340e:	2101      	movs	r1, #1
 8003410:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003414:	f7fd fa9a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003418:	210f      	movs	r1, #15
 800341a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800341e:	f7fd fa95 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8003422:	210f      	movs	r1, #15
 8003424:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003428:	f7fd fa90 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 800342c:	210f      	movs	r1, #15
 800342e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003432:	f7fd fa8b 	bl	800094c <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8003436:	2134      	movs	r1, #52	; 0x34
 8003438:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800343c:	f7fd fa86 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003440:	2134      	movs	r1, #52	; 0x34
 8003442:	f64b 1001 	movw	r0, #47361	; 0xb901
 8003446:	f7fd fa81 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 800344a:	2134      	movs	r1, #52	; 0x34
 800344c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003450:	f7fd fa7c 	bl	800094c <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8003454:	2108      	movs	r1, #8
 8003456:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 800345a:	f7fd fa77 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 800345e:	2108      	movs	r1, #8
 8003460:	f24b 5001 	movw	r0, #46337	; 0xb501
 8003464:	f7fd fa72 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003468:	2108      	movs	r1, #8
 800346a:	f24b 5002 	movw	r0, #46338	; 0xb502
 800346e:	f7fd fa6d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8003472:	2103      	movs	r1, #3
 8003474:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003478:	f7fd fa68 	bl	800094c <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 800347c:	2124      	movs	r1, #36	; 0x24
 800347e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003482:	f7fd fa63 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8003486:	2124      	movs	r1, #36	; 0x24
 8003488:	f64b 2001 	movw	r0, #47617	; 0xba01
 800348c:	f7fd fa5e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003490:	2124      	movs	r1, #36	; 0x24
 8003492:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003496:	f7fd fa59 	bl	800094c <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 800349a:	2100      	movs	r1, #0
 800349c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80034a0:	f7fd fa54 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80034a4:	2178      	movs	r1, #120	; 0x78
 80034a6:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80034aa:	f7fd fa4f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80034ae:	2100      	movs	r1, #0
 80034b0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80034b4:	f7fd fa4a 	bl	800094c <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 80034b8:	2100      	movs	r1, #0
 80034ba:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80034be:	f7fd fa45 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 80034c2:	2178      	movs	r1, #120	; 0x78
 80034c4:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80034c8:	f7fd fa40 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 80034cc:	2100      	movs	r1, #0
 80034ce:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80034d2:	f7fd fa3b 	bl	800094c <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 80034d6:	2100      	movs	r1, #0
 80034d8:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80034dc:	f7fd fa36 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 80034e0:	2164      	movs	r1, #100	; 0x64
 80034e2:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80034e6:	f7fd fa31 	bl	800094c <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 80034ea:	2100      	movs	r1, #0
 80034ec:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80034f0:	f7fd fa2c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 80034f4:	2133      	movs	r1, #51	; 0x33
 80034f6:	f24d 1001 	movw	r0, #53505	; 0xd101
 80034fa:	f7fd fa27 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 80034fe:	2100      	movs	r1, #0
 8003500:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003504:	f7fd fa22 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003508:	2134      	movs	r1, #52	; 0x34
 800350a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800350e:	f7fd fa1d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8003512:	2100      	movs	r1, #0
 8003514:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003518:	f7fd fa18 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 800351c:	213a      	movs	r1, #58	; 0x3a
 800351e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003522:	f7fd fa13 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8003526:	2100      	movs	r1, #0
 8003528:	f24d 1006 	movw	r0, #53510	; 0xd106
 800352c:	f7fd fa0e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003530:	214a      	movs	r1, #74	; 0x4a
 8003532:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003536:	f7fd fa09 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 800353a:	2100      	movs	r1, #0
 800353c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003540:	f7fd fa04 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8003544:	215c      	movs	r1, #92	; 0x5c
 8003546:	f24d 1009 	movw	r0, #53513	; 0xd109
 800354a:	f7fd f9ff 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 800354e:	2100      	movs	r1, #0
 8003550:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003554:	f7fd f9fa 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003558:	2181      	movs	r1, #129	; 0x81
 800355a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 800355e:	f7fd f9f5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8003562:	2100      	movs	r1, #0
 8003564:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003568:	f7fd f9f0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 800356c:	21a6      	movs	r1, #166	; 0xa6
 800356e:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8003572:	f7fd f9eb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8003576:	2100      	movs	r1, #0
 8003578:	f24d 100e 	movw	r0, #53518	; 0xd10e
 800357c:	f7fd f9e6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003580:	21e5      	movs	r1, #229	; 0xe5
 8003582:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8003586:	f7fd f9e1 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 800358a:	2101      	movs	r1, #1
 800358c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003590:	f7fd f9dc 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8003594:	2113      	movs	r1, #19
 8003596:	f24d 1011 	movw	r0, #53521	; 0xd111
 800359a:	f7fd f9d7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 800359e:	2101      	movs	r1, #1
 80035a0:	f24d 1012 	movw	r0, #53522	; 0xd112
 80035a4:	f7fd f9d2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 80035a8:	2154      	movs	r1, #84	; 0x54
 80035aa:	f24d 1013 	movw	r0, #53523	; 0xd113
 80035ae:	f7fd f9cd 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80035b2:	2101      	movs	r1, #1
 80035b4:	f24d 1014 	movw	r0, #53524	; 0xd114
 80035b8:	f7fd f9c8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 80035bc:	2182      	movs	r1, #130	; 0x82
 80035be:	f24d 1015 	movw	r0, #53525	; 0xd115
 80035c2:	f7fd f9c3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 80035c6:	2101      	movs	r1, #1
 80035c8:	f24d 1016 	movw	r0, #53526	; 0xd116
 80035cc:	f7fd f9be 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 80035d0:	21ca      	movs	r1, #202	; 0xca
 80035d2:	f24d 1017 	movw	r0, #53527	; 0xd117
 80035d6:	f7fd f9b9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 80035da:	2102      	movs	r1, #2
 80035dc:	f24d 1018 	movw	r0, #53528	; 0xd118
 80035e0:	f7fd f9b4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 80035e4:	2100      	movs	r1, #0
 80035e6:	f24d 1019 	movw	r0, #53529	; 0xd119
 80035ea:	f7fd f9af 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 80035ee:	2102      	movs	r1, #2
 80035f0:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80035f4:	f7fd f9aa 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 80035f8:	2101      	movs	r1, #1
 80035fa:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80035fe:	f7fd f9a5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8003602:	2102      	movs	r1, #2
 8003604:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003608:	f7fd f9a0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 800360c:	2134      	movs	r1, #52	; 0x34
 800360e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003612:	f7fd f99b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8003616:	2102      	movs	r1, #2
 8003618:	f24d 101e 	movw	r0, #53534	; 0xd11e
 800361c:	f7fd f996 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003620:	2167      	movs	r1, #103	; 0x67
 8003622:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003626:	f7fd f991 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 800362a:	2102      	movs	r1, #2
 800362c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003630:	f7fd f98c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8003634:	2184      	movs	r1, #132	; 0x84
 8003636:	f24d 1021 	movw	r0, #53537	; 0xd121
 800363a:	f7fd f987 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 800363e:	2102      	movs	r1, #2
 8003640:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003644:	f7fd f982 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003648:	21a4      	movs	r1, #164	; 0xa4
 800364a:	f24d 1023 	movw	r0, #53539	; 0xd123
 800364e:	f7fd f97d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8003652:	2102      	movs	r1, #2
 8003654:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003658:	f7fd f978 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 800365c:	21b7      	movs	r1, #183	; 0xb7
 800365e:	f24d 1025 	movw	r0, #53541	; 0xd125
 8003662:	f7fd f973 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8003666:	2102      	movs	r1, #2
 8003668:	f24d 1026 	movw	r0, #53542	; 0xd126
 800366c:	f7fd f96e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003670:	21cf      	movs	r1, #207	; 0xcf
 8003672:	f24d 1027 	movw	r0, #53543	; 0xd127
 8003676:	f7fd f969 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 800367a:	2102      	movs	r1, #2
 800367c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003680:	f7fd f964 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8003684:	21de      	movs	r1, #222	; 0xde
 8003686:	f24d 1029 	movw	r0, #53545	; 0xd129
 800368a:	f7fd f95f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 800368e:	2102      	movs	r1, #2
 8003690:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003694:	f7fd f95a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003698:	21f2      	movs	r1, #242	; 0xf2
 800369a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 800369e:	f7fd f955 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80036a2:	2102      	movs	r1, #2
 80036a4:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80036a8:	f7fd f950 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 80036ac:	21fe      	movs	r1, #254	; 0xfe
 80036ae:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80036b2:	f7fd f94b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80036b6:	2103      	movs	r1, #3
 80036b8:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80036bc:	f7fd f946 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 80036c0:	2110      	movs	r1, #16
 80036c2:	f24d 102f 	movw	r0, #53551	; 0xd12f
 80036c6:	f7fd f941 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 80036ca:	2103      	movs	r1, #3
 80036cc:	f24d 1030 	movw	r0, #53552	; 0xd130
 80036d0:	f7fd f93c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 80036d4:	2133      	movs	r1, #51	; 0x33
 80036d6:	f24d 1031 	movw	r0, #53553	; 0xd131
 80036da:	f7fd f937 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 80036de:	2103      	movs	r1, #3
 80036e0:	f24d 1032 	movw	r0, #53554	; 0xd132
 80036e4:	f7fd f932 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 80036e8:	216d      	movs	r1, #109	; 0x6d
 80036ea:	f24d 1033 	movw	r0, #53555	; 0xd133
 80036ee:	f7fd f92d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 80036f2:	2100      	movs	r1, #0
 80036f4:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80036f8:	f7fd f928 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 80036fc:	2133      	movs	r1, #51	; 0x33
 80036fe:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003702:	f7fd f923 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8003706:	2100      	movs	r1, #0
 8003708:	f24d 2002 	movw	r0, #53762	; 0xd202
 800370c:	f7fd f91e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003710:	2134      	movs	r1, #52	; 0x34
 8003712:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003716:	f7fd f919 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 800371a:	2100      	movs	r1, #0
 800371c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003720:	f7fd f914 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003724:	213a      	movs	r1, #58	; 0x3a
 8003726:	f24d 2005 	movw	r0, #53765	; 0xd205
 800372a:	f7fd f90f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 800372e:	2100      	movs	r1, #0
 8003730:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003734:	f7fd f90a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003738:	214a      	movs	r1, #74	; 0x4a
 800373a:	f24d 2007 	movw	r0, #53767	; 0xd207
 800373e:	f7fd f905 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003742:	2100      	movs	r1, #0
 8003744:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003748:	f7fd f900 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 800374c:	215c      	movs	r1, #92	; 0x5c
 800374e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003752:	f7fd f8fb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003756:	2100      	movs	r1, #0
 8003758:	f24d 200a 	movw	r0, #53770	; 0xd20a
 800375c:	f7fd f8f6 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003760:	2181      	movs	r1, #129	; 0x81
 8003762:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003766:	f7fd f8f1 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 800376a:	2100      	movs	r1, #0
 800376c:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003770:	f7fd f8ec 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003774:	21a6      	movs	r1, #166	; 0xa6
 8003776:	f24d 200d 	movw	r0, #53773	; 0xd20d
 800377a:	f7fd f8e7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 800377e:	2100      	movs	r1, #0
 8003780:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003784:	f7fd f8e2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003788:	21e5      	movs	r1, #229	; 0xe5
 800378a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 800378e:	f7fd f8dd 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003792:	2101      	movs	r1, #1
 8003794:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003798:	f7fd f8d8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 800379c:	2113      	movs	r1, #19
 800379e:	f24d 2011 	movw	r0, #53777	; 0xd211
 80037a2:	f7fd f8d3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 80037a6:	2101      	movs	r1, #1
 80037a8:	f24d 2012 	movw	r0, #53778	; 0xd212
 80037ac:	f7fd f8ce 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 80037b0:	2154      	movs	r1, #84	; 0x54
 80037b2:	f24d 2013 	movw	r0, #53779	; 0xd213
 80037b6:	f7fd f8c9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 80037ba:	2101      	movs	r1, #1
 80037bc:	f24d 2014 	movw	r0, #53780	; 0xd214
 80037c0:	f7fd f8c4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 80037c4:	2182      	movs	r1, #130	; 0x82
 80037c6:	f24d 2015 	movw	r0, #53781	; 0xd215
 80037ca:	f7fd f8bf 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 80037ce:	2101      	movs	r1, #1
 80037d0:	f24d 2016 	movw	r0, #53782	; 0xd216
 80037d4:	f7fd f8ba 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 80037d8:	21ca      	movs	r1, #202	; 0xca
 80037da:	f24d 2017 	movw	r0, #53783	; 0xd217
 80037de:	f7fd f8b5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 80037e2:	2102      	movs	r1, #2
 80037e4:	f24d 2018 	movw	r0, #53784	; 0xd218
 80037e8:	f7fd f8b0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 80037ec:	2100      	movs	r1, #0
 80037ee:	f24d 2019 	movw	r0, #53785	; 0xd219
 80037f2:	f7fd f8ab 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 80037f6:	2102      	movs	r1, #2
 80037f8:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80037fc:	f7fd f8a6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003800:	2101      	movs	r1, #1
 8003802:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003806:	f7fd f8a1 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 800380a:	2102      	movs	r1, #2
 800380c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003810:	f7fd f89c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003814:	2134      	movs	r1, #52	; 0x34
 8003816:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800381a:	f7fd f897 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 800381e:	2102      	movs	r1, #2
 8003820:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003824:	f7fd f892 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003828:	2167      	movs	r1, #103	; 0x67
 800382a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 800382e:	f7fd f88d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003832:	2102      	movs	r1, #2
 8003834:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003838:	f7fd f888 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 800383c:	2184      	movs	r1, #132	; 0x84
 800383e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003842:	f7fd f883 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003846:	2102      	movs	r1, #2
 8003848:	f24d 2022 	movw	r0, #53794	; 0xd222
 800384c:	f7fd f87e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003850:	21a4      	movs	r1, #164	; 0xa4
 8003852:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003856:	f7fd f879 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 800385a:	2102      	movs	r1, #2
 800385c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003860:	f7fd f874 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003864:	21b7      	movs	r1, #183	; 0xb7
 8003866:	f24d 2025 	movw	r0, #53797	; 0xd225
 800386a:	f7fd f86f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 800386e:	2102      	movs	r1, #2
 8003870:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003874:	f7fd f86a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003878:	21cf      	movs	r1, #207	; 0xcf
 800387a:	f24d 2027 	movw	r0, #53799	; 0xd227
 800387e:	f7fd f865 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003882:	2102      	movs	r1, #2
 8003884:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003888:	f7fd f860 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 800388c:	21de      	movs	r1, #222	; 0xde
 800388e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003892:	f7fd f85b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003896:	2102      	movs	r1, #2
 8003898:	f24d 202a 	movw	r0, #53802	; 0xd22a
 800389c:	f7fd f856 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 80038a0:	21f2      	movs	r1, #242	; 0xf2
 80038a2:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80038a6:	f7fd f851 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 80038aa:	2102      	movs	r1, #2
 80038ac:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80038b0:	f7fd f84c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 80038b4:	21fe      	movs	r1, #254	; 0xfe
 80038b6:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80038ba:	f7fd f847 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 80038be:	2103      	movs	r1, #3
 80038c0:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80038c4:	f7fd f842 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 80038c8:	2110      	movs	r1, #16
 80038ca:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80038ce:	f7fd f83d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 80038d2:	2103      	movs	r1, #3
 80038d4:	f24d 2030 	movw	r0, #53808	; 0xd230
 80038d8:	f7fd f838 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 80038dc:	2133      	movs	r1, #51	; 0x33
 80038de:	f24d 2031 	movw	r0, #53809	; 0xd231
 80038e2:	f7fd f833 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 80038e6:	2103      	movs	r1, #3
 80038e8:	f24d 2032 	movw	r0, #53810	; 0xd232
 80038ec:	f7fd f82e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 80038f0:	216d      	movs	r1, #109	; 0x6d
 80038f2:	f24d 2033 	movw	r0, #53811	; 0xd233
 80038f6:	f7fd f829 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 80038fa:	2100      	movs	r1, #0
 80038fc:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003900:	f7fd f824 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003904:	2133      	movs	r1, #51	; 0x33
 8003906:	f24d 3001 	movw	r0, #54017	; 0xd301
 800390a:	f7fd f81f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 800390e:	2100      	movs	r1, #0
 8003910:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003914:	f7fd f81a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003918:	2134      	movs	r1, #52	; 0x34
 800391a:	f24d 3003 	movw	r0, #54019	; 0xd303
 800391e:	f7fd f815 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003922:	2100      	movs	r1, #0
 8003924:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003928:	f7fd f810 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 800392c:	213a      	movs	r1, #58	; 0x3a
 800392e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003932:	f7fd f80b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003936:	2100      	movs	r1, #0
 8003938:	f24d 3006 	movw	r0, #54022	; 0xd306
 800393c:	f7fd f806 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003940:	214a      	movs	r1, #74	; 0x4a
 8003942:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003946:	f7fd f801 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 800394a:	2100      	movs	r1, #0
 800394c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003950:	f7fc fffc 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003954:	215c      	movs	r1, #92	; 0x5c
 8003956:	f24d 3009 	movw	r0, #54025	; 0xd309
 800395a:	f7fc fff7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 800395e:	2100      	movs	r1, #0
 8003960:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003964:	f7fc fff2 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003968:	2181      	movs	r1, #129	; 0x81
 800396a:	f24d 300b 	movw	r0, #54027	; 0xd30b
 800396e:	f7fc ffed 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003972:	2100      	movs	r1, #0
 8003974:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003978:	f7fc ffe8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 800397c:	21a6      	movs	r1, #166	; 0xa6
 800397e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003982:	f7fc ffe3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003986:	2100      	movs	r1, #0
 8003988:	f24d 300e 	movw	r0, #54030	; 0xd30e
 800398c:	f7fc ffde 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003990:	21e5      	movs	r1, #229	; 0xe5
 8003992:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003996:	f7fc ffd9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 800399a:	2101      	movs	r1, #1
 800399c:	f24d 3010 	movw	r0, #54032	; 0xd310
 80039a0:	f7fc ffd4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 80039a4:	2113      	movs	r1, #19
 80039a6:	f24d 3011 	movw	r0, #54033	; 0xd311
 80039aa:	f7fc ffcf 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 80039ae:	2101      	movs	r1, #1
 80039b0:	f24d 3012 	movw	r0, #54034	; 0xd312
 80039b4:	f7fc ffca 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 80039b8:	2154      	movs	r1, #84	; 0x54
 80039ba:	f24d 3013 	movw	r0, #54035	; 0xd313
 80039be:	f7fc ffc5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 80039c2:	2101      	movs	r1, #1
 80039c4:	f24d 3014 	movw	r0, #54036	; 0xd314
 80039c8:	f7fc ffc0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 80039cc:	2182      	movs	r1, #130	; 0x82
 80039ce:	f24d 3015 	movw	r0, #54037	; 0xd315
 80039d2:	f7fc ffbb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 80039d6:	2101      	movs	r1, #1
 80039d8:	f24d 3016 	movw	r0, #54038	; 0xd316
 80039dc:	f7fc ffb6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 80039e0:	21ca      	movs	r1, #202	; 0xca
 80039e2:	f24d 3017 	movw	r0, #54039	; 0xd317
 80039e6:	f7fc ffb1 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 80039ea:	2102      	movs	r1, #2
 80039ec:	f24d 3018 	movw	r0, #54040	; 0xd318
 80039f0:	f7fc ffac 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 80039f4:	2100      	movs	r1, #0
 80039f6:	f24d 3019 	movw	r0, #54041	; 0xd319
 80039fa:	f7fc ffa7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 80039fe:	2102      	movs	r1, #2
 8003a00:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003a04:	f7fc ffa2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003a08:	2101      	movs	r1, #1
 8003a0a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003a0e:	f7fc ff9d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003a12:	2102      	movs	r1, #2
 8003a14:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003a18:	f7fc ff98 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003a1c:	2134      	movs	r1, #52	; 0x34
 8003a1e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003a22:	f7fc ff93 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003a26:	2102      	movs	r1, #2
 8003a28:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003a2c:	f7fc ff8e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003a30:	2167      	movs	r1, #103	; 0x67
 8003a32:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003a36:	f7fc ff89 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003a40:	f7fc ff84 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003a44:	2184      	movs	r1, #132	; 0x84
 8003a46:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003a4a:	f7fc ff7f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003a4e:	2102      	movs	r1, #2
 8003a50:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003a54:	f7fc ff7a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003a58:	21a4      	movs	r1, #164	; 0xa4
 8003a5a:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003a5e:	f7fc ff75 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003a62:	2102      	movs	r1, #2
 8003a64:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003a68:	f7fc ff70 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003a6c:	21b7      	movs	r1, #183	; 0xb7
 8003a6e:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003a72:	f7fc ff6b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003a76:	2102      	movs	r1, #2
 8003a78:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003a7c:	f7fc ff66 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003a80:	21cf      	movs	r1, #207	; 0xcf
 8003a82:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003a86:	f7fc ff61 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003a90:	f7fc ff5c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003a94:	21de      	movs	r1, #222	; 0xde
 8003a96:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003a9a:	f7fc ff57 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003aa4:	f7fc ff52 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003aa8:	21f2      	movs	r1, #242	; 0xf2
 8003aaa:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003aae:	f7fc ff4d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003ab8:	f7fc ff48 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003abc:	21fe      	movs	r1, #254	; 0xfe
 8003abe:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003ac2:	f7fc ff43 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003ac6:	2103      	movs	r1, #3
 8003ac8:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003acc:	f7fc ff3e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003ad0:	2110      	movs	r1, #16
 8003ad2:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003ad6:	f7fc ff39 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003ada:	2103      	movs	r1, #3
 8003adc:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003ae0:	f7fc ff34 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003ae4:	2133      	movs	r1, #51	; 0x33
 8003ae6:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003aea:	f7fc ff2f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003aee:	2103      	movs	r1, #3
 8003af0:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003af4:	f7fc ff2a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003af8:	216d      	movs	r1, #109	; 0x6d
 8003afa:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003afe:	f7fc ff25 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003b02:	2100      	movs	r1, #0
 8003b04:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003b08:	f7fc ff20 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003b0c:	2133      	movs	r1, #51	; 0x33
 8003b0e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003b12:	f7fc ff1b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003b16:	2100      	movs	r1, #0
 8003b18:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003b1c:	f7fc ff16 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003b20:	2134      	movs	r1, #52	; 0x34
 8003b22:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003b26:	f7fc ff11 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003b30:	f7fc ff0c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003b34:	213a      	movs	r1, #58	; 0x3a
 8003b36:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003b3a:	f7fc ff07 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003b44:	f7fc ff02 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003b48:	214a      	movs	r1, #74	; 0x4a
 8003b4a:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003b4e:	f7fc fefd 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003b52:	2100      	movs	r1, #0
 8003b54:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003b58:	f7fc fef8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003b5c:	215c      	movs	r1, #92	; 0x5c
 8003b5e:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003b62:	f7fc fef3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003b66:	2100      	movs	r1, #0
 8003b68:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003b6c:	f7fc feee 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003b70:	2181      	movs	r1, #129	; 0x81
 8003b72:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003b76:	f7fc fee9 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003b80:	f7fc fee4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003b84:	21a6      	movs	r1, #166	; 0xa6
 8003b86:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003b8a:	f7fc fedf 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003b8e:	2100      	movs	r1, #0
 8003b90:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003b94:	f7fc feda 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003b98:	21e5      	movs	r1, #229	; 0xe5
 8003b9a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003b9e:	f7fc fed5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003ba8:	f7fc fed0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003bac:	2113      	movs	r1, #19
 8003bae:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003bb2:	f7fc fecb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003bbc:	f7fc fec6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003bc0:	2154      	movs	r1, #84	; 0x54
 8003bc2:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003bc6:	f7fc fec1 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003bca:	2101      	movs	r1, #1
 8003bcc:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003bd0:	f7fc febc 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003bd4:	2182      	movs	r1, #130	; 0x82
 8003bd6:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003bda:	f7fc feb7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003bde:	2101      	movs	r1, #1
 8003be0:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003be4:	f7fc feb2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003be8:	21ca      	movs	r1, #202	; 0xca
 8003bea:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003bee:	f7fc fead 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003bf8:	f7fc fea8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003c02:	f7fc fea3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003c06:	2102      	movs	r1, #2
 8003c08:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003c0c:	f7fc fe9e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003c10:	2101      	movs	r1, #1
 8003c12:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003c16:	f7fc fe99 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003c20:	f7fc fe94 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003c24:	2134      	movs	r1, #52	; 0x34
 8003c26:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003c2a:	f7fc fe8f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003c2e:	2102      	movs	r1, #2
 8003c30:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003c34:	f7fc fe8a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003c38:	2167      	movs	r1, #103	; 0x67
 8003c3a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003c3e:	f7fc fe85 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003c42:	2102      	movs	r1, #2
 8003c44:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003c48:	f7fc fe80 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003c4c:	2184      	movs	r1, #132	; 0x84
 8003c4e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003c52:	f7fc fe7b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003c56:	2102      	movs	r1, #2
 8003c58:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003c5c:	f7fc fe76 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003c60:	21a4      	movs	r1, #164	; 0xa4
 8003c62:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003c66:	f7fc fe71 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003c70:	f7fc fe6c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003c74:	21b7      	movs	r1, #183	; 0xb7
 8003c76:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003c7a:	f7fc fe67 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003c7e:	2102      	movs	r1, #2
 8003c80:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003c84:	f7fc fe62 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003c88:	21cf      	movs	r1, #207	; 0xcf
 8003c8a:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003c8e:	f7fc fe5d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003c92:	2102      	movs	r1, #2
 8003c94:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003c98:	f7fc fe58 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003c9c:	21de      	movs	r1, #222	; 0xde
 8003c9e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003ca2:	f7fc fe53 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003cac:	f7fc fe4e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003cb0:	21f2      	movs	r1, #242	; 0xf2
 8003cb2:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003cb6:	f7fc fe49 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003cba:	2102      	movs	r1, #2
 8003cbc:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003cc0:	f7fc fe44 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003cc4:	21fe      	movs	r1, #254	; 0xfe
 8003cc6:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003cca:	f7fc fe3f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003cce:	2103      	movs	r1, #3
 8003cd0:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003cd4:	f7fc fe3a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003cd8:	2110      	movs	r1, #16
 8003cda:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003cde:	f7fc fe35 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003ce2:	2103      	movs	r1, #3
 8003ce4:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003ce8:	f7fc fe30 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003cec:	2133      	movs	r1, #51	; 0x33
 8003cee:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003cf2:	f7fc fe2b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003cf6:	2103      	movs	r1, #3
 8003cf8:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003cfc:	f7fc fe26 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003d00:	216d      	movs	r1, #109	; 0x6d
 8003d02:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003d06:	f7fc fe21 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003d10:	f7fc fe1c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003d14:	2133      	movs	r1, #51	; 0x33
 8003d16:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003d1a:	f7fc fe17 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003d1e:	2100      	movs	r1, #0
 8003d20:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003d24:	f7fc fe12 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003d28:	2134      	movs	r1, #52	; 0x34
 8003d2a:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003d2e:	f7fc fe0d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003d32:	2100      	movs	r1, #0
 8003d34:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003d38:	f7fc fe08 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003d3c:	213a      	movs	r1, #58	; 0x3a
 8003d3e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003d42:	f7fc fe03 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003d46:	2100      	movs	r1, #0
 8003d48:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003d4c:	f7fc fdfe 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003d50:	214a      	movs	r1, #74	; 0x4a
 8003d52:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003d56:	f7fc fdf9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003d60:	f7fc fdf4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003d64:	215c      	movs	r1, #92	; 0x5c
 8003d66:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003d6a:	f7fc fdef 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003d6e:	2100      	movs	r1, #0
 8003d70:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003d74:	f7fc fdea 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003d78:	2181      	movs	r1, #129	; 0x81
 8003d7a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003d7e:	f7fc fde5 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003d82:	2100      	movs	r1, #0
 8003d84:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003d88:	f7fc fde0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003d8c:	21a6      	movs	r1, #166	; 0xa6
 8003d8e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003d92:	f7fc fddb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003d96:	2100      	movs	r1, #0
 8003d98:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003d9c:	f7fc fdd6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003da0:	21e5      	movs	r1, #229	; 0xe5
 8003da2:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003da6:	f7fc fdd1 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003daa:	2101      	movs	r1, #1
 8003dac:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003db0:	f7fc fdcc 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003db4:	2113      	movs	r1, #19
 8003db6:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003dba:	f7fc fdc7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003dc4:	f7fc fdc2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003dc8:	2154      	movs	r1, #84	; 0x54
 8003dca:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003dce:	f7fc fdbd 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003dd8:	f7fc fdb8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003ddc:	2182      	movs	r1, #130	; 0x82
 8003dde:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003de2:	f7fc fdb3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003de6:	2101      	movs	r1, #1
 8003de8:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003dec:	f7fc fdae 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003df0:	21ca      	movs	r1, #202	; 0xca
 8003df2:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003df6:	f7fc fda9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003e00:	f7fc fda4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003e04:	2100      	movs	r1, #0
 8003e06:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003e0a:	f7fc fd9f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003e0e:	2102      	movs	r1, #2
 8003e10:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003e14:	f7fc fd9a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003e18:	2101      	movs	r1, #1
 8003e1a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003e1e:	f7fc fd95 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003e22:	2102      	movs	r1, #2
 8003e24:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003e28:	f7fc fd90 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003e2c:	2134      	movs	r1, #52	; 0x34
 8003e2e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003e32:	f7fc fd8b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003e36:	2102      	movs	r1, #2
 8003e38:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003e3c:	f7fc fd86 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003e40:	2167      	movs	r1, #103	; 0x67
 8003e42:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003e46:	f7fc fd81 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003e50:	f7fc fd7c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003e54:	2184      	movs	r1, #132	; 0x84
 8003e56:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003e5a:	f7fc fd77 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003e5e:	2102      	movs	r1, #2
 8003e60:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003e64:	f7fc fd72 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003e68:	21a4      	movs	r1, #164	; 0xa4
 8003e6a:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003e6e:	f7fc fd6d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003e72:	2102      	movs	r1, #2
 8003e74:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003e78:	f7fc fd68 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003e7c:	21b7      	movs	r1, #183	; 0xb7
 8003e7e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003e82:	f7fc fd63 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003e86:	2102      	movs	r1, #2
 8003e88:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003e8c:	f7fc fd5e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003e90:	21cf      	movs	r1, #207	; 0xcf
 8003e92:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003e96:	f7fc fd59 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003ea0:	f7fc fd54 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003ea4:	21de      	movs	r1, #222	; 0xde
 8003ea6:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003eaa:	f7fc fd4f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003eae:	2102      	movs	r1, #2
 8003eb0:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003eb4:	f7fc fd4a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003eb8:	21f2      	movs	r1, #242	; 0xf2
 8003eba:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003ebe:	f7fc fd45 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003ec8:	f7fc fd40 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003ecc:	21fe      	movs	r1, #254	; 0xfe
 8003ece:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003ed2:	f7fc fd3b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8003ed6:	2103      	movs	r1, #3
 8003ed8:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003edc:	f7fc fd36 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8003ee0:	2110      	movs	r1, #16
 8003ee2:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003ee6:	f7fc fd31 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8003eea:	2103      	movs	r1, #3
 8003eec:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003ef0:	f7fc fd2c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8003ef4:	2133      	movs	r1, #51	; 0x33
 8003ef6:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003efa:	f7fc fd27 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8003efe:	2103      	movs	r1, #3
 8003f00:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003f04:	f7fc fd22 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8003f08:	216d      	movs	r1, #109	; 0x6d
 8003f0a:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003f0e:	f7fc fd1d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8003f12:	2100      	movs	r1, #0
 8003f14:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003f18:	f7fc fd18 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8003f1c:	2133      	movs	r1, #51	; 0x33
 8003f1e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003f22:	f7fc fd13 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8003f26:	2100      	movs	r1, #0
 8003f28:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003f2c:	f7fc fd0e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8003f30:	2134      	movs	r1, #52	; 0x34
 8003f32:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003f36:	f7fc fd09 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003f40:	f7fc fd04 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8003f44:	213a      	movs	r1, #58	; 0x3a
 8003f46:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003f4a:	f7fc fcff 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8003f4e:	2100      	movs	r1, #0
 8003f50:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003f54:	f7fc fcfa 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8003f58:	214a      	movs	r1, #74	; 0x4a
 8003f5a:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003f5e:	f7fc fcf5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8003f62:	2100      	movs	r1, #0
 8003f64:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003f68:	f7fc fcf0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8003f6c:	215c      	movs	r1, #92	; 0x5c
 8003f6e:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003f72:	f7fc fceb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8003f76:	2100      	movs	r1, #0
 8003f78:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003f7c:	f7fc fce6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8003f80:	2181      	movs	r1, #129	; 0x81
 8003f82:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003f86:	f7fc fce1 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003f90:	f7fc fcdc 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8003f94:	21a6      	movs	r1, #166	; 0xa6
 8003f96:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003f9a:	f7fc fcd7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003fa4:	f7fc fcd2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8003fa8:	21e5      	movs	r1, #229	; 0xe5
 8003faa:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003fae:	f7fc fccd 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003fb8:	f7fc fcc8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8003fbc:	2113      	movs	r1, #19
 8003fbe:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003fc2:	f7fc fcc3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003fcc:	f7fc fcbe 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8003fd0:	2154      	movs	r1, #84	; 0x54
 8003fd2:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003fd6:	f7fc fcb9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8003fda:	2101      	movs	r1, #1
 8003fdc:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003fe0:	f7fc fcb4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8003fe4:	2182      	movs	r1, #130	; 0x82
 8003fe6:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003fea:	f7fc fcaf 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8003fee:	2101      	movs	r1, #1
 8003ff0:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003ff4:	f7fc fcaa 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8003ff8:	21ca      	movs	r1, #202	; 0xca
 8003ffa:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003ffe:	f7fc fca5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8004002:	2102      	movs	r1, #2
 8004004:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004008:	f7fc fca0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 800400c:	2100      	movs	r1, #0
 800400e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8004012:	f7fc fc9b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8004016:	2102      	movs	r1, #2
 8004018:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800401c:	f7fc fc96 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004020:	2101      	movs	r1, #1
 8004022:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8004026:	f7fc fc91 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 800402a:	2102      	movs	r1, #2
 800402c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004030:	f7fc fc8c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8004034:	2134      	movs	r1, #52	; 0x34
 8004036:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800403a:	f7fc fc87 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 800403e:	2102      	movs	r1, #2
 8004040:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8004044:	f7fc fc82 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8004048:	2167      	movs	r1, #103	; 0x67
 800404a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 800404e:	f7fc fc7d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8004052:	2102      	movs	r1, #2
 8004054:	f24d 6020 	movw	r0, #54816	; 0xd620
 8004058:	f7fc fc78 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 800405c:	2184      	movs	r1, #132	; 0x84
 800405e:	f24d 6021 	movw	r0, #54817	; 0xd621
 8004062:	f7fc fc73 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8004066:	2102      	movs	r1, #2
 8004068:	f24d 6022 	movw	r0, #54818	; 0xd622
 800406c:	f7fc fc6e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8004070:	21a4      	movs	r1, #164	; 0xa4
 8004072:	f24d 6023 	movw	r0, #54819	; 0xd623
 8004076:	f7fc fc69 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 800407a:	2102      	movs	r1, #2
 800407c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004080:	f7fc fc64 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8004084:	21b7      	movs	r1, #183	; 0xb7
 8004086:	f24d 6025 	movw	r0, #54821	; 0xd625
 800408a:	f7fc fc5f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 800408e:	2102      	movs	r1, #2
 8004090:	f24d 6026 	movw	r0, #54822	; 0xd626
 8004094:	f7fc fc5a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8004098:	21cf      	movs	r1, #207	; 0xcf
 800409a:	f24d 6027 	movw	r0, #54823	; 0xd627
 800409e:	f7fc fc55 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80040a2:	2102      	movs	r1, #2
 80040a4:	f24d 6028 	movw	r0, #54824	; 0xd628
 80040a8:	f7fc fc50 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80040ac:	21de      	movs	r1, #222	; 0xde
 80040ae:	f24d 6029 	movw	r0, #54825	; 0xd629
 80040b2:	f7fc fc4b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80040b6:	2102      	movs	r1, #2
 80040b8:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80040bc:	f7fc fc46 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 80040c0:	21f2      	movs	r1, #242	; 0xf2
 80040c2:	f24d 602b 	movw	r0, #54827	; 0xd62b
 80040c6:	f7fc fc41 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 80040ca:	2102      	movs	r1, #2
 80040cc:	f24d 602c 	movw	r0, #54828	; 0xd62c
 80040d0:	f7fc fc3c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 80040d4:	21fe      	movs	r1, #254	; 0xfe
 80040d6:	f24d 602d 	movw	r0, #54829	; 0xd62d
 80040da:	f7fc fc37 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 80040de:	2103      	movs	r1, #3
 80040e0:	f24d 602e 	movw	r0, #54830	; 0xd62e
 80040e4:	f7fc fc32 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 80040e8:	2110      	movs	r1, #16
 80040ea:	f24d 602f 	movw	r0, #54831	; 0xd62f
 80040ee:	f7fc fc2d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 80040f2:	2103      	movs	r1, #3
 80040f4:	f24d 6030 	movw	r0, #54832	; 0xd630
 80040f8:	f7fc fc28 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 80040fc:	2133      	movs	r1, #51	; 0x33
 80040fe:	f24d 6031 	movw	r0, #54833	; 0xd631
 8004102:	f7fc fc23 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8004106:	2103      	movs	r1, #3
 8004108:	f24d 6032 	movw	r0, #54834	; 0xd632
 800410c:	f7fc fc1e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004110:	216d      	movs	r1, #109	; 0x6d
 8004112:	f24d 6033 	movw	r0, #54835	; 0xd633
 8004116:	f7fc fc19 	bl	800094c <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 800411a:	2155      	movs	r1, #85	; 0x55
 800411c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004120:	f7fc fc14 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8004124:	21aa      	movs	r1, #170	; 0xaa
 8004126:	f24f 0001 	movw	r0, #61441	; 0xf001
 800412a:	f7fc fc0f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800412e:	2152      	movs	r1, #82	; 0x52
 8004130:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004134:	f7fc fc0a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004138:	2108      	movs	r1, #8
 800413a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800413e:	f7fc fc05 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8004142:	2100      	movs	r1, #0
 8004144:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004148:	f7fc fc00 	bl	800094c <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 800414c:	21cc      	movs	r1, #204	; 0xcc
 800414e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004152:	f7fc fbfb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8004156:	2100      	movs	r1, #0
 8004158:	f24b 1001 	movw	r0, #45313	; 0xb101
 800415c:	f7fc fbf6 	bl	800094c <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8004160:	2105      	movs	r1, #5
 8004162:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8004166:	f7fc fbf1 	bl	800094c <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 800416a:	2170      	movs	r1, #112	; 0x70
 800416c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004170:	f7fc fbec 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8004174:	2170      	movs	r1, #112	; 0x70
 8004176:	f24b 7001 	movw	r0, #46849	; 0xb701
 800417a:	f7fc fbe7 	bl	800094c <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 800417e:	2101      	movs	r1, #1
 8004180:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004184:	f7fc fbe2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8004188:	2103      	movs	r1, #3
 800418a:	f64b 0001 	movw	r0, #47105	; 0xb801
 800418e:	f7fc fbdd 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8004192:	2103      	movs	r1, #3
 8004194:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004198:	f7fc fbd8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 800419c:	2103      	movs	r1, #3
 800419e:	f64b 0003 	movw	r0, #47107	; 0xb803
 80041a2:	f7fc fbd3 	bl	800094c <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80041a6:	2102      	movs	r1, #2
 80041a8:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80041ac:	f7fc fbce 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80041b0:	2100      	movs	r1, #0
 80041b2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80041b6:	f7fc fbc9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80041ba:	2100      	movs	r1, #0
 80041bc:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80041c0:	f7fc fbc4 	bl	800094c <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 80041c4:	21d0      	movs	r1, #208	; 0xd0
 80041c6:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 80041ca:	f7fc fbbf 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 80041ce:	2102      	movs	r1, #2
 80041d0:	f64c 1001 	movw	r0, #51457	; 0xc901
 80041d4:	f7fc fbba 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 80041d8:	2150      	movs	r1, #80	; 0x50
 80041da:	f64c 1002 	movw	r0, #51458	; 0xc902
 80041de:	f7fc fbb5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 80041e2:	2150      	movs	r1, #80	; 0x50
 80041e4:	f64c 1003 	movw	r0, #51459	; 0xc903
 80041e8:	f7fc fbb0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 80041ec:	2150      	movs	r1, #80	; 0x50
 80041ee:	f64c 1004 	movw	r0, #51460	; 0xc904
 80041f2:	f7fc fbab 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 80041f6:	2100      	movs	r1, #0
 80041f8:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 80041fc:	f7fc fba6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004200:	2155      	movs	r1, #85	; 0x55
 8004202:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004206:	f7fc fba1 	bl	800094c <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800420a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800420e:	f7fc fb11 	bl	8000834 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8004212:	2001      	movs	r0, #1
 8004214:	f002 fc4a 	bl	8006aac <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004218:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 800421c:	f7fc fb0a 	bl	8000834 <LCD_WR_REG>
 8004220:	f001 bd18 	b.w	8005c54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8004224:	4bec      	ldr	r3, [pc, #944]	; (80045d8 <LCD_Init+0x27b8>)
 8004226:	889b      	ldrh	r3, [r3, #4]
 8004228:	f249 3225 	movw	r2, #37669	; 0x9325
 800422c:	4293      	cmp	r3, r2
 800422e:	f040 80d7 	bne.w	80043e0 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8004232:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8004236:	20e5      	movs	r0, #229	; 0xe5
 8004238:	f7fc fb88 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 800423c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004240:	2001      	movs	r0, #1
 8004242:	f7fc fb83 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004246:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800424a:	2002      	movs	r0, #2
 800424c:	f7fc fb7e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004250:	f241 0130 	movw	r1, #4144	; 0x1030
 8004254:	2003      	movs	r0, #3
 8004256:	f7fc fb79 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800425a:	2100      	movs	r1, #0
 800425c:	2004      	movs	r0, #4
 800425e:	f7fc fb75 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004262:	f240 2102 	movw	r1, #514	; 0x202
 8004266:	2008      	movs	r0, #8
 8004268:	f7fc fb70 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800426c:	2100      	movs	r1, #0
 800426e:	2009      	movs	r0, #9
 8004270:	f7fc fb6c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8004274:	2100      	movs	r1, #0
 8004276:	200a      	movs	r0, #10
 8004278:	f7fc fb68 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800427c:	2100      	movs	r1, #0
 800427e:	200c      	movs	r0, #12
 8004280:	f7fc fb64 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8004284:	2100      	movs	r1, #0
 8004286:	200d      	movs	r0, #13
 8004288:	f7fc fb60 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800428c:	2100      	movs	r1, #0
 800428e:	200f      	movs	r0, #15
 8004290:	f7fc fb5c 	bl	800094c <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8004294:	2100      	movs	r1, #0
 8004296:	2010      	movs	r0, #16
 8004298:	f7fc fb58 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800429c:	2107      	movs	r1, #7
 800429e:	2011      	movs	r0, #17
 80042a0:	f7fc fb54 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80042a4:	2100      	movs	r1, #0
 80042a6:	2012      	movs	r0, #18
 80042a8:	f7fc fb50 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80042ac:	2100      	movs	r1, #0
 80042ae:	2013      	movs	r0, #19
 80042b0:	f7fc fb4c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80042b4:	2100      	movs	r1, #0
 80042b6:	2007      	movs	r0, #7
 80042b8:	f7fc fb48 	bl	800094c <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 80042bc:	f241 6190 	movw	r1, #5776	; 0x1690
 80042c0:	2010      	movs	r0, #16
 80042c2:	f7fc fb43 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80042c6:	f240 2127 	movw	r1, #551	; 0x227
 80042ca:	2011      	movs	r0, #17
 80042cc:	f7fc fb3e 	bl	800094c <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 80042d0:	219d      	movs	r1, #157	; 0x9d
 80042d2:	2012      	movs	r0, #18
 80042d4:	f7fc fb3a 	bl	800094c <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 80042d8:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80042dc:	2013      	movs	r0, #19
 80042de:	f7fc fb35 	bl	800094c <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 80042e2:	2125      	movs	r1, #37	; 0x25
 80042e4:	2029      	movs	r0, #41	; 0x29
 80042e6:	f7fc fb31 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 80042ea:	210d      	movs	r1, #13
 80042ec:	202b      	movs	r0, #43	; 0x2b
 80042ee:	f7fc fb2d 	bl	800094c <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 80042f2:	2107      	movs	r1, #7
 80042f4:	2030      	movs	r0, #48	; 0x30
 80042f6:	f7fc fb29 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 80042fa:	f240 3103 	movw	r1, #771	; 0x303
 80042fe:	2031      	movs	r0, #49	; 0x31
 8004300:	f7fc fb24 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8004304:	2103      	movs	r1, #3
 8004306:	2032      	movs	r0, #50	; 0x32
 8004308:	f7fc fb20 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 800430c:	f240 2106 	movw	r1, #518	; 0x206
 8004310:	2035      	movs	r0, #53	; 0x35
 8004312:	f7fc fb1b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8004316:	2108      	movs	r1, #8
 8004318:	2036      	movs	r0, #54	; 0x36
 800431a:	f7fc fb17 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 800431e:	f240 4106 	movw	r1, #1030	; 0x406
 8004322:	2037      	movs	r0, #55	; 0x37
 8004324:	f7fc fb12 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004328:	f44f 7141 	mov.w	r1, #772	; 0x304
 800432c:	2038      	movs	r0, #56	; 0x38
 800432e:	f7fc fb0d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8004332:	2107      	movs	r1, #7
 8004334:	2039      	movs	r0, #57	; 0x39
 8004336:	f7fc fb09 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 800433a:	f240 6102 	movw	r1, #1538	; 0x602
 800433e:	203c      	movs	r0, #60	; 0x3c
 8004340:	f7fc fb04 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8004344:	2108      	movs	r1, #8
 8004346:	203d      	movs	r0, #61	; 0x3d
 8004348:	f7fc fb00 	bl	800094c <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 800434c:	2100      	movs	r1, #0
 800434e:	2050      	movs	r0, #80	; 0x50
 8004350:	f7fc fafc 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004354:	21ef      	movs	r1, #239	; 0xef
 8004356:	2051      	movs	r0, #81	; 0x51
 8004358:	f7fc faf8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800435c:	2100      	movs	r1, #0
 800435e:	2052      	movs	r0, #82	; 0x52
 8004360:	f7fc faf4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004364:	f240 113f 	movw	r1, #319	; 0x13f
 8004368:	2053      	movs	r0, #83	; 0x53
 800436a:	f7fc faef 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 800436e:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004372:	2060      	movs	r0, #96	; 0x60
 8004374:	f7fc faea 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004378:	2101      	movs	r1, #1
 800437a:	2061      	movs	r0, #97	; 0x61
 800437c:	f7fc fae6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004380:	2100      	movs	r1, #0
 8004382:	206a      	movs	r0, #106	; 0x6a
 8004384:	f7fc fae2 	bl	800094c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004388:	2100      	movs	r1, #0
 800438a:	2080      	movs	r0, #128	; 0x80
 800438c:	f7fc fade 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004390:	2100      	movs	r1, #0
 8004392:	2081      	movs	r0, #129	; 0x81
 8004394:	f7fc fada 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004398:	2100      	movs	r1, #0
 800439a:	2082      	movs	r0, #130	; 0x82
 800439c:	f7fc fad6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80043a0:	2100      	movs	r1, #0
 80043a2:	2083      	movs	r0, #131	; 0x83
 80043a4:	f7fc fad2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80043a8:	2100      	movs	r1, #0
 80043aa:	2084      	movs	r0, #132	; 0x84
 80043ac:	f7fc face 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80043b0:	2100      	movs	r1, #0
 80043b2:	2085      	movs	r0, #133	; 0x85
 80043b4:	f7fc faca 	bl	800094c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 80043b8:	2110      	movs	r1, #16
 80043ba:	2090      	movs	r0, #144	; 0x90
 80043bc:	f7fc fac6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80043c0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043c4:	2092      	movs	r0, #146	; 0x92
 80043c6:	f7fc fac1 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 80043ca:	f240 1133 	movw	r1, #307	; 0x133
 80043ce:	2007      	movs	r0, #7
 80043d0:	f7fc fabc 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 80043d4:	2122      	movs	r1, #34	; 0x22
 80043d6:	2000      	movs	r0, #0
 80043d8:	f7fc fab8 	bl	800094c <LCD_WriteReg>
 80043dc:	f001 bc3a 	b.w	8005c54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 80043e0:	4b7d      	ldr	r3, [pc, #500]	; (80045d8 <LCD_Init+0x27b8>)
 80043e2:	889b      	ldrh	r3, [r3, #4]
 80043e4:	f249 3228 	movw	r2, #37672	; 0x9328
 80043e8:	4293      	cmp	r3, r2
 80043ea:	f040 80f7 	bne.w	80045dc <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 80043ee:	f241 018f 	movw	r1, #4239	; 0x108f
 80043f2:	20ec      	movs	r0, #236	; 0xec
 80043f4:	f7fc faaa 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80043f8:	f241 2134 	movw	r1, #4660	; 0x1234
 80043fc:	20ef      	movs	r0, #239	; 0xef
 80043fe:	f7fc faa5 	bl	800094c <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8004402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004406:	2001      	movs	r0, #1
 8004408:	f7fc faa0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 800440c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004410:	2002      	movs	r0, #2
 8004412:	f7fc fa9b 	bl	800094c <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8004416:	f241 0130 	movw	r1, #4144	; 0x1030
 800441a:	2003      	movs	r0, #3
 800441c:	f7fc fa96 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004420:	2100      	movs	r1, #0
 8004422:	2004      	movs	r0, #4
 8004424:	f7fc fa92 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004428:	f240 2102 	movw	r1, #514	; 0x202
 800442c:	2008      	movs	r0, #8
 800442e:	f7fc fa8d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004432:	2100      	movs	r1, #0
 8004434:	2009      	movs	r0, #9
 8004436:	f7fc fa89 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 800443a:	2100      	movs	r1, #0
 800443c:	200a      	movs	r0, #10
 800443e:	f7fc fa85 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8004442:	2101      	movs	r1, #1
 8004444:	200c      	movs	r0, #12
 8004446:	f7fc fa81 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 800444a:	2100      	movs	r1, #0
 800444c:	200d      	movs	r0, #13
 800444e:	f7fc fa7d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8004452:	2100      	movs	r1, #0
 8004454:	200f      	movs	r0, #15
 8004456:	f7fc fa79 	bl	800094c <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 800445a:	2100      	movs	r1, #0
 800445c:	2010      	movs	r0, #16
 800445e:	f7fc fa75 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004462:	2107      	movs	r1, #7
 8004464:	2011      	movs	r0, #17
 8004466:	f7fc fa71 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800446a:	2100      	movs	r1, #0
 800446c:	2012      	movs	r0, #18
 800446e:	f7fc fa6d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004472:	2100      	movs	r1, #0
 8004474:	2013      	movs	r0, #19
 8004476:	f7fc fa69 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 800447a:	2101      	movs	r1, #1
 800447c:	2007      	movs	r0, #7
 800447e:	f7fc fa65 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50);
 8004482:	2032      	movs	r0, #50	; 0x32
 8004484:	f002 fb12 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004488:	f241 4190 	movw	r1, #5264	; 0x1490
 800448c:	2010      	movs	r0, #16
 800448e:	f7fc fa5d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004492:	f240 2127 	movw	r1, #551	; 0x227
 8004496:	2011      	movs	r0, #17
 8004498:	f7fc fa58 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50);
 800449c:	2032      	movs	r0, #50	; 0x32
 800449e:	f002 fb05 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80044a2:	218a      	movs	r1, #138	; 0x8a
 80044a4:	2012      	movs	r0, #18
 80044a6:	f7fc fa51 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50);
 80044aa:	2032      	movs	r0, #50	; 0x32
 80044ac:	f002 fafe 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80044b0:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80044b4:	2013      	movs	r0, #19
 80044b6:	f7fc fa49 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 80044ba:	2106      	movs	r1, #6
 80044bc:	2029      	movs	r0, #41	; 0x29
 80044be:	f7fc fa45 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 80044c2:	210d      	movs	r1, #13
 80044c4:	202b      	movs	r0, #43	; 0x2b
 80044c6:	f7fc fa41 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50);
 80044ca:	2032      	movs	r0, #50	; 0x32
 80044cc:	f002 faee 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 80044d0:	2100      	movs	r1, #0
 80044d2:	2020      	movs	r0, #32
 80044d4:	f7fc fa3a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80044d8:	2100      	movs	r1, #0
 80044da:	2021      	movs	r0, #33	; 0x21
 80044dc:	f7fc fa36 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50);
 80044e0:	2032      	movs	r0, #50	; 0x32
 80044e2:	f002 fae3 	bl	8006aac <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 80044e6:	2100      	movs	r1, #0
 80044e8:	2030      	movs	r0, #48	; 0x30
 80044ea:	f7fc fa2f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 80044ee:	f240 6104 	movw	r1, #1540	; 0x604
 80044f2:	2031      	movs	r0, #49	; 0x31
 80044f4:	f7fc fa2a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 80044f8:	f240 3105 	movw	r1, #773	; 0x305
 80044fc:	2032      	movs	r0, #50	; 0x32
 80044fe:	f7fc fa25 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8004502:	2100      	movs	r1, #0
 8004504:	2035      	movs	r0, #53	; 0x35
 8004506:	f7fc fa21 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 800450a:	f640 4109 	movw	r1, #3081	; 0xc09
 800450e:	2036      	movs	r0, #54	; 0x36
 8004510:	f7fc fa1c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8004514:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004518:	2037      	movs	r0, #55	; 0x37
 800451a:	f7fc fa17 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 800451e:	f240 3101 	movw	r1, #769	; 0x301
 8004522:	2038      	movs	r0, #56	; 0x38
 8004524:	f7fc fa12 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004528:	f240 7107 	movw	r1, #1799	; 0x707
 800452c:	2039      	movs	r0, #57	; 0x39
 800452e:	f7fc fa0d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8004532:	2100      	movs	r1, #0
 8004534:	203c      	movs	r0, #60	; 0x3c
 8004536:	f7fc fa09 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 800453a:	f640 210a 	movw	r1, #2570	; 0xa0a
 800453e:	203d      	movs	r0, #61	; 0x3d
 8004540:	f7fc fa04 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50);
 8004544:	2032      	movs	r0, #50	; 0x32
 8004546:	f002 fab1 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 800454a:	2100      	movs	r1, #0
 800454c:	2050      	movs	r0, #80	; 0x50
 800454e:	f7fc f9fd 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8004552:	21ef      	movs	r1, #239	; 0xef
 8004554:	2051      	movs	r0, #81	; 0x51
 8004556:	f7fc f9f9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 800455a:	2100      	movs	r1, #0
 800455c:	2052      	movs	r0, #82	; 0x52
 800455e:	f7fc f9f5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8004562:	f240 113f 	movw	r1, #319	; 0x13f
 8004566:	2053      	movs	r0, #83	; 0x53
 8004568:	f7fc f9f0 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 800456c:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004570:	2060      	movs	r0, #96	; 0x60
 8004572:	f7fc f9eb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004576:	2101      	movs	r1, #1
 8004578:	2061      	movs	r0, #97	; 0x61
 800457a:	f7fc f9e7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800457e:	2100      	movs	r1, #0
 8004580:	206a      	movs	r0, #106	; 0x6a
 8004582:	f7fc f9e3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004586:	2100      	movs	r1, #0
 8004588:	2080      	movs	r0, #128	; 0x80
 800458a:	f7fc f9df 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 800458e:	2100      	movs	r1, #0
 8004590:	2081      	movs	r0, #129	; 0x81
 8004592:	f7fc f9db 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004596:	2100      	movs	r1, #0
 8004598:	2082      	movs	r0, #130	; 0x82
 800459a:	f7fc f9d7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800459e:	2100      	movs	r1, #0
 80045a0:	2083      	movs	r0, #131	; 0x83
 80045a2:	f7fc f9d3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80045a6:	2100      	movs	r1, #0
 80045a8:	2084      	movs	r0, #132	; 0x84
 80045aa:	f7fc f9cf 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80045ae:	2100      	movs	r1, #0
 80045b0:	2085      	movs	r0, #133	; 0x85
 80045b2:	f7fc f9cb 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80045b6:	2110      	movs	r1, #16
 80045b8:	2090      	movs	r0, #144	; 0x90
 80045ba:	f7fc f9c7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80045be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045c2:	2092      	movs	r0, #146	; 0x92
 80045c4:	f7fc f9c2 	bl	800094c <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 80045c8:	f240 1133 	movw	r1, #307	; 0x133
 80045cc:	2007      	movs	r0, #7
 80045ce:	f7fc f9bd 	bl	800094c <LCD_WriteReg>
 80045d2:	f001 bb3f 	b.w	8005c54 <LCD_Init+0x3e34>
 80045d6:	bf00      	nop
 80045d8:	20009ce0 	.word	0x20009ce0
	} else if (lcddev.id == 0x9320) //测试OK.
 80045dc:	4bce      	ldr	r3, [pc, #824]	; (8004918 <LCD_Init+0x2af8>)
 80045de:	889b      	ldrh	r3, [r3, #4]
 80045e0:	f249 3220 	movw	r2, #37664	; 0x9320
 80045e4:	4293      	cmp	r3, r2
 80045e6:	f040 80ad 	bne.w	8004744 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 80045ea:	2100      	movs	r1, #0
 80045ec:	2000      	movs	r0, #0
 80045ee:	f7fc f9ad 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 80045f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045f6:	2001      	movs	r0, #1
 80045f8:	f7fc f9a8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80045fc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004600:	2002      	movs	r0, #2
 8004602:	f7fc f9a3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8004606:	f241 0130 	movw	r1, #4144	; 0x1030
 800460a:	2003      	movs	r0, #3
 800460c:	f7fc f99e 	bl	800094c <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004610:	2100      	movs	r1, #0
 8004612:	2004      	movs	r0, #4
 8004614:	f7fc f99a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004618:	f240 2102 	movw	r1, #514	; 0x202
 800461c:	2008      	movs	r0, #8
 800461e:	f7fc f995 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8004622:	2100      	movs	r1, #0
 8004624:	2009      	movs	r0, #9
 8004626:	f7fc f991 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 800462a:	2100      	movs	r1, #0
 800462c:	200a      	movs	r0, #10
 800462e:	f7fc f98d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8004632:	2101      	movs	r1, #1
 8004634:	200c      	movs	r0, #12
 8004636:	f7fc f989 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 800463a:	2100      	movs	r1, #0
 800463c:	200d      	movs	r0, #13
 800463e:	f7fc f985 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8004642:	2100      	movs	r1, #0
 8004644:	200f      	movs	r0, #15
 8004646:	f7fc f981 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50);
 800464a:	2032      	movs	r0, #50	; 0x32
 800464c:	f002 fa2e 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004650:	f240 1101 	movw	r1, #257	; 0x101
 8004654:	2007      	movs	r0, #7
 8004656:	f7fc f979 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50);
 800465a:	2032      	movs	r0, #50	; 0x32
 800465c:	f002 fa26 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004660:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004664:	2010      	movs	r0, #16
 8004666:	f7fc f971 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 800466a:	2107      	movs	r1, #7
 800466c:	2011      	movs	r0, #17
 800466e:	f7fc f96d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8004672:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004676:	2012      	movs	r0, #18
 8004678:	f7fc f968 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 800467c:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004680:	2013      	movs	r0, #19
 8004682:	f7fc f963 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8004686:	2100      	movs	r1, #0
 8004688:	2029      	movs	r0, #41	; 0x29
 800468a:	f7fc f95f 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 800468e:	f244 0110 	movw	r1, #16400	; 0x4010
 8004692:	202b      	movs	r0, #43	; 0x2b
 8004694:	f7fc f95a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004698:	2100      	movs	r1, #0
 800469a:	2050      	movs	r0, #80	; 0x50
 800469c:	f7fc f956 	bl	800094c <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80046a0:	21ef      	movs	r1, #239	; 0xef
 80046a2:	2051      	movs	r0, #81	; 0x51
 80046a4:	f7fc f952 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 80046a8:	2100      	movs	r1, #0
 80046aa:	2052      	movs	r0, #82	; 0x52
 80046ac:	f7fc f94e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80046b0:	f240 113f 	movw	r1, #319	; 0x13f
 80046b4:	2053      	movs	r0, #83	; 0x53
 80046b6:	f7fc f949 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 80046ba:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80046be:	2060      	movs	r0, #96	; 0x60
 80046c0:	f7fc f944 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 80046c4:	2101      	movs	r1, #1
 80046c6:	2061      	movs	r0, #97	; 0x61
 80046c8:	f7fc f940 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 80046cc:	2100      	movs	r1, #0
 80046ce:	206a      	movs	r0, #106	; 0x6a
 80046d0:	f7fc f93c 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 80046d4:	2100      	movs	r1, #0
 80046d6:	2080      	movs	r0, #128	; 0x80
 80046d8:	f7fc f938 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 80046dc:	2100      	movs	r1, #0
 80046de:	2081      	movs	r0, #129	; 0x81
 80046e0:	f7fc f934 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 80046e4:	2100      	movs	r1, #0
 80046e6:	2082      	movs	r0, #130	; 0x82
 80046e8:	f7fc f930 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 80046ec:	2100      	movs	r1, #0
 80046ee:	2083      	movs	r0, #131	; 0x83
 80046f0:	f7fc f92c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 80046f4:	2100      	movs	r1, #0
 80046f6:	2084      	movs	r0, #132	; 0x84
 80046f8:	f7fc f928 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 80046fc:	2100      	movs	r1, #0
 80046fe:	2085      	movs	r0, #133	; 0x85
 8004700:	f7fc f924 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8004704:	2110      	movs	r1, #16
 8004706:	2090      	movs	r0, #144	; 0x90
 8004708:	f7fc f920 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 800470c:	2100      	movs	r1, #0
 800470e:	2092      	movs	r0, #146	; 0x92
 8004710:	f7fc f91c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8004714:	2101      	movs	r1, #1
 8004716:	2093      	movs	r0, #147	; 0x93
 8004718:	f7fc f918 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 800471c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004720:	2095      	movs	r0, #149	; 0x95
 8004722:	f7fc f913 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004726:	2100      	movs	r1, #0
 8004728:	2097      	movs	r0, #151	; 0x97
 800472a:	f7fc f90f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 800472e:	2100      	movs	r1, #0
 8004730:	2098      	movs	r0, #152	; 0x98
 8004732:	f7fc f90b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004736:	f240 1173 	movw	r1, #371	; 0x173
 800473a:	2007      	movs	r0, #7
 800473c:	f7fc f906 	bl	800094c <LCD_WriteReg>
 8004740:	f001 ba88 	b.w	8005c54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004744:	4b74      	ldr	r3, [pc, #464]	; (8004918 <LCD_Init+0x2af8>)
 8004746:	889b      	ldrh	r3, [r3, #4]
 8004748:	f249 3231 	movw	r2, #37681	; 0x9331
 800474c:	4293      	cmp	r3, r2
 800474e:	f040 80e5 	bne.w	800491c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004752:	f241 0114 	movw	r1, #4116	; 0x1014
 8004756:	20e7      	movs	r0, #231	; 0xe7
 8004758:	f7fc f8f8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 800475c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004760:	2001      	movs	r0, #1
 8004762:	f7fc f8f3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004766:	f44f 7100 	mov.w	r1, #512	; 0x200
 800476a:	2002      	movs	r0, #2
 800476c:	f7fc f8ee 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004770:	f241 0138 	movw	r1, #4152	; 0x1038
 8004774:	2003      	movs	r0, #3
 8004776:	f7fc f8e9 	bl	800094c <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 800477a:	f240 2102 	movw	r1, #514	; 0x202
 800477e:	2008      	movs	r0, #8
 8004780:	f7fc f8e4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004784:	2100      	movs	r1, #0
 8004786:	2009      	movs	r0, #9
 8004788:	f7fc f8e0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 800478c:	2100      	movs	r1, #0
 800478e:	200a      	movs	r0, #10
 8004790:	f7fc f8dc 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004794:	2100      	movs	r1, #0
 8004796:	200c      	movs	r0, #12
 8004798:	f7fc f8d8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 800479c:	2100      	movs	r1, #0
 800479e:	200d      	movs	r0, #13
 80047a0:	f7fc f8d4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80047a4:	2100      	movs	r1, #0
 80047a6:	200f      	movs	r0, #15
 80047a8:	f7fc f8d0 	bl	800094c <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80047ac:	2100      	movs	r1, #0
 80047ae:	2010      	movs	r0, #16
 80047b0:	f7fc f8cc 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80047b4:	2107      	movs	r1, #7
 80047b6:	2011      	movs	r0, #17
 80047b8:	f7fc f8c8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 80047bc:	2100      	movs	r1, #0
 80047be:	2012      	movs	r0, #18
 80047c0:	f7fc f8c4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 80047c4:	2100      	movs	r1, #0
 80047c6:	2013      	movs	r0, #19
 80047c8:	f7fc f8c0 	bl	800094c <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 80047cc:	20c8      	movs	r0, #200	; 0xc8
 80047ce:	f002 f96d 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80047d2:	f241 6190 	movw	r1, #5776	; 0x1690
 80047d6:	2010      	movs	r0, #16
 80047d8:	f7fc f8b8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 80047dc:	f240 2127 	movw	r1, #551	; 0x227
 80047e0:	2011      	movs	r0, #17
 80047e2:	f7fc f8b3 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80047e6:	2032      	movs	r0, #50	; 0x32
 80047e8:	f002 f960 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 80047ec:	210c      	movs	r1, #12
 80047ee:	2012      	movs	r0, #18
 80047f0:	f7fc f8ac 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80047f4:	2032      	movs	r0, #50	; 0x32
 80047f6:	f002 f959 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 80047fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047fe:	2013      	movs	r0, #19
 8004800:	f7fc f8a4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004804:	2111      	movs	r1, #17
 8004806:	2029      	movs	r0, #41	; 0x29
 8004808:	f7fc f8a0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 800480c:	210b      	movs	r1, #11
 800480e:	202b      	movs	r0, #43	; 0x2b
 8004810:	f7fc f89c 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004814:	2032      	movs	r0, #50	; 0x32
 8004816:	f002 f949 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 800481a:	2100      	movs	r1, #0
 800481c:	2020      	movs	r0, #32
 800481e:	f7fc f895 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004822:	f240 113f 	movw	r1, #319	; 0x13f
 8004826:	2021      	movs	r0, #33	; 0x21
 8004828:	f7fc f890 	bl	800094c <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 800482c:	2100      	movs	r1, #0
 800482e:	2030      	movs	r0, #48	; 0x30
 8004830:	f7fc f88c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004834:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004838:	2031      	movs	r0, #49	; 0x31
 800483a:	f7fc f887 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 800483e:	2100      	movs	r1, #0
 8004840:	2032      	movs	r0, #50	; 0x32
 8004842:	f7fc f883 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004846:	f44f 7101 	mov.w	r1, #516	; 0x204
 800484a:	2035      	movs	r0, #53	; 0x35
 800484c:	f7fc f87e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004850:	f241 610a 	movw	r1, #5642	; 0x160a
 8004854:	2036      	movs	r0, #54	; 0x36
 8004856:	f7fc f879 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 800485a:	f240 7107 	movw	r1, #1799	; 0x707
 800485e:	2037      	movs	r0, #55	; 0x37
 8004860:	f7fc f874 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004864:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004868:	2038      	movs	r0, #56	; 0x38
 800486a:	f7fc f86f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 800486e:	f240 7107 	movw	r1, #1799	; 0x707
 8004872:	2039      	movs	r0, #57	; 0x39
 8004874:	f7fc f86a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004878:	f240 4102 	movw	r1, #1026	; 0x402
 800487c:	203c      	movs	r0, #60	; 0x3c
 800487e:	f7fc f865 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004882:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004886:	203d      	movs	r0, #61	; 0x3d
 8004888:	f7fc f860 	bl	800094c <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 800488c:	2100      	movs	r1, #0
 800488e:	2050      	movs	r0, #80	; 0x50
 8004890:	f7fc f85c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004894:	21ef      	movs	r1, #239	; 0xef
 8004896:	2051      	movs	r0, #81	; 0x51
 8004898:	f7fc f858 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 800489c:	2100      	movs	r1, #0
 800489e:	2052      	movs	r0, #82	; 0x52
 80048a0:	f7fc f854 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 80048a4:	f240 113f 	movw	r1, #319	; 0x13f
 80048a8:	2053      	movs	r0, #83	; 0x53
 80048aa:	f7fc f84f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 80048ae:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80048b2:	2060      	movs	r0, #96	; 0x60
 80048b4:	f7fc f84a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 80048b8:	2101      	movs	r1, #1
 80048ba:	2061      	movs	r0, #97	; 0x61
 80048bc:	f7fc f846 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 80048c0:	2100      	movs	r1, #0
 80048c2:	206a      	movs	r0, #106	; 0x6a
 80048c4:	f7fc f842 	bl	800094c <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 80048c8:	2100      	movs	r1, #0
 80048ca:	2080      	movs	r0, #128	; 0x80
 80048cc:	f7fc f83e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80048d0:	2100      	movs	r1, #0
 80048d2:	2081      	movs	r0, #129	; 0x81
 80048d4:	f7fc f83a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80048d8:	2100      	movs	r1, #0
 80048da:	2082      	movs	r0, #130	; 0x82
 80048dc:	f7fc f836 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80048e0:	2100      	movs	r1, #0
 80048e2:	2083      	movs	r0, #131	; 0x83
 80048e4:	f7fc f832 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80048e8:	2100      	movs	r1, #0
 80048ea:	2084      	movs	r0, #132	; 0x84
 80048ec:	f7fc f82e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80048f0:	2100      	movs	r1, #0
 80048f2:	2085      	movs	r0, #133	; 0x85
 80048f4:	f7fc f82a 	bl	800094c <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 80048f8:	2110      	movs	r1, #16
 80048fa:	2090      	movs	r0, #144	; 0x90
 80048fc:	f7fc f826 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004900:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004904:	2092      	movs	r0, #146	; 0x92
 8004906:	f7fc f821 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 800490a:	f240 1133 	movw	r1, #307	; 0x133
 800490e:	2007      	movs	r0, #7
 8004910:	f7fc f81c 	bl	800094c <LCD_WriteReg>
 8004914:	f001 b99e 	b.w	8005c54 <LCD_Init+0x3e34>
 8004918:	20009ce0 	.word	0x20009ce0
	} else if (lcddev.id == 0x5408) {
 800491c:	4be2      	ldr	r3, [pc, #904]	; (8004ca8 <LCD_Init+0x2e88>)
 800491e:	889b      	ldrh	r3, [r3, #4]
 8004920:	f245 4208 	movw	r2, #21512	; 0x5408
 8004924:	4293      	cmp	r3, r2
 8004926:	f040 80a3 	bne.w	8004a70 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 800492a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800492e:	2001      	movs	r0, #1
 8004930:	f7fc f80c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004934:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004938:	2002      	movs	r0, #2
 800493a:	f7fc f807 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 800493e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004942:	2003      	movs	r0, #3
 8004944:	f7fc f802 	bl	800094c <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004948:	2100      	movs	r1, #0
 800494a:	2004      	movs	r0, #4
 800494c:	f7fb fffe 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004950:	f240 2107 	movw	r1, #519	; 0x207
 8004954:	2008      	movs	r0, #8
 8004956:	f7fb fff9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 800495a:	2100      	movs	r1, #0
 800495c:	2009      	movs	r0, #9
 800495e:	f7fb fff5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004962:	2100      	movs	r1, #0
 8004964:	200a      	movs	r0, #10
 8004966:	f7fb fff1 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 800496a:	2100      	movs	r1, #0
 800496c:	200c      	movs	r0, #12
 800496e:	f7fb ffed 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004972:	2100      	movs	r1, #0
 8004974:	200d      	movs	r0, #13
 8004976:	f7fb ffe9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 800497a:	2100      	movs	r1, #0
 800497c:	200f      	movs	r0, #15
 800497e:	f7fb ffe5 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 8004982:	2014      	movs	r0, #20
 8004984:	f002 f892 	bl	8006aac <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004988:	f241 61b0 	movw	r1, #5808	; 0x16b0
 800498c:	2010      	movs	r0, #16
 800498e:	f7fb ffdd 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004992:	2101      	movs	r1, #1
 8004994:	2011      	movs	r0, #17
 8004996:	f7fb ffd9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 800499a:	2101      	movs	r1, #1
 800499c:	2017      	movs	r0, #23
 800499e:	f7fb ffd5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 80049a2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80049a6:	2012      	movs	r0, #18
 80049a8:	f7fb ffd0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 80049ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80049b0:	2013      	movs	r0, #19
 80049b2:	f7fb ffcb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 80049b6:	2109      	movs	r1, #9
 80049b8:	2029      	movs	r0, #41	; 0x29
 80049ba:	f7fb ffc7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 80049be:	2109      	movs	r1, #9
 80049c0:	202a      	movs	r0, #42	; 0x2a
 80049c2:	f7fb ffc3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 80049c6:	2100      	movs	r1, #0
 80049c8:	20a4      	movs	r0, #164	; 0xa4
 80049ca:	f7fb ffbf 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 80049ce:	2100      	movs	r1, #0
 80049d0:	2050      	movs	r0, #80	; 0x50
 80049d2:	f7fb ffbb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 80049d6:	21ef      	movs	r1, #239	; 0xef
 80049d8:	2051      	movs	r0, #81	; 0x51
 80049da:	f7fb ffb7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 80049de:	2100      	movs	r1, #0
 80049e0:	2052      	movs	r0, #82	; 0x52
 80049e2:	f7fb ffb3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 80049e6:	f240 113f 	movw	r1, #319	; 0x13f
 80049ea:	2053      	movs	r0, #83	; 0x53
 80049ec:	f7fb ffae 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 80049f0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80049f4:	2060      	movs	r0, #96	; 0x60
 80049f6:	f7fb ffa9 	bl	800094c <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 80049fa:	2101      	movs	r1, #1
 80049fc:	2061      	movs	r0, #97	; 0x61
 80049fe:	f7fb ffa5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004a02:	2100      	movs	r1, #0
 8004a04:	206a      	movs	r0, #106	; 0x6a
 8004a06:	f7fb ffa1 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	2080      	movs	r0, #128	; 0x80
 8004a0e:	f7fb ff9d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004a12:	2100      	movs	r1, #0
 8004a14:	2081      	movs	r0, #129	; 0x81
 8004a16:	f7fb ff99 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	2082      	movs	r0, #130	; 0x82
 8004a1e:	f7fb ff95 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004a22:	2100      	movs	r1, #0
 8004a24:	2083      	movs	r0, #131	; 0x83
 8004a26:	f7fb ff91 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	2084      	movs	r0, #132	; 0x84
 8004a2e:	f7fb ff8d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004a32:	2100      	movs	r1, #0
 8004a34:	2085      	movs	r0, #133	; 0x85
 8004a36:	f7fb ff89 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004a3a:	2113      	movs	r1, #19
 8004a3c:	2090      	movs	r0, #144	; 0x90
 8004a3e:	f7fb ff85 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004a42:	2100      	movs	r1, #0
 8004a44:	2092      	movs	r0, #146	; 0x92
 8004a46:	f7fb ff81 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004a4a:	2103      	movs	r1, #3
 8004a4c:	2093      	movs	r0, #147	; 0x93
 8004a4e:	f7fb ff7d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004a52:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004a56:	2095      	movs	r0, #149	; 0x95
 8004a58:	f7fb ff78 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004a5c:	f240 1173 	movw	r1, #371	; 0x173
 8004a60:	2007      	movs	r0, #7
 8004a62:	f7fb ff73 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50);
 8004a66:	2032      	movs	r0, #50	; 0x32
 8004a68:	f002 f820 	bl	8006aac <HAL_Delay>
 8004a6c:	f001 b8f2 	b.w	8005c54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004a70:	4b8d      	ldr	r3, [pc, #564]	; (8004ca8 <LCD_Init+0x2e88>)
 8004a72:	889b      	ldrh	r3, [r3, #4]
 8004a74:	f241 5205 	movw	r2, #5381	; 0x1505
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	f040 8117 	bne.w	8004cac <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004a7e:	2100      	movs	r1, #0
 8004a80:	2007      	movs	r0, #7
 8004a82:	f7fb ff63 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50);
 8004a86:	2032      	movs	r0, #50	; 0x32
 8004a88:	f002 f810 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004a8c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004a90:	2012      	movs	r0, #18
 8004a92:	f7fb ff5b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004a96:	2101      	movs	r1, #1
 8004a98:	20a4      	movs	r0, #164	; 0xa4
 8004a9a:	f7fb ff57 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004a9e:	210f      	movs	r1, #15
 8004aa0:	2008      	movs	r0, #8
 8004aa2:	f7fb ff53 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004aa6:	2108      	movs	r1, #8
 8004aa8:	200a      	movs	r0, #10
 8004aaa:	f7fb ff4f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004aae:	2108      	movs	r1, #8
 8004ab0:	200d      	movs	r0, #13
 8004ab2:	f7fb ff4b 	bl	800094c <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004ab6:	f240 7107 	movw	r1, #1799	; 0x707
 8004aba:	2030      	movs	r0, #48	; 0x30
 8004abc:	f7fb ff46 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004ac0:	2107      	movs	r1, #7
 8004ac2:	2031      	movs	r0, #49	; 0x31
 8004ac4:	f7fb ff42 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004ac8:	f240 6103 	movw	r1, #1539	; 0x603
 8004acc:	2032      	movs	r0, #50	; 0x32
 8004ace:	f7fb ff3d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004ad2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004ad6:	2033      	movs	r0, #51	; 0x33
 8004ad8:	f7fb ff38 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004adc:	f240 2102 	movw	r1, #514	; 0x202
 8004ae0:	2034      	movs	r0, #52	; 0x34
 8004ae2:	f7fb ff33 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004ae6:	2102      	movs	r1, #2
 8004ae8:	2035      	movs	r0, #53	; 0x35
 8004aea:	f7fb ff2f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004aee:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004af2:	2036      	movs	r0, #54	; 0x36
 8004af4:	f7fb ff2a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004af8:	f240 7107 	movw	r1, #1799	; 0x707
 8004afc:	2037      	movs	r0, #55	; 0x37
 8004afe:	f7fb ff25 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004b02:	2100      	movs	r1, #0
 8004b04:	2038      	movs	r0, #56	; 0x38
 8004b06:	f7fb ff21 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	2039      	movs	r0, #57	; 0x39
 8004b0e:	f7fb ff1d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004b12:	f240 7107 	movw	r1, #1799	; 0x707
 8004b16:	203a      	movs	r0, #58	; 0x3a
 8004b18:	f7fb ff18 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	203b      	movs	r0, #59	; 0x3b
 8004b20:	f7fb ff14 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004b24:	2107      	movs	r1, #7
 8004b26:	203c      	movs	r0, #60	; 0x3c
 8004b28:	f7fb ff10 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	203d      	movs	r0, #61	; 0x3d
 8004b30:	f7fb ff0c 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50);
 8004b34:	2032      	movs	r0, #50	; 0x32
 8004b36:	f001 ffb9 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	2007      	movs	r0, #7
 8004b3e:	f7fb ff05 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004b42:	2101      	movs	r1, #1
 8004b44:	2017      	movs	r0, #23
 8004b46:	f7fb ff01 	bl	800094c <LCD_WriteReg>
		HAL_Delay(50);
 8004b4a:	2032      	movs	r0, #50	; 0x32
 8004b4c:	f001 ffae 	bl	8006aac <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004b50:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004b54:	2010      	movs	r0, #16
 8004b56:	f7fb fef9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004b5a:	f240 2117 	movw	r1, #535	; 0x217
 8004b5e:	2011      	movs	r0, #17
 8004b60:	f7fb fef4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004b64:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004b68:	2012      	movs	r0, #18
 8004b6a:	f7fb feef 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004b6e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004b72:	2013      	movs	r0, #19
 8004b74:	f7fb feea 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004b78:	2100      	movs	r1, #0
 8004b7a:	202a      	movs	r0, #42	; 0x2a
 8004b7c:	f7fb fee6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004b80:	210a      	movs	r1, #10
 8004b82:	2029      	movs	r0, #41	; 0x29
 8004b84:	f7fb fee2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004b88:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004b8c:	2012      	movs	r0, #18
 8004b8e:	f7fb fedd 	bl	800094c <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004b92:	2100      	movs	r1, #0
 8004b94:	2050      	movs	r0, #80	; 0x50
 8004b96:	f7fb fed9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004b9a:	21ef      	movs	r1, #239	; 0xef
 8004b9c:	2051      	movs	r0, #81	; 0x51
 8004b9e:	f7fb fed5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	2052      	movs	r0, #82	; 0x52
 8004ba6:	f7fb fed1 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004baa:	f240 113f 	movw	r1, #319	; 0x13f
 8004bae:	2053      	movs	r0, #83	; 0x53
 8004bb0:	f7fb fecc 	bl	800094c <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004bb4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004bb8:	2060      	movs	r0, #96	; 0x60
 8004bba:	f7fb fec7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	2061      	movs	r0, #97	; 0x61
 8004bc2:	f7fb fec3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	206a      	movs	r0, #106	; 0x6a
 8004bca:	f7fb febf 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004bce:	2100      	movs	r1, #0
 8004bd0:	2080      	movs	r0, #128	; 0x80
 8004bd2:	f7fb febb 	bl	800094c <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	2081      	movs	r0, #129	; 0x81
 8004bda:	f7fb feb7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004bde:	2100      	movs	r1, #0
 8004be0:	2082      	movs	r0, #130	; 0x82
 8004be2:	f7fb feb3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004be6:	2100      	movs	r1, #0
 8004be8:	2083      	movs	r0, #131	; 0x83
 8004bea:	f7fb feaf 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004bee:	2100      	movs	r1, #0
 8004bf0:	2084      	movs	r0, #132	; 0x84
 8004bf2:	f7fb feab 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	2085      	movs	r0, #133	; 0x85
 8004bfa:	f7fb fea7 	bl	800094c <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004bfe:	2113      	movs	r1, #19
 8004c00:	2090      	movs	r0, #144	; 0x90
 8004c02:	f7fb fea3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004c06:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004c0a:	2092      	movs	r0, #146	; 0x92
 8004c0c:	f7fb fe9e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004c10:	2105      	movs	r1, #5
 8004c12:	2093      	movs	r0, #147	; 0x93
 8004c14:	f7fb fe9a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004c18:	2100      	movs	r1, #0
 8004c1a:	2095      	movs	r0, #149	; 0x95
 8004c1c:	f7fb fe96 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004c20:	2100      	movs	r1, #0
 8004c22:	2097      	movs	r0, #151	; 0x97
 8004c24:	f7fb fe92 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004c28:	2100      	movs	r1, #0
 8004c2a:	2098      	movs	r0, #152	; 0x98
 8004c2c:	f7fb fe8e 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c34:	2001      	movs	r0, #1
 8004c36:	f7fb fe89 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004c3a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004c3e:	2002      	movs	r0, #2
 8004c40:	f7fb fe84 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004c44:	f241 0138 	movw	r1, #4152	; 0x1038
 8004c48:	2003      	movs	r0, #3
 8004c4a:	f7fb fe7f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004c4e:	2100      	movs	r1, #0
 8004c50:	2004      	movs	r0, #4
 8004c52:	f7fb fe7b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004c56:	2100      	movs	r1, #0
 8004c58:	200c      	movs	r0, #12
 8004c5a:	f7fb fe77 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004c5e:	2100      	movs	r1, #0
 8004c60:	200f      	movs	r0, #15
 8004c62:	f7fb fe73 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004c66:	2100      	movs	r1, #0
 8004c68:	2020      	movs	r0, #32
 8004c6a:	f7fb fe6f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004c6e:	2100      	movs	r1, #0
 8004c70:	2021      	movs	r0, #33	; 0x21
 8004c72:	f7fb fe6b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004c76:	2121      	movs	r1, #33	; 0x21
 8004c78:	2007      	movs	r0, #7
 8004c7a:	f7fb fe67 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 8004c7e:	2014      	movs	r0, #20
 8004c80:	f001 ff14 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004c84:	2161      	movs	r1, #97	; 0x61
 8004c86:	2007      	movs	r0, #7
 8004c88:	f7fb fe60 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 8004c8c:	2014      	movs	r0, #20
 8004c8e:	f001 ff0d 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004c92:	f240 1173 	movw	r1, #371	; 0x173
 8004c96:	2007      	movs	r0, #7
 8004c98:	f7fb fe58 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 8004c9c:	2014      	movs	r0, #20
 8004c9e:	f001 ff05 	bl	8006aac <HAL_Delay>
 8004ca2:	f000 bfd7 	b.w	8005c54 <LCD_Init+0x3e34>
 8004ca6:	bf00      	nop
 8004ca8:	20009ce0 	.word	0x20009ce0
	} else if (lcddev.id == 0xB505) {
 8004cac:	4bf0      	ldr	r3, [pc, #960]	; (8005070 <LCD_Init+0x3250>)
 8004cae:	889b      	ldrh	r3, [r3, #4]
 8004cb0:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	f040 8103 	bne.w	8004ec0 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004cba:	2100      	movs	r1, #0
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	f7fb fe45 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f7fb fe41 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004cca:	2100      	movs	r1, #0
 8004ccc:	2000      	movs	r0, #0
 8004cce:	f7fb fe3d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f7fb fe39 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004cda:	2101      	movs	r1, #1
 8004cdc:	20a4      	movs	r0, #164	; 0xa4
 8004cde:	f7fb fe35 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 8004ce2:	2014      	movs	r0, #20
 8004ce4:	f001 fee2 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004ce8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004cec:	2060      	movs	r0, #96	; 0x60
 8004cee:	f7fb fe2d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004cf2:	f240 2102 	movw	r1, #514	; 0x202
 8004cf6:	2008      	movs	r0, #8
 8004cf8:	f7fb fe28 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004cfc:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004d00:	2030      	movs	r0, #48	; 0x30
 8004d02:	f7fb fe23 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004d06:	f243 7115 	movw	r1, #14101	; 0x3715
 8004d0a:	2031      	movs	r0, #49	; 0x31
 8004d0c:	f7fb fe1e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004d10:	f240 6104 	movw	r1, #1540	; 0x604
 8004d14:	2032      	movs	r0, #50	; 0x32
 8004d16:	f7fb fe19 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004d1a:	f640 6116 	movw	r1, #3606	; 0xe16
 8004d1e:	2033      	movs	r0, #51	; 0x33
 8004d20:	f7fb fe14 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004d24:	f242 2111 	movw	r1, #8721	; 0x2211
 8004d28:	2034      	movs	r0, #52	; 0x34
 8004d2a:	f7fb fe0f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004d2e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004d32:	2035      	movs	r0, #53	; 0x35
 8004d34:	f7fb fe0a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004d38:	f248 5107 	movw	r1, #34055	; 0x8507
 8004d3c:	2036      	movs	r0, #54	; 0x36
 8004d3e:	f7fb fe05 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004d42:	f241 4107 	movw	r1, #5127	; 0x1407
 8004d46:	2037      	movs	r0, #55	; 0x37
 8004d48:	f7fb fe00 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004d4c:	f241 4103 	movw	r1, #5123	; 0x1403
 8004d50:	2038      	movs	r0, #56	; 0x38
 8004d52:	f7fb fdfb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004d56:	2120      	movs	r1, #32
 8004d58:	2039      	movs	r0, #57	; 0x39
 8004d5a:	f7fb fdf7 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004d5e:	211a      	movs	r1, #26
 8004d60:	2090      	movs	r0, #144	; 0x90
 8004d62:	f7fb fdf3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004d66:	2100      	movs	r1, #0
 8004d68:	2010      	movs	r0, #16
 8004d6a:	f7fb fdef 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004d6e:	2107      	movs	r1, #7
 8004d70:	2011      	movs	r0, #17
 8004d72:	f7fb fdeb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004d76:	2100      	movs	r1, #0
 8004d78:	2012      	movs	r0, #18
 8004d7a:	f7fb fde7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004d7e:	2100      	movs	r1, #0
 8004d80:	2013      	movs	r0, #19
 8004d82:	f7fb fde3 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 8004d86:	2014      	movs	r0, #20
 8004d88:	f001 fe90 	bl	8006aac <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004d8c:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004d90:	2010      	movs	r0, #16
 8004d92:	f7fb fddb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004d96:	f240 1137 	movw	r1, #311	; 0x137
 8004d9a:	2011      	movs	r0, #17
 8004d9c:	f7fb fdd6 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 8004da0:	2014      	movs	r0, #20
 8004da2:	f001 fe83 	bl	8006aac <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004da6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004daa:	2012      	movs	r0, #18
 8004dac:	f7fb fdce 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 8004db0:	2014      	movs	r0, #20
 8004db2:	f001 fe7b 	bl	8006aac <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004db6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004dba:	2013      	movs	r0, #19
 8004dbc:	f7fb fdc6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004dc0:	2180      	movs	r1, #128	; 0x80
 8004dc2:	202a      	movs	r0, #42	; 0x2a
 8004dc4:	f7fb fdc2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004dc8:	2148      	movs	r1, #72	; 0x48
 8004dca:	2029      	movs	r0, #41	; 0x29
 8004dcc:	f7fb fdbe 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 8004dd0:	2014      	movs	r0, #20
 8004dd2:	f001 fe6b 	bl	8006aac <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dda:	2001      	movs	r0, #1
 8004ddc:	f7fb fdb6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004de0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004de4:	2002      	movs	r0, #2
 8004de6:	f7fb fdb1 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004dea:	f241 0138 	movw	r1, #4152	; 0x1038
 8004dee:	2003      	movs	r0, #3
 8004df0:	f7fb fdac 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004df4:	f240 2102 	movw	r1, #514	; 0x202
 8004df8:	2008      	movs	r0, #8
 8004dfa:	f7fb fda7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004dfe:	2100      	movs	r1, #0
 8004e00:	200a      	movs	r0, #10
 8004e02:	f7fb fda3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004e06:	2100      	movs	r1, #0
 8004e08:	200c      	movs	r0, #12
 8004e0a:	f7fb fd9f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004e0e:	2100      	movs	r1, #0
 8004e10:	200d      	movs	r0, #13
 8004e12:	f7fb fd9b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004e16:	2130      	movs	r1, #48	; 0x30
 8004e18:	200e      	movs	r0, #14
 8004e1a:	f7fb fd97 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004e1e:	2100      	movs	r1, #0
 8004e20:	2050      	movs	r0, #80	; 0x50
 8004e22:	f7fb fd93 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004e26:	21ef      	movs	r1, #239	; 0xef
 8004e28:	2051      	movs	r0, #81	; 0x51
 8004e2a:	f7fb fd8f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004e2e:	2100      	movs	r1, #0
 8004e30:	2052      	movs	r0, #82	; 0x52
 8004e32:	f7fb fd8b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004e36:	f240 113f 	movw	r1, #319	; 0x13f
 8004e3a:	2053      	movs	r0, #83	; 0x53
 8004e3c:	f7fb fd86 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004e40:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004e44:	2060      	movs	r0, #96	; 0x60
 8004e46:	f7fb fd81 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	2061      	movs	r0, #97	; 0x61
 8004e4e:	f7fb fd7d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004e52:	2100      	movs	r1, #0
 8004e54:	206a      	movs	r0, #106	; 0x6a
 8004e56:	f7fb fd79 	bl	800094c <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004e5a:	2111      	movs	r1, #17
 8004e5c:	2090      	movs	r0, #144	; 0x90
 8004e5e:	f7fb fd75 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004e62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e66:	2092      	movs	r0, #146	; 0x92
 8004e68:	f7fb fd70 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004e6c:	f240 4102 	movw	r1, #1026	; 0x402
 8004e70:	2093      	movs	r0, #147	; 0x93
 8004e72:	f7fb fd6b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004e76:	2102      	movs	r1, #2
 8004e78:	2094      	movs	r0, #148	; 0x94
 8004e7a:	f7fb fd67 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 8004e7e:	2014      	movs	r0, #20
 8004e80:	f001 fe14 	bl	8006aac <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004e84:	2101      	movs	r1, #1
 8004e86:	2007      	movs	r0, #7
 8004e88:	f7fb fd60 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 8004e8c:	2014      	movs	r0, #20
 8004e8e:	f001 fe0d 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004e92:	2161      	movs	r1, #97	; 0x61
 8004e94:	2007      	movs	r0, #7
 8004e96:	f7fb fd59 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004e9a:	f240 1173 	movw	r1, #371	; 0x173
 8004e9e:	2007      	movs	r0, #7
 8004ea0:	f7fb fd54 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	2020      	movs	r0, #32
 8004ea8:	f7fb fd50 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004eac:	2100      	movs	r1, #0
 8004eae:	2021      	movs	r0, #33	; 0x21
 8004eb0:	f7fb fd4c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004eb4:	2122      	movs	r1, #34	; 0x22
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	f7fb fd48 	bl	800094c <LCD_WriteReg>
 8004ebc:	f000 beca 	b.w	8005c54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004ec0:	4b6b      	ldr	r3, [pc, #428]	; (8005070 <LCD_Init+0x3250>)
 8004ec2:	889b      	ldrh	r3, [r3, #4]
 8004ec4:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	f040 80d3 	bne.w	8005074 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004ece:	2100      	movs	r1, #0
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	f7fb fd3b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	2000      	movs	r0, #0
 8004eda:	f7fb fd37 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 8004ede:	2014      	movs	r0, #20
 8004ee0:	f001 fde4 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f7fb fd30 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004eec:	2100      	movs	r1, #0
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f7fb fd2c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	f7fb fd28 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004efc:	2100      	movs	r1, #0
 8004efe:	2000      	movs	r0, #0
 8004f00:	f7fb fd24 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8004f04:	2101      	movs	r1, #1
 8004f06:	20a4      	movs	r0, #164	; 0xa4
 8004f08:	f7fb fd20 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 8004f0c:	2014      	movs	r0, #20
 8004f0e:	f001 fdcd 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004f12:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f16:	2060      	movs	r0, #96	; 0x60
 8004f18:	f7fb fd18 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8004f1c:	f640 0106 	movw	r1, #2054	; 0x806
 8004f20:	2008      	movs	r0, #8
 8004f22:	f7fb fd13 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004f26:	f240 7103 	movw	r1, #1795	; 0x703
 8004f2a:	2030      	movs	r0, #48	; 0x30
 8004f2c:	f7fb fd0e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8004f30:	2101      	movs	r1, #1
 8004f32:	2031      	movs	r0, #49	; 0x31
 8004f34:	f7fb fd0a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8004f38:	2104      	movs	r1, #4
 8004f3a:	2032      	movs	r0, #50	; 0x32
 8004f3c:	f7fb fd06 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8004f40:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004f44:	2033      	movs	r0, #51	; 0x33
 8004f46:	f7fb fd01 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8004f4a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004f4e:	2034      	movs	r0, #52	; 0x34
 8004f50:	f7fb fcfc 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8004f54:	f240 1103 	movw	r1, #259	; 0x103
 8004f58:	2035      	movs	r0, #53	; 0x35
 8004f5a:	f7fb fcf7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8004f5e:	211f      	movs	r1, #31
 8004f60:	2036      	movs	r0, #54	; 0x36
 8004f62:	f7fb fcf3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8004f66:	f240 7103 	movw	r1, #1795	; 0x703
 8004f6a:	2037      	movs	r0, #55	; 0x37
 8004f6c:	f7fb fcee 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8004f70:	2101      	movs	r1, #1
 8004f72:	2038      	movs	r0, #56	; 0x38
 8004f74:	f7fb fcea 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8004f78:	2104      	movs	r1, #4
 8004f7a:	2039      	movs	r0, #57	; 0x39
 8004f7c:	f7fb fce6 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8004f80:	2115      	movs	r1, #21
 8004f82:	2090      	movs	r0, #144	; 0x90
 8004f84:	f7fb fce2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8004f88:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004f8c:	2010      	movs	r0, #16
 8004f8e:	f7fb fcdd 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8004f92:	f240 2147 	movw	r1, #583	; 0x247
 8004f96:	2011      	movs	r0, #17
 8004f98:	f7fb fcd8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8004f9c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004fa0:	2012      	movs	r0, #18
 8004fa2:	f7fb fcd3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8004fa6:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8004faa:	2013      	movs	r0, #19
 8004fac:	f7fb fcce 	bl	800094c <LCD_WriteReg>
		HAL_Delay(120);
 8004fb0:	2078      	movs	r0, #120	; 0x78
 8004fb2:	f001 fd7b 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8004fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fba:	2001      	movs	r0, #1
 8004fbc:	f7fb fcc6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8004fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fc4:	2002      	movs	r0, #2
 8004fc6:	f7fb fcc1 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004fca:	f241 0130 	movw	r1, #4144	; 0x1030
 8004fce:	2003      	movs	r0, #3
 8004fd0:	f7fb fcbc 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8004fd4:	2108      	movs	r1, #8
 8004fd6:	200a      	movs	r0, #10
 8004fd8:	f7fb fcb8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004fdc:	2100      	movs	r1, #0
 8004fde:	200c      	movs	r0, #12
 8004fe0:	f7fb fcb4 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8004fe4:	2120      	movs	r1, #32
 8004fe6:	200e      	movs	r0, #14
 8004fe8:	f7fb fcb0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004fec:	2100      	movs	r1, #0
 8004fee:	200f      	movs	r0, #15
 8004ff0:	f7fb fcac 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	2020      	movs	r0, #32
 8004ff8:	f7fb fca8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	2021      	movs	r0, #33	; 0x21
 8005000:	f7fb fca4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8005004:	213d      	movs	r1, #61	; 0x3d
 8005006:	202a      	movs	r0, #42	; 0x2a
 8005008:	f7fb fca0 	bl	800094c <LCD_WriteReg>
		HAL_Delay(20);
 800500c:	2014      	movs	r0, #20
 800500e:	f001 fd4d 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8005012:	212d      	movs	r1, #45	; 0x2d
 8005014:	2029      	movs	r0, #41	; 0x29
 8005016:	f7fb fc99 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800501a:	2100      	movs	r1, #0
 800501c:	2050      	movs	r0, #80	; 0x50
 800501e:	f7fb fc95 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8005022:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8005026:	2051      	movs	r0, #81	; 0x51
 8005028:	f7fb fc90 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800502c:	2100      	movs	r1, #0
 800502e:	2052      	movs	r0, #82	; 0x52
 8005030:	f7fb fc8c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005034:	f240 113f 	movw	r1, #319	; 0x13f
 8005038:	2053      	movs	r0, #83	; 0x53
 800503a:	f7fb fc87 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 800503e:	2100      	movs	r1, #0
 8005040:	2061      	movs	r0, #97	; 0x61
 8005042:	f7fb fc83 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005046:	2100      	movs	r1, #0
 8005048:	206a      	movs	r0, #106	; 0x6a
 800504a:	f7fb fc7f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800504e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005052:	2092      	movs	r0, #146	; 0x92
 8005054:	f7fb fc7a 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8005058:	2105      	movs	r1, #5
 800505a:	2093      	movs	r0, #147	; 0x93
 800505c:	f7fb fc76 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8005060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005064:	2007      	movs	r0, #7
 8005066:	f7fb fc71 	bl	800094c <LCD_WriteReg>
 800506a:	f000 bdf3 	b.w	8005c54 <LCD_Init+0x3e34>
 800506e:	bf00      	nop
 8005070:	20009ce0 	.word	0x20009ce0
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8005074:	4bc2      	ldr	r3, [pc, #776]	; (8005380 <LCD_Init+0x3560>)
 8005076:	889b      	ldrh	r3, [r3, #4]
 8005078:	f648 1289 	movw	r2, #35209	; 0x8989
 800507c:	4293      	cmp	r3, r2
 800507e:	f040 80bc 	bne.w	80051fa <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8005082:	2101      	movs	r1, #1
 8005084:	2000      	movs	r0, #0
 8005086:	f7fb fc61 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 800508a:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 800508e:	2003      	movs	r0, #3
 8005090:	f7fb fc5c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005094:	2100      	movs	r1, #0
 8005096:	200c      	movs	r0, #12
 8005098:	f7fb fc58 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 800509c:	f640 010c 	movw	r1, #2060	; 0x80c
 80050a0:	200d      	movs	r0, #13
 80050a2:	f7fb fc53 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80050a6:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80050aa:	200e      	movs	r0, #14
 80050ac:	f7fb fc4e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80050b0:	21b0      	movs	r1, #176	; 0xb0
 80050b2:	201e      	movs	r0, #30
 80050b4:	f7fb fc4a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 80050b8:	f642 313f 	movw	r1, #11071	; 0x2b3f
 80050bc:	2001      	movs	r0, #1
 80050be:	f7fb fc45 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 80050c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050c6:	2002      	movs	r0, #2
 80050c8:	f7fb fc40 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80050cc:	2100      	movs	r1, #0
 80050ce:	2010      	movs	r0, #16
 80050d0:	f7fb fc3c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 80050d4:	f246 0178 	movw	r1, #24696	; 0x6078
 80050d8:	2011      	movs	r0, #17
 80050da:	f7fb fc37 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 80050de:	2100      	movs	r1, #0
 80050e0:	2005      	movs	r0, #5
 80050e2:	f7fb fc33 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 80050e6:	2100      	movs	r1, #0
 80050e8:	2006      	movs	r0, #6
 80050ea:	f7fb fc2f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 80050ee:	f64e 711c 	movw	r1, #61212	; 0xef1c
 80050f2:	2016      	movs	r0, #22
 80050f4:	f7fb fc2a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 80050f8:	2103      	movs	r1, #3
 80050fa:	2017      	movs	r0, #23
 80050fc:	f7fb fc26 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005100:	f240 2133 	movw	r1, #563	; 0x233
 8005104:	2007      	movs	r0, #7
 8005106:	f7fb fc21 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 800510a:	2100      	movs	r1, #0
 800510c:	200b      	movs	r0, #11
 800510e:	f7fb fc1d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8005112:	2100      	movs	r1, #0
 8005114:	200f      	movs	r0, #15
 8005116:	f7fb fc19 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 800511a:	2100      	movs	r1, #0
 800511c:	2041      	movs	r0, #65	; 0x41
 800511e:	f7fb fc15 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8005122:	2100      	movs	r1, #0
 8005124:	2042      	movs	r0, #66	; 0x42
 8005126:	f7fb fc11 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 800512a:	2100      	movs	r1, #0
 800512c:	2048      	movs	r0, #72	; 0x48
 800512e:	f7fb fc0d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8005132:	f240 113f 	movw	r1, #319	; 0x13f
 8005136:	2049      	movs	r0, #73	; 0x49
 8005138:	f7fb fc08 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 800513c:	2100      	movs	r1, #0
 800513e:	204a      	movs	r0, #74	; 0x4a
 8005140:	f7fb fc04 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8005144:	2100      	movs	r1, #0
 8005146:	204b      	movs	r0, #75	; 0x4b
 8005148:	f7fb fc00 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 800514c:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005150:	2044      	movs	r0, #68	; 0x44
 8005152:	f7fb fbfb 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8005156:	2100      	movs	r1, #0
 8005158:	2045      	movs	r0, #69	; 0x45
 800515a:	f7fb fbf7 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 800515e:	f240 113f 	movw	r1, #319	; 0x13f
 8005162:	2046      	movs	r0, #70	; 0x46
 8005164:	f7fb fbf2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8005168:	f240 7107 	movw	r1, #1799	; 0x707
 800516c:	2030      	movs	r0, #48	; 0x30
 800516e:	f7fb fbed 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8005172:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005176:	2031      	movs	r0, #49	; 0x31
 8005178:	f7fb fbe8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 800517c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005180:	2032      	movs	r0, #50	; 0x32
 8005182:	f7fb fbe3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8005186:	f240 5102 	movw	r1, #1282	; 0x502
 800518a:	2033      	movs	r0, #51	; 0x33
 800518c:	f7fb fbde 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005190:	f240 5107 	movw	r1, #1287	; 0x507
 8005194:	2034      	movs	r0, #52	; 0x34
 8005196:	f7fb fbd9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800519a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800519e:	2035      	movs	r0, #53	; 0x35
 80051a0:	f7fb fbd4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80051a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80051a8:	2036      	movs	r0, #54	; 0x36
 80051aa:	f7fb fbcf 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80051ae:	f240 5102 	movw	r1, #1282	; 0x502
 80051b2:	2037      	movs	r0, #55	; 0x37
 80051b4:	f7fb fbca 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 80051b8:	f240 3102 	movw	r1, #770	; 0x302
 80051bc:	203a      	movs	r0, #58	; 0x3a
 80051be:	f7fb fbc5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 80051c2:	f240 3102 	movw	r1, #770	; 0x302
 80051c6:	203b      	movs	r0, #59	; 0x3b
 80051c8:	f7fb fbc0 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 80051cc:	2100      	movs	r1, #0
 80051ce:	2023      	movs	r0, #35	; 0x23
 80051d0:	f7fb fbbc 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 80051d4:	2100      	movs	r1, #0
 80051d6:	2024      	movs	r0, #36	; 0x24
 80051d8:	f7fb fbb8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 80051dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051e0:	2025      	movs	r0, #37	; 0x25
 80051e2:	f7fb fbb3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 80051e6:	2100      	movs	r1, #0
 80051e8:	204f      	movs	r0, #79	; 0x4f
 80051ea:	f7fb fbaf 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 80051ee:	2100      	movs	r1, #0
 80051f0:	204e      	movs	r0, #78	; 0x4e
 80051f2:	f7fb fbab 	bl	800094c <LCD_WriteReg>
 80051f6:	f000 bd2d 	b.w	8005c54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 80051fa:	4b61      	ldr	r3, [pc, #388]	; (8005380 <LCD_Init+0x3560>)
 80051fc:	889b      	ldrh	r3, [r3, #4]
 80051fe:	f244 5231 	movw	r2, #17713	; 0x4531
 8005202:	4293      	cmp	r3, r2
 8005204:	f040 80be 	bne.w	8005384 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005208:	2101      	movs	r1, #1
 800520a:	2000      	movs	r0, #0
 800520c:	f7fb fb9e 	bl	800094c <LCD_WriteReg>
		HAL_Delay(10);
 8005210:	200a      	movs	r0, #10
 8005212:	f001 fc4b 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8005216:	f241 6128 	movw	r1, #5672	; 0x1628
 800521a:	2010      	movs	r0, #16
 800521c:	f7fb fb96 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005220:	210e      	movs	r1, #14
 8005222:	2012      	movs	r0, #18
 8005224:	f7fb fb92 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005228:	f640 2139 	movw	r1, #2617	; 0xa39
 800522c:	2013      	movs	r0, #19
 800522e:	f7fb fb8d 	bl	800094c <LCD_WriteReg>
		HAL_Delay(10);
 8005232:	200a      	movs	r0, #10
 8005234:	f001 fc3a 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005238:	2140      	movs	r1, #64	; 0x40
 800523a:	2011      	movs	r0, #17
 800523c:	f7fb fb86 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005240:	2150      	movs	r1, #80	; 0x50
 8005242:	2015      	movs	r0, #21
 8005244:	f7fb fb82 	bl	800094c <LCD_WriteReg>
		HAL_Delay(10);
 8005248:	200a      	movs	r0, #10
 800524a:	f001 fc2f 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 800524e:	211e      	movs	r1, #30
 8005250:	2012      	movs	r0, #18
 8005252:	f7fb fb7b 	bl	800094c <LCD_WriteReg>
		HAL_Delay(10);
 8005256:	200a      	movs	r0, #10
 8005258:	f001 fc28 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 800525c:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005260:	2010      	movs	r0, #16
 8005262:	f7fb fb73 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8005266:	f642 2139 	movw	r1, #10809	; 0x2a39
 800526a:	2013      	movs	r0, #19
 800526c:	f7fb fb6e 	bl	800094c <LCD_WriteReg>
		HAL_Delay(10);
 8005270:	200a      	movs	r0, #10
 8005272:	f001 fc1b 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8005276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800527a:	2001      	movs	r0, #1
 800527c:	f7fb fb66 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005280:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005284:	2002      	movs	r0, #2
 8005286:	f7fb fb61 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 800528a:	f241 0138 	movw	r1, #4152	; 0x1038
 800528e:	2003      	movs	r0, #3
 8005290:	f7fb fb5c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8005294:	f240 2102 	movw	r1, #514	; 0x202
 8005298:	2008      	movs	r0, #8
 800529a:	f7fb fb57 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800529e:	2108      	movs	r1, #8
 80052a0:	200a      	movs	r0, #10
 80052a2:	f7fb fb53 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80052a6:	2100      	movs	r1, #0
 80052a8:	2030      	movs	r0, #48	; 0x30
 80052aa:	f7fb fb4f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80052ae:	f240 4102 	movw	r1, #1026	; 0x402
 80052b2:	2031      	movs	r0, #49	; 0x31
 80052b4:	f7fb fb4a 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 80052b8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80052bc:	2032      	movs	r0, #50	; 0x32
 80052be:	f7fb fb45 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 80052c2:	f240 5103 	movw	r1, #1283	; 0x503
 80052c6:	2033      	movs	r0, #51	; 0x33
 80052c8:	f7fb fb40 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 80052cc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80052d0:	2034      	movs	r0, #52	; 0x34
 80052d2:	f7fb fb3b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 80052d6:	f240 3101 	movw	r1, #769	; 0x301
 80052da:	2035      	movs	r0, #53	; 0x35
 80052dc:	f7fb fb36 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80052e0:	f240 7107 	movw	r1, #1799	; 0x707
 80052e4:	2036      	movs	r0, #54	; 0x36
 80052e6:	f7fb fb31 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80052ea:	f240 3105 	movw	r1, #773	; 0x305
 80052ee:	2037      	movs	r0, #55	; 0x37
 80052f0:	f7fb fb2c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 80052f4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80052f8:	2038      	movs	r0, #56	; 0x38
 80052fa:	f7fb fb27 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 80052fe:	f640 710b 	movw	r1, #3851	; 0xf0b
 8005302:	2039      	movs	r0, #57	; 0x39
 8005304:	f7fb fb22 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005308:	2102      	movs	r1, #2
 800530a:	2041      	movs	r0, #65	; 0x41
 800530c:	f7fb fb1e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005310:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005314:	2060      	movs	r0, #96	; 0x60
 8005316:	f7fb fb19 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800531a:	2101      	movs	r1, #1
 800531c:	2061      	movs	r0, #97	; 0x61
 800531e:	f7fb fb15 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8005322:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005326:	2090      	movs	r0, #144	; 0x90
 8005328:	f7fb fb10 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 800532c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005330:	2092      	movs	r0, #146	; 0x92
 8005332:	f7fb fb0b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8005336:	2104      	movs	r1, #4
 8005338:	2093      	movs	r0, #147	; 0x93
 800533a:	f7fb fb07 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 800533e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005342:	20a0      	movs	r0, #160	; 0xa0
 8005344:	f7fb fb02 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005348:	2101      	movs	r1, #1
 800534a:	2007      	movs	r0, #7
 800534c:	f7fb fafe 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005350:	2121      	movs	r1, #33	; 0x21
 8005352:	2007      	movs	r0, #7
 8005354:	f7fb fafa 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005358:	2123      	movs	r1, #35	; 0x23
 800535a:	2007      	movs	r0, #7
 800535c:	f7fb faf6 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005360:	2133      	movs	r1, #51	; 0x33
 8005362:	2007      	movs	r0, #7
 8005364:	f7fb faf2 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005368:	f240 1133 	movw	r1, #307	; 0x133
 800536c:	2007      	movs	r0, #7
 800536e:	f7fb faed 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8005372:	2100      	movs	r1, #0
 8005374:	20a0      	movs	r0, #160	; 0xa0
 8005376:	f7fb fae9 	bl	800094c <LCD_WriteReg>
 800537a:	f000 bc6b 	b.w	8005c54 <LCD_Init+0x3e34>
 800537e:	bf00      	nop
 8005380:	20009ce0 	.word	0x20009ce0
	} else if (lcddev.id == 0x4535) {
 8005384:	4b5b      	ldr	r3, [pc, #364]	; (80054f4 <LCD_Init+0x36d4>)
 8005386:	889b      	ldrh	r3, [r3, #4]
 8005388:	f244 5235 	movw	r2, #17717	; 0x4535
 800538c:	4293      	cmp	r3, r2
 800538e:	f040 80b3 	bne.w	80054f8 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8005392:	2130      	movs	r1, #48	; 0x30
 8005394:	2015      	movs	r0, #21
 8005396:	f7fb fad9 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 800539a:	2110      	movs	r1, #16
 800539c:	209a      	movs	r0, #154	; 0x9a
 800539e:	f7fb fad5 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80053a2:	2120      	movs	r1, #32
 80053a4:	2011      	movs	r0, #17
 80053a6:	f7fb fad1 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 80053aa:	f243 4128 	movw	r1, #13352	; 0x3428
 80053ae:	2010      	movs	r0, #16
 80053b0:	f7fb facc 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80053b4:	2102      	movs	r1, #2
 80053b6:	2012      	movs	r0, #18
 80053b8:	f7fb fac8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 80053bc:	f241 0138 	movw	r1, #4152	; 0x1038
 80053c0:	2013      	movs	r0, #19
 80053c2:	f7fb fac3 	bl	800094c <LCD_WriteReg>
		HAL_Delay(40);
 80053c6:	2028      	movs	r0, #40	; 0x28
 80053c8:	f001 fb70 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 80053cc:	2112      	movs	r1, #18
 80053ce:	2012      	movs	r0, #18
 80053d0:	f7fb fabc 	bl	800094c <LCD_WriteReg>
		HAL_Delay(40);
 80053d4:	2028      	movs	r0, #40	; 0x28
 80053d6:	f001 fb69 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 80053da:	f243 4120 	movw	r1, #13344	; 0x3420
 80053de:	2010      	movs	r0, #16
 80053e0:	f7fb fab4 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 80053e4:	f243 0138 	movw	r1, #12344	; 0x3038
 80053e8:	2013      	movs	r0, #19
 80053ea:	f7fb faaf 	bl	800094c <LCD_WriteReg>
		HAL_Delay(70);
 80053ee:	2046      	movs	r0, #70	; 0x46
 80053f0:	f001 fb5c 	bl	8006aac <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 80053f4:	2100      	movs	r1, #0
 80053f6:	2030      	movs	r0, #48	; 0x30
 80053f8:	f7fb faa8 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80053fc:	f240 4102 	movw	r1, #1026	; 0x402
 8005400:	2031      	movs	r0, #49	; 0x31
 8005402:	f7fb faa3 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8005406:	f240 3107 	movw	r1, #775	; 0x307
 800540a:	2032      	movs	r0, #50	; 0x32
 800540c:	f7fb fa9e 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005410:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005414:	2033      	movs	r0, #51	; 0x33
 8005416:	f7fb fa99 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 800541a:	2104      	movs	r1, #4
 800541c:	2034      	movs	r0, #52	; 0x34
 800541e:	f7fb fa95 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8005422:	f240 4101 	movw	r1, #1025	; 0x401
 8005426:	2035      	movs	r0, #53	; 0x35
 8005428:	f7fb fa90 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 800542c:	f240 7107 	movw	r1, #1799	; 0x707
 8005430:	2036      	movs	r0, #54	; 0x36
 8005432:	f7fb fa8b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005436:	f240 3105 	movw	r1, #773	; 0x305
 800543a:	2037      	movs	r0, #55	; 0x37
 800543c:	f7fb fa86 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005440:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005444:	2038      	movs	r0, #56	; 0x38
 8005446:	f7fb fa81 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 800544a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800544e:	2039      	movs	r0, #57	; 0x39
 8005450:	f7fb fa7c 	bl	800094c <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8005454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005458:	2001      	movs	r0, #1
 800545a:	f7fb fa77 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 800545e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005462:	2002      	movs	r0, #2
 8005464:	f7fb fa72 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005468:	f241 0130 	movw	r1, #4144	; 0x1030
 800546c:	2003      	movs	r0, #3
 800546e:	f7fb fa6d 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8005472:	f640 0108 	movw	r1, #2056	; 0x808
 8005476:	2008      	movs	r0, #8
 8005478:	f7fb fa68 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800547c:	2108      	movs	r1, #8
 800547e:	200a      	movs	r0, #10
 8005480:	f7fb fa64 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005484:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005488:	2060      	movs	r0, #96	; 0x60
 800548a:	f7fb fa5f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800548e:	2101      	movs	r1, #1
 8005490:	2061      	movs	r0, #97	; 0x61
 8005492:	f7fb fa5b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8005496:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800549a:	2090      	movs	r0, #144	; 0x90
 800549c:	f7fb fa56 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80054a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054a4:	2092      	movs	r0, #146	; 0x92
 80054a6:	f7fb fa51 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80054aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054ae:	2093      	movs	r0, #147	; 0x93
 80054b0:	f7fb fa4c 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80054b4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80054b8:	20a0      	movs	r0, #160	; 0xa0
 80054ba:	f7fb fa47 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 80054be:	2110      	movs	r1, #16
 80054c0:	20a3      	movs	r0, #163	; 0xa3
 80054c2:	f7fb fa43 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80054c6:	2101      	movs	r1, #1
 80054c8:	2007      	movs	r0, #7
 80054ca:	f7fb fa3f 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80054ce:	2121      	movs	r1, #33	; 0x21
 80054d0:	2007      	movs	r0, #7
 80054d2:	f7fb fa3b 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80054d6:	2123      	movs	r1, #35	; 0x23
 80054d8:	2007      	movs	r0, #7
 80054da:	f7fb fa37 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80054de:	2133      	movs	r1, #51	; 0x33
 80054e0:	2007      	movs	r0, #7
 80054e2:	f7fb fa33 	bl	800094c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80054e6:	f240 1133 	movw	r1, #307	; 0x133
 80054ea:	2007      	movs	r0, #7
 80054ec:	f7fb fa2e 	bl	800094c <LCD_WriteReg>
 80054f0:	e3b0      	b.n	8005c54 <LCD_Init+0x3e34>
 80054f2:	bf00      	nop
 80054f4:	20009ce0 	.word	0x20009ce0
	} else if (lcddev.id == 0X1963) {
 80054f8:	4ba8      	ldr	r3, [pc, #672]	; (800579c <LCD_Init+0x397c>)
 80054fa:	889b      	ldrh	r3, [r3, #4]
 80054fc:	f641 1263 	movw	r2, #6499	; 0x1963
 8005500:	4293      	cmp	r3, r2
 8005502:	f040 83a7 	bne.w	8005c54 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005506:	20e2      	movs	r0, #226	; 0xe2
 8005508:	f7fb f994 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 800550c:	4ba4      	ldr	r3, [pc, #656]	; (80057a0 <LCD_Init+0x3980>)
 800550e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005512:	611a      	str	r2, [r3, #16]
 8005514:	4ba2      	ldr	r3, [pc, #648]	; (80057a0 <LCD_Init+0x3980>)
 8005516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800551a:	615a      	str	r2, [r3, #20]
 800551c:	4ba1      	ldr	r3, [pc, #644]	; (80057a4 <LCD_Init+0x3984>)
 800551e:	221d      	movs	r2, #29
 8005520:	60da      	str	r2, [r3, #12]
 8005522:	4b9f      	ldr	r3, [pc, #636]	; (80057a0 <LCD_Init+0x3980>)
 8005524:	2280      	movs	r2, #128	; 0x80
 8005526:	615a      	str	r2, [r3, #20]
 8005528:	4b9d      	ldr	r3, [pc, #628]	; (80057a0 <LCD_Init+0x3980>)
 800552a:	2280      	movs	r2, #128	; 0x80
 800552c:	611a      	str	r2, [r3, #16]
 800552e:	4b9c      	ldr	r3, [pc, #624]	; (80057a0 <LCD_Init+0x3980>)
 8005530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005534:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005536:	4b9a      	ldr	r3, [pc, #616]	; (80057a0 <LCD_Init+0x3980>)
 8005538:	f44f 7280 	mov.w	r2, #256	; 0x100
 800553c:	611a      	str	r2, [r3, #16]
 800553e:	4b98      	ldr	r3, [pc, #608]	; (80057a0 <LCD_Init+0x3980>)
 8005540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005544:	615a      	str	r2, [r3, #20]
 8005546:	4b97      	ldr	r3, [pc, #604]	; (80057a4 <LCD_Init+0x3984>)
 8005548:	2202      	movs	r2, #2
 800554a:	60da      	str	r2, [r3, #12]
 800554c:	4b94      	ldr	r3, [pc, #592]	; (80057a0 <LCD_Init+0x3980>)
 800554e:	2280      	movs	r2, #128	; 0x80
 8005550:	615a      	str	r2, [r3, #20]
 8005552:	4b93      	ldr	r3, [pc, #588]	; (80057a0 <LCD_Init+0x3980>)
 8005554:	2280      	movs	r2, #128	; 0x80
 8005556:	611a      	str	r2, [r3, #16]
 8005558:	4b91      	ldr	r3, [pc, #580]	; (80057a0 <LCD_Init+0x3980>)
 800555a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005560:	4b8f      	ldr	r3, [pc, #572]	; (80057a0 <LCD_Init+0x3980>)
 8005562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005566:	611a      	str	r2, [r3, #16]
 8005568:	4b8d      	ldr	r3, [pc, #564]	; (80057a0 <LCD_Init+0x3980>)
 800556a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800556e:	615a      	str	r2, [r3, #20]
 8005570:	4b8c      	ldr	r3, [pc, #560]	; (80057a4 <LCD_Init+0x3984>)
 8005572:	2204      	movs	r2, #4
 8005574:	60da      	str	r2, [r3, #12]
 8005576:	4b8a      	ldr	r3, [pc, #552]	; (80057a0 <LCD_Init+0x3980>)
 8005578:	2280      	movs	r2, #128	; 0x80
 800557a:	615a      	str	r2, [r3, #20]
 800557c:	4b88      	ldr	r3, [pc, #544]	; (80057a0 <LCD_Init+0x3980>)
 800557e:	2280      	movs	r2, #128	; 0x80
 8005580:	611a      	str	r2, [r3, #16]
 8005582:	4b87      	ldr	r3, [pc, #540]	; (80057a0 <LCD_Init+0x3980>)
 8005584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005588:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 800558a:	2001      	movs	r0, #1
 800558c:	f001 fa8e 	bl	8006aac <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005590:	20e0      	movs	r0, #224	; 0xe0
 8005592:	f7fb f94f 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005596:	4b82      	ldr	r3, [pc, #520]	; (80057a0 <LCD_Init+0x3980>)
 8005598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800559c:	611a      	str	r2, [r3, #16]
 800559e:	4b80      	ldr	r3, [pc, #512]	; (80057a0 <LCD_Init+0x3980>)
 80055a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a4:	615a      	str	r2, [r3, #20]
 80055a6:	4b7f      	ldr	r3, [pc, #508]	; (80057a4 <LCD_Init+0x3984>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	60da      	str	r2, [r3, #12]
 80055ac:	4b7c      	ldr	r3, [pc, #496]	; (80057a0 <LCD_Init+0x3980>)
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	615a      	str	r2, [r3, #20]
 80055b2:	4b7b      	ldr	r3, [pc, #492]	; (80057a0 <LCD_Init+0x3980>)
 80055b4:	2280      	movs	r2, #128	; 0x80
 80055b6:	611a      	str	r2, [r3, #16]
 80055b8:	4b79      	ldr	r3, [pc, #484]	; (80057a0 <LCD_Init+0x3980>)
 80055ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055be:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 80055c0:	200a      	movs	r0, #10
 80055c2:	f001 fa73 	bl	8006aac <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 80055c6:	20e0      	movs	r0, #224	; 0xe0
 80055c8:	f7fb f934 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 80055cc:	4b74      	ldr	r3, [pc, #464]	; (80057a0 <LCD_Init+0x3980>)
 80055ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055d2:	611a      	str	r2, [r3, #16]
 80055d4:	4b72      	ldr	r3, [pc, #456]	; (80057a0 <LCD_Init+0x3980>)
 80055d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055da:	615a      	str	r2, [r3, #20]
 80055dc:	4b71      	ldr	r3, [pc, #452]	; (80057a4 <LCD_Init+0x3984>)
 80055de:	2203      	movs	r2, #3
 80055e0:	60da      	str	r2, [r3, #12]
 80055e2:	4b6f      	ldr	r3, [pc, #444]	; (80057a0 <LCD_Init+0x3980>)
 80055e4:	2280      	movs	r2, #128	; 0x80
 80055e6:	615a      	str	r2, [r3, #20]
 80055e8:	4b6d      	ldr	r3, [pc, #436]	; (80057a0 <LCD_Init+0x3980>)
 80055ea:	2280      	movs	r2, #128	; 0x80
 80055ec:	611a      	str	r2, [r3, #16]
 80055ee:	4b6c      	ldr	r3, [pc, #432]	; (80057a0 <LCD_Init+0x3980>)
 80055f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f4:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 80055f6:	200c      	movs	r0, #12
 80055f8:	f001 fa58 	bl	8006aac <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80055fc:	2001      	movs	r0, #1
 80055fe:	f7fb f919 	bl	8000834 <LCD_WR_REG>
		HAL_Delay(10);
 8005602:	200a      	movs	r0, #10
 8005604:	f001 fa52 	bl	8006aac <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005608:	20e6      	movs	r0, #230	; 0xe6
 800560a:	f7fb f913 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800560e:	4b64      	ldr	r3, [pc, #400]	; (80057a0 <LCD_Init+0x3980>)
 8005610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005614:	611a      	str	r2, [r3, #16]
 8005616:	4b62      	ldr	r3, [pc, #392]	; (80057a0 <LCD_Init+0x3980>)
 8005618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800561c:	615a      	str	r2, [r3, #20]
 800561e:	4b61      	ldr	r3, [pc, #388]	; (80057a4 <LCD_Init+0x3984>)
 8005620:	222f      	movs	r2, #47	; 0x2f
 8005622:	60da      	str	r2, [r3, #12]
 8005624:	4b5e      	ldr	r3, [pc, #376]	; (80057a0 <LCD_Init+0x3980>)
 8005626:	2280      	movs	r2, #128	; 0x80
 8005628:	615a      	str	r2, [r3, #20]
 800562a:	4b5d      	ldr	r3, [pc, #372]	; (80057a0 <LCD_Init+0x3980>)
 800562c:	2280      	movs	r2, #128	; 0x80
 800562e:	611a      	str	r2, [r3, #16]
 8005630:	4b5b      	ldr	r3, [pc, #364]	; (80057a0 <LCD_Init+0x3980>)
 8005632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005636:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005638:	4b59      	ldr	r3, [pc, #356]	; (80057a0 <LCD_Init+0x3980>)
 800563a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800563e:	611a      	str	r2, [r3, #16]
 8005640:	4b57      	ldr	r3, [pc, #348]	; (80057a0 <LCD_Init+0x3980>)
 8005642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005646:	615a      	str	r2, [r3, #20]
 8005648:	4b56      	ldr	r3, [pc, #344]	; (80057a4 <LCD_Init+0x3984>)
 800564a:	22ff      	movs	r2, #255	; 0xff
 800564c:	60da      	str	r2, [r3, #12]
 800564e:	4b54      	ldr	r3, [pc, #336]	; (80057a0 <LCD_Init+0x3980>)
 8005650:	2280      	movs	r2, #128	; 0x80
 8005652:	615a      	str	r2, [r3, #20]
 8005654:	4b52      	ldr	r3, [pc, #328]	; (80057a0 <LCD_Init+0x3980>)
 8005656:	2280      	movs	r2, #128	; 0x80
 8005658:	611a      	str	r2, [r3, #16]
 800565a:	4b51      	ldr	r3, [pc, #324]	; (80057a0 <LCD_Init+0x3980>)
 800565c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005660:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005662:	4b4f      	ldr	r3, [pc, #316]	; (80057a0 <LCD_Init+0x3980>)
 8005664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005668:	611a      	str	r2, [r3, #16]
 800566a:	4b4d      	ldr	r3, [pc, #308]	; (80057a0 <LCD_Init+0x3980>)
 800566c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005670:	615a      	str	r2, [r3, #20]
 8005672:	4b4c      	ldr	r3, [pc, #304]	; (80057a4 <LCD_Init+0x3984>)
 8005674:	22ff      	movs	r2, #255	; 0xff
 8005676:	60da      	str	r2, [r3, #12]
 8005678:	4b49      	ldr	r3, [pc, #292]	; (80057a0 <LCD_Init+0x3980>)
 800567a:	2280      	movs	r2, #128	; 0x80
 800567c:	615a      	str	r2, [r3, #20]
 800567e:	4b48      	ldr	r3, [pc, #288]	; (80057a0 <LCD_Init+0x3980>)
 8005680:	2280      	movs	r2, #128	; 0x80
 8005682:	611a      	str	r2, [r3, #16]
 8005684:	4b46      	ldr	r3, [pc, #280]	; (80057a0 <LCD_Init+0x3980>)
 8005686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 800568c:	20b0      	movs	r0, #176	; 0xb0
 800568e:	f7fb f8d1 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005692:	4b43      	ldr	r3, [pc, #268]	; (80057a0 <LCD_Init+0x3980>)
 8005694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005698:	611a      	str	r2, [r3, #16]
 800569a:	4b41      	ldr	r3, [pc, #260]	; (80057a0 <LCD_Init+0x3980>)
 800569c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a0:	615a      	str	r2, [r3, #20]
 80056a2:	4b40      	ldr	r3, [pc, #256]	; (80057a4 <LCD_Init+0x3984>)
 80056a4:	2220      	movs	r2, #32
 80056a6:	60da      	str	r2, [r3, #12]
 80056a8:	4b3d      	ldr	r3, [pc, #244]	; (80057a0 <LCD_Init+0x3980>)
 80056aa:	2280      	movs	r2, #128	; 0x80
 80056ac:	615a      	str	r2, [r3, #20]
 80056ae:	4b3c      	ldr	r3, [pc, #240]	; (80057a0 <LCD_Init+0x3980>)
 80056b0:	2280      	movs	r2, #128	; 0x80
 80056b2:	611a      	str	r2, [r3, #16]
 80056b4:	4b3a      	ldr	r3, [pc, #232]	; (80057a0 <LCD_Init+0x3980>)
 80056b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ba:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 80056bc:	4b38      	ldr	r3, [pc, #224]	; (80057a0 <LCD_Init+0x3980>)
 80056be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056c2:	611a      	str	r2, [r3, #16]
 80056c4:	4b36      	ldr	r3, [pc, #216]	; (80057a0 <LCD_Init+0x3980>)
 80056c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ca:	615a      	str	r2, [r3, #20]
 80056cc:	4b35      	ldr	r3, [pc, #212]	; (80057a4 <LCD_Init+0x3984>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	60da      	str	r2, [r3, #12]
 80056d2:	4b33      	ldr	r3, [pc, #204]	; (80057a0 <LCD_Init+0x3980>)
 80056d4:	2280      	movs	r2, #128	; 0x80
 80056d6:	615a      	str	r2, [r3, #20]
 80056d8:	4b31      	ldr	r3, [pc, #196]	; (80057a0 <LCD_Init+0x3980>)
 80056da:	2280      	movs	r2, #128	; 0x80
 80056dc:	611a      	str	r2, [r3, #16]
 80056de:	4b30      	ldr	r3, [pc, #192]	; (80057a0 <LCD_Init+0x3980>)
 80056e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e4:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 80056e6:	4b2e      	ldr	r3, [pc, #184]	; (80057a0 <LCD_Init+0x3980>)
 80056e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056ec:	611a      	str	r2, [r3, #16]
 80056ee:	4b2c      	ldr	r3, [pc, #176]	; (80057a0 <LCD_Init+0x3980>)
 80056f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f4:	615a      	str	r2, [r3, #20]
 80056f6:	4b2b      	ldr	r3, [pc, #172]	; (80057a4 <LCD_Init+0x3984>)
 80056f8:	2203      	movs	r2, #3
 80056fa:	60da      	str	r2, [r3, #12]
 80056fc:	4b28      	ldr	r3, [pc, #160]	; (80057a0 <LCD_Init+0x3980>)
 80056fe:	2280      	movs	r2, #128	; 0x80
 8005700:	615a      	str	r2, [r3, #20]
 8005702:	4b27      	ldr	r3, [pc, #156]	; (80057a0 <LCD_Init+0x3980>)
 8005704:	2280      	movs	r2, #128	; 0x80
 8005706:	611a      	str	r2, [r3, #16]
 8005708:	4b25      	ldr	r3, [pc, #148]	; (80057a0 <LCD_Init+0x3980>)
 800570a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800570e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005710:	4b23      	ldr	r3, [pc, #140]	; (80057a0 <LCD_Init+0x3980>)
 8005712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005716:	611a      	str	r2, [r3, #16]
 8005718:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <LCD_Init+0x3980>)
 800571a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800571e:	615a      	str	r2, [r3, #20]
 8005720:	4b20      	ldr	r3, [pc, #128]	; (80057a4 <LCD_Init+0x3984>)
 8005722:	f240 321f 	movw	r2, #799	; 0x31f
 8005726:	60da      	str	r2, [r3, #12]
 8005728:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <LCD_Init+0x3980>)
 800572a:	2280      	movs	r2, #128	; 0x80
 800572c:	615a      	str	r2, [r3, #20]
 800572e:	4b1c      	ldr	r3, [pc, #112]	; (80057a0 <LCD_Init+0x3980>)
 8005730:	2280      	movs	r2, #128	; 0x80
 8005732:	611a      	str	r2, [r3, #16]
 8005734:	4b1a      	ldr	r3, [pc, #104]	; (80057a0 <LCD_Init+0x3980>)
 8005736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800573a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 800573c:	4b18      	ldr	r3, [pc, #96]	; (80057a0 <LCD_Init+0x3980>)
 800573e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005742:	611a      	str	r2, [r3, #16]
 8005744:	4b16      	ldr	r3, [pc, #88]	; (80057a0 <LCD_Init+0x3980>)
 8005746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574a:	615a      	str	r2, [r3, #20]
 800574c:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <LCD_Init+0x3984>)
 800574e:	2201      	movs	r2, #1
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <LCD_Init+0x3980>)
 8005754:	2280      	movs	r2, #128	; 0x80
 8005756:	615a      	str	r2, [r3, #20]
 8005758:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <LCD_Init+0x3980>)
 800575a:	2280      	movs	r2, #128	; 0x80
 800575c:	611a      	str	r2, [r3, #16]
 800575e:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <LCD_Init+0x3980>)
 8005760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005764:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005766:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <LCD_Init+0x3980>)
 8005768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800576c:	611a      	str	r2, [r3, #16]
 800576e:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <LCD_Init+0x3980>)
 8005770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005774:	615a      	str	r2, [r3, #20]
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <LCD_Init+0x3984>)
 8005778:	f240 12df 	movw	r2, #479	; 0x1df
 800577c:	60da      	str	r2, [r3, #12]
 800577e:	4b08      	ldr	r3, [pc, #32]	; (80057a0 <LCD_Init+0x3980>)
 8005780:	2280      	movs	r2, #128	; 0x80
 8005782:	615a      	str	r2, [r3, #20]
 8005784:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <LCD_Init+0x3980>)
 8005786:	2280      	movs	r2, #128	; 0x80
 8005788:	611a      	str	r2, [r3, #16]
 800578a:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <LCD_Init+0x3980>)
 800578c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005790:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005792:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <LCD_Init+0x3980>)
 8005794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005798:	e006      	b.n	80057a8 <LCD_Init+0x3988>
 800579a:	bf00      	nop
 800579c:	20009ce0 	.word	0x20009ce0
 80057a0:	40011000 	.word	0x40011000
 80057a4:	40010c00 	.word	0x40010c00
 80057a8:	611a      	str	r2, [r3, #16]
 80057aa:	4ba3      	ldr	r3, [pc, #652]	; (8005a38 <LCD_Init+0x3c18>)
 80057ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b0:	615a      	str	r2, [r3, #20]
 80057b2:	4ba2      	ldr	r3, [pc, #648]	; (8005a3c <LCD_Init+0x3c1c>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	60da      	str	r2, [r3, #12]
 80057b8:	4b9f      	ldr	r3, [pc, #636]	; (8005a38 <LCD_Init+0x3c18>)
 80057ba:	2280      	movs	r2, #128	; 0x80
 80057bc:	615a      	str	r2, [r3, #20]
 80057be:	4b9e      	ldr	r3, [pc, #632]	; (8005a38 <LCD_Init+0x3c18>)
 80057c0:	2280      	movs	r2, #128	; 0x80
 80057c2:	611a      	str	r2, [r3, #16]
 80057c4:	4b9c      	ldr	r3, [pc, #624]	; (8005a38 <LCD_Init+0x3c18>)
 80057c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ca:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 80057cc:	20b4      	movs	r0, #180	; 0xb4
 80057ce:	f7fb f831 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 80057d2:	4b99      	ldr	r3, [pc, #612]	; (8005a38 <LCD_Init+0x3c18>)
 80057d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057d8:	611a      	str	r2, [r3, #16]
 80057da:	4b97      	ldr	r3, [pc, #604]	; (8005a38 <LCD_Init+0x3c18>)
 80057dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e0:	615a      	str	r2, [r3, #20]
 80057e2:	4b96      	ldr	r3, [pc, #600]	; (8005a3c <LCD_Init+0x3c1c>)
 80057e4:	2204      	movs	r2, #4
 80057e6:	60da      	str	r2, [r3, #12]
 80057e8:	4b93      	ldr	r3, [pc, #588]	; (8005a38 <LCD_Init+0x3c18>)
 80057ea:	2280      	movs	r2, #128	; 0x80
 80057ec:	615a      	str	r2, [r3, #20]
 80057ee:	4b92      	ldr	r3, [pc, #584]	; (8005a38 <LCD_Init+0x3c18>)
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	611a      	str	r2, [r3, #16]
 80057f4:	4b90      	ldr	r3, [pc, #576]	; (8005a38 <LCD_Init+0x3c18>)
 80057f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057fa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 80057fc:	4b8e      	ldr	r3, [pc, #568]	; (8005a38 <LCD_Init+0x3c18>)
 80057fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005802:	611a      	str	r2, [r3, #16]
 8005804:	4b8c      	ldr	r3, [pc, #560]	; (8005a38 <LCD_Init+0x3c18>)
 8005806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580a:	615a      	str	r2, [r3, #20]
 800580c:	4b8b      	ldr	r3, [pc, #556]	; (8005a3c <LCD_Init+0x3c1c>)
 800580e:	f240 421f 	movw	r2, #1055	; 0x41f
 8005812:	60da      	str	r2, [r3, #12]
 8005814:	4b88      	ldr	r3, [pc, #544]	; (8005a38 <LCD_Init+0x3c18>)
 8005816:	2280      	movs	r2, #128	; 0x80
 8005818:	615a      	str	r2, [r3, #20]
 800581a:	4b87      	ldr	r3, [pc, #540]	; (8005a38 <LCD_Init+0x3c18>)
 800581c:	2280      	movs	r2, #128	; 0x80
 800581e:	611a      	str	r2, [r3, #16]
 8005820:	4b85      	ldr	r3, [pc, #532]	; (8005a38 <LCD_Init+0x3c18>)
 8005822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005826:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005828:	4b83      	ldr	r3, [pc, #524]	; (8005a38 <LCD_Init+0x3c18>)
 800582a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800582e:	611a      	str	r2, [r3, #16]
 8005830:	4b81      	ldr	r3, [pc, #516]	; (8005a38 <LCD_Init+0x3c18>)
 8005832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005836:	615a      	str	r2, [r3, #20]
 8005838:	4b80      	ldr	r3, [pc, #512]	; (8005a3c <LCD_Init+0x3c1c>)
 800583a:	2200      	movs	r2, #0
 800583c:	60da      	str	r2, [r3, #12]
 800583e:	4b7e      	ldr	r3, [pc, #504]	; (8005a38 <LCD_Init+0x3c18>)
 8005840:	2280      	movs	r2, #128	; 0x80
 8005842:	615a      	str	r2, [r3, #20]
 8005844:	4b7c      	ldr	r3, [pc, #496]	; (8005a38 <LCD_Init+0x3c18>)
 8005846:	2280      	movs	r2, #128	; 0x80
 8005848:	611a      	str	r2, [r3, #16]
 800584a:	4b7b      	ldr	r3, [pc, #492]	; (8005a38 <LCD_Init+0x3c18>)
 800584c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005850:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005852:	4b79      	ldr	r3, [pc, #484]	; (8005a38 <LCD_Init+0x3c18>)
 8005854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005858:	611a      	str	r2, [r3, #16]
 800585a:	4b77      	ldr	r3, [pc, #476]	; (8005a38 <LCD_Init+0x3c18>)
 800585c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005860:	615a      	str	r2, [r3, #20]
 8005862:	4b76      	ldr	r3, [pc, #472]	; (8005a3c <LCD_Init+0x3c1c>)
 8005864:	222e      	movs	r2, #46	; 0x2e
 8005866:	60da      	str	r2, [r3, #12]
 8005868:	4b73      	ldr	r3, [pc, #460]	; (8005a38 <LCD_Init+0x3c18>)
 800586a:	2280      	movs	r2, #128	; 0x80
 800586c:	615a      	str	r2, [r3, #20]
 800586e:	4b72      	ldr	r3, [pc, #456]	; (8005a38 <LCD_Init+0x3c18>)
 8005870:	2280      	movs	r2, #128	; 0x80
 8005872:	611a      	str	r2, [r3, #16]
 8005874:	4b70      	ldr	r3, [pc, #448]	; (8005a38 <LCD_Init+0x3c18>)
 8005876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 800587c:	4b6e      	ldr	r3, [pc, #440]	; (8005a38 <LCD_Init+0x3c18>)
 800587e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005882:	611a      	str	r2, [r3, #16]
 8005884:	4b6c      	ldr	r3, [pc, #432]	; (8005a38 <LCD_Init+0x3c18>)
 8005886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588a:	615a      	str	r2, [r3, #20]
 800588c:	4b6b      	ldr	r3, [pc, #428]	; (8005a3c <LCD_Init+0x3c1c>)
 800588e:	2200      	movs	r2, #0
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	4b69      	ldr	r3, [pc, #420]	; (8005a38 <LCD_Init+0x3c18>)
 8005894:	2280      	movs	r2, #128	; 0x80
 8005896:	615a      	str	r2, [r3, #20]
 8005898:	4b67      	ldr	r3, [pc, #412]	; (8005a38 <LCD_Init+0x3c18>)
 800589a:	2280      	movs	r2, #128	; 0x80
 800589c:	611a      	str	r2, [r3, #16]
 800589e:	4b66      	ldr	r3, [pc, #408]	; (8005a38 <LCD_Init+0x3c18>)
 80058a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80058a6:	4b64      	ldr	r3, [pc, #400]	; (8005a38 <LCD_Init+0x3c18>)
 80058a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ac:	611a      	str	r2, [r3, #16]
 80058ae:	4b62      	ldr	r3, [pc, #392]	; (8005a38 <LCD_Init+0x3c18>)
 80058b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b4:	615a      	str	r2, [r3, #20]
 80058b6:	4b61      	ldr	r3, [pc, #388]	; (8005a3c <LCD_Init+0x3c1c>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	60da      	str	r2, [r3, #12]
 80058bc:	4b5e      	ldr	r3, [pc, #376]	; (8005a38 <LCD_Init+0x3c18>)
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	615a      	str	r2, [r3, #20]
 80058c2:	4b5d      	ldr	r3, [pc, #372]	; (8005a38 <LCD_Init+0x3c18>)
 80058c4:	2280      	movs	r2, #128	; 0x80
 80058c6:	611a      	str	r2, [r3, #16]
 80058c8:	4b5b      	ldr	r3, [pc, #364]	; (8005a38 <LCD_Init+0x3c18>)
 80058ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80058d0:	4b59      	ldr	r3, [pc, #356]	; (8005a38 <LCD_Init+0x3c18>)
 80058d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058d6:	611a      	str	r2, [r3, #16]
 80058d8:	4b57      	ldr	r3, [pc, #348]	; (8005a38 <LCD_Init+0x3c18>)
 80058da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058de:	615a      	str	r2, [r3, #20]
 80058e0:	4b56      	ldr	r3, [pc, #344]	; (8005a3c <LCD_Init+0x3c1c>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	60da      	str	r2, [r3, #12]
 80058e6:	4b54      	ldr	r3, [pc, #336]	; (8005a38 <LCD_Init+0x3c18>)
 80058e8:	2280      	movs	r2, #128	; 0x80
 80058ea:	615a      	str	r2, [r3, #20]
 80058ec:	4b52      	ldr	r3, [pc, #328]	; (8005a38 <LCD_Init+0x3c18>)
 80058ee:	2280      	movs	r2, #128	; 0x80
 80058f0:	611a      	str	r2, [r3, #16]
 80058f2:	4b51      	ldr	r3, [pc, #324]	; (8005a38 <LCD_Init+0x3c18>)
 80058f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80058fa:	4b4f      	ldr	r3, [pc, #316]	; (8005a38 <LCD_Init+0x3c18>)
 80058fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005900:	611a      	str	r2, [r3, #16]
 8005902:	4b4d      	ldr	r3, [pc, #308]	; (8005a38 <LCD_Init+0x3c18>)
 8005904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005908:	615a      	str	r2, [r3, #20]
 800590a:	4b4c      	ldr	r3, [pc, #304]	; (8005a3c <LCD_Init+0x3c1c>)
 800590c:	2200      	movs	r2, #0
 800590e:	60da      	str	r2, [r3, #12]
 8005910:	4b49      	ldr	r3, [pc, #292]	; (8005a38 <LCD_Init+0x3c18>)
 8005912:	2280      	movs	r2, #128	; 0x80
 8005914:	615a      	str	r2, [r3, #20]
 8005916:	4b48      	ldr	r3, [pc, #288]	; (8005a38 <LCD_Init+0x3c18>)
 8005918:	2280      	movs	r2, #128	; 0x80
 800591a:	611a      	str	r2, [r3, #16]
 800591c:	4b46      	ldr	r3, [pc, #280]	; (8005a38 <LCD_Init+0x3c18>)
 800591e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005922:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005924:	20b6      	movs	r0, #182	; 0xb6
 8005926:	f7fa ff85 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 800592a:	4b43      	ldr	r3, [pc, #268]	; (8005a38 <LCD_Init+0x3c18>)
 800592c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005930:	611a      	str	r2, [r3, #16]
 8005932:	4b41      	ldr	r3, [pc, #260]	; (8005a38 <LCD_Init+0x3c18>)
 8005934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005938:	615a      	str	r2, [r3, #20]
 800593a:	4b40      	ldr	r3, [pc, #256]	; (8005a3c <LCD_Init+0x3c1c>)
 800593c:	2202      	movs	r2, #2
 800593e:	60da      	str	r2, [r3, #12]
 8005940:	4b3d      	ldr	r3, [pc, #244]	; (8005a38 <LCD_Init+0x3c18>)
 8005942:	2280      	movs	r2, #128	; 0x80
 8005944:	615a      	str	r2, [r3, #20]
 8005946:	4b3c      	ldr	r3, [pc, #240]	; (8005a38 <LCD_Init+0x3c18>)
 8005948:	2280      	movs	r2, #128	; 0x80
 800594a:	611a      	str	r2, [r3, #16]
 800594c:	4b3a      	ldr	r3, [pc, #232]	; (8005a38 <LCD_Init+0x3c18>)
 800594e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005952:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005954:	4b38      	ldr	r3, [pc, #224]	; (8005a38 <LCD_Init+0x3c18>)
 8005956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800595a:	611a      	str	r2, [r3, #16]
 800595c:	4b36      	ldr	r3, [pc, #216]	; (8005a38 <LCD_Init+0x3c18>)
 800595e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005962:	615a      	str	r2, [r3, #20]
 8005964:	4b35      	ldr	r3, [pc, #212]	; (8005a3c <LCD_Init+0x3c1c>)
 8005966:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800596a:	60da      	str	r2, [r3, #12]
 800596c:	4b32      	ldr	r3, [pc, #200]	; (8005a38 <LCD_Init+0x3c18>)
 800596e:	2280      	movs	r2, #128	; 0x80
 8005970:	615a      	str	r2, [r3, #20]
 8005972:	4b31      	ldr	r3, [pc, #196]	; (8005a38 <LCD_Init+0x3c18>)
 8005974:	2280      	movs	r2, #128	; 0x80
 8005976:	611a      	str	r2, [r3, #16]
 8005978:	4b2f      	ldr	r3, [pc, #188]	; (8005a38 <LCD_Init+0x3c18>)
 800597a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005980:	4b2d      	ldr	r3, [pc, #180]	; (8005a38 <LCD_Init+0x3c18>)
 8005982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005986:	611a      	str	r2, [r3, #16]
 8005988:	4b2b      	ldr	r3, [pc, #172]	; (8005a38 <LCD_Init+0x3c18>)
 800598a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598e:	615a      	str	r2, [r3, #20]
 8005990:	4b2a      	ldr	r3, [pc, #168]	; (8005a3c <LCD_Init+0x3c1c>)
 8005992:	2200      	movs	r2, #0
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	4b28      	ldr	r3, [pc, #160]	; (8005a38 <LCD_Init+0x3c18>)
 8005998:	2280      	movs	r2, #128	; 0x80
 800599a:	615a      	str	r2, [r3, #20]
 800599c:	4b26      	ldr	r3, [pc, #152]	; (8005a38 <LCD_Init+0x3c18>)
 800599e:	2280      	movs	r2, #128	; 0x80
 80059a0:	611a      	str	r2, [r3, #16]
 80059a2:	4b25      	ldr	r3, [pc, #148]	; (8005a38 <LCD_Init+0x3c18>)
 80059a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 80059aa:	4b23      	ldr	r3, [pc, #140]	; (8005a38 <LCD_Init+0x3c18>)
 80059ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059b0:	611a      	str	r2, [r3, #16]
 80059b2:	4b21      	ldr	r3, [pc, #132]	; (8005a38 <LCD_Init+0x3c18>)
 80059b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b8:	615a      	str	r2, [r3, #20]
 80059ba:	4b20      	ldr	r3, [pc, #128]	; (8005a3c <LCD_Init+0x3c1c>)
 80059bc:	2217      	movs	r2, #23
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <LCD_Init+0x3c18>)
 80059c2:	2280      	movs	r2, #128	; 0x80
 80059c4:	615a      	str	r2, [r3, #20]
 80059c6:	4b1c      	ldr	r3, [pc, #112]	; (8005a38 <LCD_Init+0x3c18>)
 80059c8:	2280      	movs	r2, #128	; 0x80
 80059ca:	611a      	str	r2, [r3, #16]
 80059cc:	4b1a      	ldr	r3, [pc, #104]	; (8005a38 <LCD_Init+0x3c18>)
 80059ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80059d4:	4b18      	ldr	r3, [pc, #96]	; (8005a38 <LCD_Init+0x3c18>)
 80059d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059da:	611a      	str	r2, [r3, #16]
 80059dc:	4b16      	ldr	r3, [pc, #88]	; (8005a38 <LCD_Init+0x3c18>)
 80059de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e2:	615a      	str	r2, [r3, #20]
 80059e4:	4b15      	ldr	r3, [pc, #84]	; (8005a3c <LCD_Init+0x3c1c>)
 80059e6:	2215      	movs	r2, #21
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	4b13      	ldr	r3, [pc, #76]	; (8005a38 <LCD_Init+0x3c18>)
 80059ec:	2280      	movs	r2, #128	; 0x80
 80059ee:	615a      	str	r2, [r3, #20]
 80059f0:	4b11      	ldr	r3, [pc, #68]	; (8005a38 <LCD_Init+0x3c18>)
 80059f2:	2280      	movs	r2, #128	; 0x80
 80059f4:	611a      	str	r2, [r3, #16]
 80059f6:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <LCD_Init+0x3c18>)
 80059f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80059fe:	4b0e      	ldr	r3, [pc, #56]	; (8005a38 <LCD_Init+0x3c18>)
 8005a00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a04:	611a      	str	r2, [r3, #16]
 8005a06:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <LCD_Init+0x3c18>)
 8005a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0c:	615a      	str	r2, [r3, #20]
 8005a0e:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <LCD_Init+0x3c1c>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	60da      	str	r2, [r3, #12]
 8005a14:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <LCD_Init+0x3c18>)
 8005a16:	2280      	movs	r2, #128	; 0x80
 8005a18:	615a      	str	r2, [r3, #20]
 8005a1a:	4b07      	ldr	r3, [pc, #28]	; (8005a38 <LCD_Init+0x3c18>)
 8005a1c:	2280      	movs	r2, #128	; 0x80
 8005a1e:	611a      	str	r2, [r3, #16]
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <LCD_Init+0x3c18>)
 8005a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a28:	4b03      	ldr	r3, [pc, #12]	; (8005a38 <LCD_Init+0x3c18>)
 8005a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a2e:	611a      	str	r2, [r3, #16]
 8005a30:	4b01      	ldr	r3, [pc, #4]	; (8005a38 <LCD_Init+0x3c18>)
 8005a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a36:	e003      	b.n	8005a40 <LCD_Init+0x3c20>
 8005a38:	40011000 	.word	0x40011000
 8005a3c:	40010c00 	.word	0x40010c00
 8005a40:	615a      	str	r2, [r3, #20]
 8005a42:	4b8b      	ldr	r3, [pc, #556]	; (8005c70 <LCD_Init+0x3e50>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	60da      	str	r2, [r3, #12]
 8005a48:	4b8a      	ldr	r3, [pc, #552]	; (8005c74 <LCD_Init+0x3e54>)
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	615a      	str	r2, [r3, #20]
 8005a4e:	4b89      	ldr	r3, [pc, #548]	; (8005c74 <LCD_Init+0x3e54>)
 8005a50:	2280      	movs	r2, #128	; 0x80
 8005a52:	611a      	str	r2, [r3, #16]
 8005a54:	4b87      	ldr	r3, [pc, #540]	; (8005c74 <LCD_Init+0x3e54>)
 8005a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a5a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005a5c:	20f0      	movs	r0, #240	; 0xf0
 8005a5e:	f7fa fee9 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005a62:	4b84      	ldr	r3, [pc, #528]	; (8005c74 <LCD_Init+0x3e54>)
 8005a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a68:	611a      	str	r2, [r3, #16]
 8005a6a:	4b82      	ldr	r3, [pc, #520]	; (8005c74 <LCD_Init+0x3e54>)
 8005a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a70:	615a      	str	r2, [r3, #20]
 8005a72:	4b7f      	ldr	r3, [pc, #508]	; (8005c70 <LCD_Init+0x3e50>)
 8005a74:	2203      	movs	r2, #3
 8005a76:	60da      	str	r2, [r3, #12]
 8005a78:	4b7e      	ldr	r3, [pc, #504]	; (8005c74 <LCD_Init+0x3e54>)
 8005a7a:	2280      	movs	r2, #128	; 0x80
 8005a7c:	615a      	str	r2, [r3, #20]
 8005a7e:	4b7d      	ldr	r3, [pc, #500]	; (8005c74 <LCD_Init+0x3e54>)
 8005a80:	2280      	movs	r2, #128	; 0x80
 8005a82:	611a      	str	r2, [r3, #16]
 8005a84:	4b7b      	ldr	r3, [pc, #492]	; (8005c74 <LCD_Init+0x3e54>)
 8005a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a8a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005a8c:	2029      	movs	r0, #41	; 0x29
 8005a8e:	f7fa fed1 	bl	8000834 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005a92:	20d0      	movs	r0, #208	; 0xd0
 8005a94:	f7fa fece 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005a98:	4b76      	ldr	r3, [pc, #472]	; (8005c74 <LCD_Init+0x3e54>)
 8005a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a9e:	611a      	str	r2, [r3, #16]
 8005aa0:	4b74      	ldr	r3, [pc, #464]	; (8005c74 <LCD_Init+0x3e54>)
 8005aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa6:	615a      	str	r2, [r3, #20]
 8005aa8:	4b71      	ldr	r3, [pc, #452]	; (8005c70 <LCD_Init+0x3e50>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	60da      	str	r2, [r3, #12]
 8005aae:	4b71      	ldr	r3, [pc, #452]	; (8005c74 <LCD_Init+0x3e54>)
 8005ab0:	2280      	movs	r2, #128	; 0x80
 8005ab2:	615a      	str	r2, [r3, #20]
 8005ab4:	4b6f      	ldr	r3, [pc, #444]	; (8005c74 <LCD_Init+0x3e54>)
 8005ab6:	2280      	movs	r2, #128	; 0x80
 8005ab8:	611a      	str	r2, [r3, #16]
 8005aba:	4b6e      	ldr	r3, [pc, #440]	; (8005c74 <LCD_Init+0x3e54>)
 8005abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac0:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005ac2:	20be      	movs	r0, #190	; 0xbe
 8005ac4:	f7fa feb6 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005ac8:	4b6a      	ldr	r3, [pc, #424]	; (8005c74 <LCD_Init+0x3e54>)
 8005aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ace:	611a      	str	r2, [r3, #16]
 8005ad0:	4b68      	ldr	r3, [pc, #416]	; (8005c74 <LCD_Init+0x3e54>)
 8005ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad6:	615a      	str	r2, [r3, #20]
 8005ad8:	4b65      	ldr	r3, [pc, #404]	; (8005c70 <LCD_Init+0x3e50>)
 8005ada:	2205      	movs	r2, #5
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	4b65      	ldr	r3, [pc, #404]	; (8005c74 <LCD_Init+0x3e54>)
 8005ae0:	2280      	movs	r2, #128	; 0x80
 8005ae2:	615a      	str	r2, [r3, #20]
 8005ae4:	4b63      	ldr	r3, [pc, #396]	; (8005c74 <LCD_Init+0x3e54>)
 8005ae6:	2280      	movs	r2, #128	; 0x80
 8005ae8:	611a      	str	r2, [r3, #16]
 8005aea:	4b62      	ldr	r3, [pc, #392]	; (8005c74 <LCD_Init+0x3e54>)
 8005aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005af2:	4b60      	ldr	r3, [pc, #384]	; (8005c74 <LCD_Init+0x3e54>)
 8005af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	4b5e      	ldr	r3, [pc, #376]	; (8005c74 <LCD_Init+0x3e54>)
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	615a      	str	r2, [r3, #20]
 8005b02:	4b5b      	ldr	r3, [pc, #364]	; (8005c70 <LCD_Init+0x3e50>)
 8005b04:	22fe      	movs	r2, #254	; 0xfe
 8005b06:	60da      	str	r2, [r3, #12]
 8005b08:	4b5a      	ldr	r3, [pc, #360]	; (8005c74 <LCD_Init+0x3e54>)
 8005b0a:	2280      	movs	r2, #128	; 0x80
 8005b0c:	615a      	str	r2, [r3, #20]
 8005b0e:	4b59      	ldr	r3, [pc, #356]	; (8005c74 <LCD_Init+0x3e54>)
 8005b10:	2280      	movs	r2, #128	; 0x80
 8005b12:	611a      	str	r2, [r3, #16]
 8005b14:	4b57      	ldr	r3, [pc, #348]	; (8005c74 <LCD_Init+0x3e54>)
 8005b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b1a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005b1c:	4b55      	ldr	r3, [pc, #340]	; (8005c74 <LCD_Init+0x3e54>)
 8005b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b22:	611a      	str	r2, [r3, #16]
 8005b24:	4b53      	ldr	r3, [pc, #332]	; (8005c74 <LCD_Init+0x3e54>)
 8005b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b2a:	615a      	str	r2, [r3, #20]
 8005b2c:	4b50      	ldr	r3, [pc, #320]	; (8005c70 <LCD_Init+0x3e50>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	60da      	str	r2, [r3, #12]
 8005b32:	4b50      	ldr	r3, [pc, #320]	; (8005c74 <LCD_Init+0x3e54>)
 8005b34:	2280      	movs	r2, #128	; 0x80
 8005b36:	615a      	str	r2, [r3, #20]
 8005b38:	4b4e      	ldr	r3, [pc, #312]	; (8005c74 <LCD_Init+0x3e54>)
 8005b3a:	2280      	movs	r2, #128	; 0x80
 8005b3c:	611a      	str	r2, [r3, #16]
 8005b3e:	4b4d      	ldr	r3, [pc, #308]	; (8005c74 <LCD_Init+0x3e54>)
 8005b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b44:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005b46:	4b4b      	ldr	r3, [pc, #300]	; (8005c74 <LCD_Init+0x3e54>)
 8005b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b4c:	611a      	str	r2, [r3, #16]
 8005b4e:	4b49      	ldr	r3, [pc, #292]	; (8005c74 <LCD_Init+0x3e54>)
 8005b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b54:	615a      	str	r2, [r3, #20]
 8005b56:	4b46      	ldr	r3, [pc, #280]	; (8005c70 <LCD_Init+0x3e50>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	60da      	str	r2, [r3, #12]
 8005b5c:	4b45      	ldr	r3, [pc, #276]	; (8005c74 <LCD_Init+0x3e54>)
 8005b5e:	2280      	movs	r2, #128	; 0x80
 8005b60:	615a      	str	r2, [r3, #20]
 8005b62:	4b44      	ldr	r3, [pc, #272]	; (8005c74 <LCD_Init+0x3e54>)
 8005b64:	2280      	movs	r2, #128	; 0x80
 8005b66:	611a      	str	r2, [r3, #16]
 8005b68:	4b42      	ldr	r3, [pc, #264]	; (8005c74 <LCD_Init+0x3e54>)
 8005b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b6e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005b70:	4b40      	ldr	r3, [pc, #256]	; (8005c74 <LCD_Init+0x3e54>)
 8005b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b76:	611a      	str	r2, [r3, #16]
 8005b78:	4b3e      	ldr	r3, [pc, #248]	; (8005c74 <LCD_Init+0x3e54>)
 8005b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7e:	615a      	str	r2, [r3, #20]
 8005b80:	4b3b      	ldr	r3, [pc, #236]	; (8005c70 <LCD_Init+0x3e50>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	60da      	str	r2, [r3, #12]
 8005b86:	4b3b      	ldr	r3, [pc, #236]	; (8005c74 <LCD_Init+0x3e54>)
 8005b88:	2280      	movs	r2, #128	; 0x80
 8005b8a:	615a      	str	r2, [r3, #20]
 8005b8c:	4b39      	ldr	r3, [pc, #228]	; (8005c74 <LCD_Init+0x3e54>)
 8005b8e:	2280      	movs	r2, #128	; 0x80
 8005b90:	611a      	str	r2, [r3, #16]
 8005b92:	4b38      	ldr	r3, [pc, #224]	; (8005c74 <LCD_Init+0x3e54>)
 8005b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b98:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005b9a:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <LCD_Init+0x3e54>)
 8005b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ba0:	611a      	str	r2, [r3, #16]
 8005ba2:	4b34      	ldr	r3, [pc, #208]	; (8005c74 <LCD_Init+0x3e54>)
 8005ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba8:	615a      	str	r2, [r3, #20]
 8005baa:	4b31      	ldr	r3, [pc, #196]	; (8005c70 <LCD_Init+0x3e50>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	60da      	str	r2, [r3, #12]
 8005bb0:	4b30      	ldr	r3, [pc, #192]	; (8005c74 <LCD_Init+0x3e54>)
 8005bb2:	2280      	movs	r2, #128	; 0x80
 8005bb4:	615a      	str	r2, [r3, #20]
 8005bb6:	4b2f      	ldr	r3, [pc, #188]	; (8005c74 <LCD_Init+0x3e54>)
 8005bb8:	2280      	movs	r2, #128	; 0x80
 8005bba:	611a      	str	r2, [r3, #16]
 8005bbc:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <LCD_Init+0x3e54>)
 8005bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005bc4:	20b8      	movs	r0, #184	; 0xb8
 8005bc6:	f7fa fe35 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005bca:	4b2a      	ldr	r3, [pc, #168]	; (8005c74 <LCD_Init+0x3e54>)
 8005bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bd0:	611a      	str	r2, [r3, #16]
 8005bd2:	4b28      	ldr	r3, [pc, #160]	; (8005c74 <LCD_Init+0x3e54>)
 8005bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd8:	615a      	str	r2, [r3, #20]
 8005bda:	4b25      	ldr	r3, [pc, #148]	; (8005c70 <LCD_Init+0x3e50>)
 8005bdc:	2203      	movs	r2, #3
 8005bde:	60da      	str	r2, [r3, #12]
 8005be0:	4b24      	ldr	r3, [pc, #144]	; (8005c74 <LCD_Init+0x3e54>)
 8005be2:	2280      	movs	r2, #128	; 0x80
 8005be4:	615a      	str	r2, [r3, #20]
 8005be6:	4b23      	ldr	r3, [pc, #140]	; (8005c74 <LCD_Init+0x3e54>)
 8005be8:	2280      	movs	r2, #128	; 0x80
 8005bea:	611a      	str	r2, [r3, #16]
 8005bec:	4b21      	ldr	r3, [pc, #132]	; (8005c74 <LCD_Init+0x3e54>)
 8005bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005bf4:	4b1f      	ldr	r3, [pc, #124]	; (8005c74 <LCD_Init+0x3e54>)
 8005bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bfa:	611a      	str	r2, [r3, #16]
 8005bfc:	4b1d      	ldr	r3, [pc, #116]	; (8005c74 <LCD_Init+0x3e54>)
 8005bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c02:	615a      	str	r2, [r3, #20]
 8005c04:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <LCD_Init+0x3e50>)
 8005c06:	2201      	movs	r2, #1
 8005c08:	60da      	str	r2, [r3, #12]
 8005c0a:	4b1a      	ldr	r3, [pc, #104]	; (8005c74 <LCD_Init+0x3e54>)
 8005c0c:	2280      	movs	r2, #128	; 0x80
 8005c0e:	615a      	str	r2, [r3, #20]
 8005c10:	4b18      	ldr	r3, [pc, #96]	; (8005c74 <LCD_Init+0x3e54>)
 8005c12:	2280      	movs	r2, #128	; 0x80
 8005c14:	611a      	str	r2, [r3, #16]
 8005c16:	4b17      	ldr	r3, [pc, #92]	; (8005c74 <LCD_Init+0x3e54>)
 8005c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c1c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005c1e:	20ba      	movs	r0, #186	; 0xba
 8005c20:	f7fa fe08 	bl	8000834 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005c24:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <LCD_Init+0x3e54>)
 8005c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c2a:	611a      	str	r2, [r3, #16]
 8005c2c:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <LCD_Init+0x3e54>)
 8005c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c32:	615a      	str	r2, [r3, #20]
 8005c34:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <LCD_Init+0x3e50>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	60da      	str	r2, [r3, #12]
 8005c3a:	4b0e      	ldr	r3, [pc, #56]	; (8005c74 <LCD_Init+0x3e54>)
 8005c3c:	2280      	movs	r2, #128	; 0x80
 8005c3e:	615a      	str	r2, [r3, #20]
 8005c40:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <LCD_Init+0x3e54>)
 8005c42:	2280      	movs	r2, #128	; 0x80
 8005c44:	611a      	str	r2, [r3, #16]
 8005c46:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <LCD_Init+0x3e54>)
 8005c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4c:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005c4e:	2064      	movs	r0, #100	; 0x64
 8005c50:	f7fb ff36 	bl	8001ac0 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005c54:	2000      	movs	r0, #0
 8005c56:	f7fb ffd7 	bl	8001c08 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005c5a:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <LCD_Init+0x3e58>)
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005c60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005c64:	f000 f80a 	bl	8005c7c <LCD_Clear>
}
 8005c68:	bf00      	nop
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40010c00 	.word	0x40010c00
 8005c74:	40011000 	.word	0x40011000
 8005c78:	422201a8 	.word	0x422201a8

08005c7c <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005c8a:	4b2a      	ldr	r3, [pc, #168]	; (8005d34 <LCD_Clear+0xb8>)
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005c90:	4b28      	ldr	r3, [pc, #160]	; (8005d34 <LCD_Clear+0xb8>)
 8005c92:	885b      	ldrh	r3, [r3, #2]
 8005c94:	461a      	mov	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	fb02 f303 	mul.w	r3, r2, r3
 8005c9c:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005c9e:	4b25      	ldr	r3, [pc, #148]	; (8005d34 <LCD_Clear+0xb8>)
 8005ca0:	889b      	ldrh	r3, [r3, #4]
 8005ca2:	f646 0204 	movw	r2, #26628	; 0x6804
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d11a      	bne.n	8005ce0 <LCD_Clear+0x64>
 8005caa:	4b22      	ldr	r3, [pc, #136]	; (8005d34 <LCD_Clear+0xb8>)
 8005cac:	799b      	ldrb	r3, [r3, #6]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d116      	bne.n	8005ce0 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005cb2:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <LCD_Clear+0xb8>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005cb8:	4b1e      	ldr	r3, [pc, #120]	; (8005d34 <LCD_Clear+0xb8>)
 8005cba:	222a      	movs	r2, #42	; 0x2a
 8005cbc:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <LCD_Clear+0xb8>)
 8005cc0:	222b      	movs	r2, #43	; 0x2b
 8005cc2:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f7fa fe86 	bl	80009d8 <LCD_SetCursor>
		lcddev.dir = 1;
 8005ccc:	4b19      	ldr	r3, [pc, #100]	; (8005d34 <LCD_Clear+0xb8>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005cd2:	4b18      	ldr	r3, [pc, #96]	; (8005d34 <LCD_Clear+0xb8>)
 8005cd4:	222b      	movs	r2, #43	; 0x2b
 8005cd6:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005cd8:	4b16      	ldr	r3, [pc, #88]	; (8005d34 <LCD_Clear+0xb8>)
 8005cda:	222a      	movs	r2, #42	; 0x2a
 8005cdc:	819a      	strh	r2, [r3, #12]
 8005cde:	e003      	b.n	8005ce8 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	f7fa fe78 	bl	80009d8 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005ce8:	f7fa fe6a 	bl	80009c0 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e017      	b.n	8005d22 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005cf2:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <LCD_Clear+0xbc>)
 8005cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cf8:	611a      	str	r2, [r3, #16]
 8005cfa:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <LCD_Clear+0xbc>)
 8005cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d00:	615a      	str	r2, [r3, #20]
 8005d02:	4a0e      	ldr	r2, [pc, #56]	; (8005d3c <LCD_Clear+0xc0>)
 8005d04:	88fb      	ldrh	r3, [r7, #6]
 8005d06:	60d3      	str	r3, [r2, #12]
 8005d08:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <LCD_Clear+0xbc>)
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	615a      	str	r2, [r3, #20]
 8005d0e:	4b0a      	ldr	r3, [pc, #40]	; (8005d38 <LCD_Clear+0xbc>)
 8005d10:	2280      	movs	r2, #128	; 0x80
 8005d12:	611a      	str	r2, [r3, #16]
 8005d14:	4b08      	ldr	r3, [pc, #32]	; (8005d38 <LCD_Clear+0xbc>)
 8005d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d1a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d3e3      	bcc.n	8005cf2 <LCD_Clear+0x76>
}
 8005d2a:	bf00      	nop
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20009ce0 	.word	0x20009ce0
 8005d38:	40011000 	.word	0x40011000
 8005d3c:	40010c00 	.word	0x40010c00

08005d40 <LCD_Color_Fill>:
	}
}
// Fill the area with color
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
void LCD_Color_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t *color) {
 8005d40:	b590      	push	{r4, r7, lr}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4623      	mov	r3, r4
 8005d50:	80fb      	strh	r3, [r7, #6]
 8005d52:	4603      	mov	r3, r0
 8005d54:	80bb      	strh	r3, [r7, #4]
 8005d56:	460b      	mov	r3, r1
 8005d58:	807b      	strh	r3, [r7, #2]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	803b      	strh	r3, [r7, #0]
	uint16_t height, width;
	uint16_t i, j;
	width = ex - sx + 1; 			//得到填充的宽度
 8005d5e:	887a      	ldrh	r2, [r7, #2]
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3301      	adds	r3, #1
 8005d68:	817b      	strh	r3, [r7, #10]
	height = ey - sy + 1;			//高度
 8005d6a:	883a      	ldrh	r2, [r7, #0]
 8005d6c:	88bb      	ldrh	r3, [r7, #4]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3301      	adds	r3, #1
 8005d74:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < height; i++) {
 8005d76:	2300      	movs	r3, #0
 8005d78:	81fb      	strh	r3, [r7, #14]
 8005d7a:	e035      	b.n	8005de8 <LCD_Color_Fill+0xa8>
		LCD_SetCursor(sx, sy + i);   	//设置光标位置
 8005d7c:	88ba      	ldrh	r2, [r7, #4]
 8005d7e:	89fb      	ldrh	r3, [r7, #14]
 8005d80:	4413      	add	r3, r2
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	4611      	mov	r1, r2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fa fe25 	bl	80009d8 <LCD_SetCursor>
		LCD_WriteRAM_Prepare();     //开始写入GRAM
 8005d8e:	f7fa fe17 	bl	80009c0 <LCD_WriteRAM_Prepare>
		for (j = 0; j < width; j++)
 8005d92:	2300      	movs	r3, #0
 8005d94:	81bb      	strh	r3, [r7, #12]
 8005d96:	e020      	b.n	8005dda <LCD_Color_Fill+0x9a>
			LCD_WR_DATA(color[i * width + j]);     //写入数据
 8005d98:	4b18      	ldr	r3, [pc, #96]	; (8005dfc <LCD_Color_Fill+0xbc>)
 8005d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d9e:	611a      	str	r2, [r3, #16]
 8005da0:	4b16      	ldr	r3, [pc, #88]	; (8005dfc <LCD_Color_Fill+0xbc>)
 8005da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da6:	615a      	str	r2, [r3, #20]
 8005da8:	89fb      	ldrh	r3, [r7, #14]
 8005daa:	897a      	ldrh	r2, [r7, #10]
 8005dac:	fb02 f203 	mul.w	r2, r2, r3
 8005db0:	89bb      	ldrh	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	6a3a      	ldr	r2, [r7, #32]
 8005db8:	4413      	add	r3, r2
 8005dba:	881a      	ldrh	r2, [r3, #0]
 8005dbc:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <LCD_Color_Fill+0xc0>)
 8005dbe:	60da      	str	r2, [r3, #12]
 8005dc0:	4b0e      	ldr	r3, [pc, #56]	; (8005dfc <LCD_Color_Fill+0xbc>)
 8005dc2:	2280      	movs	r2, #128	; 0x80
 8005dc4:	615a      	str	r2, [r3, #20]
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <LCD_Color_Fill+0xbc>)
 8005dc8:	2280      	movs	r2, #128	; 0x80
 8005dca:	611a      	str	r2, [r3, #16]
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <LCD_Color_Fill+0xbc>)
 8005dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd2:	611a      	str	r2, [r3, #16]
		for (j = 0; j < width; j++)
 8005dd4:	89bb      	ldrh	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	81bb      	strh	r3, [r7, #12]
 8005dda:	89ba      	ldrh	r2, [r7, #12]
 8005ddc:	897b      	ldrh	r3, [r7, #10]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d3da      	bcc.n	8005d98 <LCD_Color_Fill+0x58>
	for (i = 0; i < height; i++) {
 8005de2:	89fb      	ldrh	r3, [r7, #14]
 8005de4:	3301      	adds	r3, #1
 8005de6:	81fb      	strh	r3, [r7, #14]
 8005de8:	89fa      	ldrh	r2, [r7, #14]
 8005dea:	893b      	ldrh	r3, [r7, #8]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d3c5      	bcc.n	8005d7c <LCD_Color_Fill+0x3c>
	}
}
 8005df0:	bf00      	nop
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd90      	pop	{r4, r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40011000 	.word	0x40011000
 8005e00:	40010c00 	.word	0x40010c00

08005e04 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8005e04:	b590      	push	{r4, r7, lr}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	4611      	mov	r1, r2
 8005e10:	461a      	mov	r2, r3
 8005e12:	4623      	mov	r3, r4
 8005e14:	80fb      	strh	r3, [r7, #6]
 8005e16:	4603      	mov	r3, r0
 8005e18:	80bb      	strh	r3, [r7, #4]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	70fb      	strb	r3, [r7, #3]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8005e22:	88bb      	ldrh	r3, [r7, #4]
 8005e24:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8005e26:	78bb      	ldrb	r3, [r7, #2]
 8005e28:	08db      	lsrs	r3, r3, #3
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	78bb      	ldrb	r3, [r7, #2]
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf14      	ite	ne
 8005e3a:	2301      	movne	r3, #1
 8005e3c:	2300      	moveq	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	4413      	add	r3, r2
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	78ba      	ldrb	r2, [r7, #2]
 8005e46:	0852      	lsrs	r2, r2, #1
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	3b20      	subs	r3, #32
 8005e54:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8005e56:	2300      	movs	r3, #0
 8005e58:	737b      	strb	r3, [r7, #13]
 8005e5a:	e069      	b.n	8005f30 <LCD_ShowChar+0x12c>
		if (size == 12)
 8005e5c:	78bb      	ldrb	r3, [r7, #2]
 8005e5e:	2b0c      	cmp	r3, #12
 8005e60:	d10b      	bne.n	8005e7a <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	7b79      	ldrb	r1, [r7, #13]
 8005e66:	4838      	ldr	r0, [pc, #224]	; (8005f48 <LCD_ShowChar+0x144>)
 8005e68:	4613      	mov	r3, r2
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4403      	add	r3, r0
 8005e72:	440b      	add	r3, r1
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	73fb      	strb	r3, [r7, #15]
 8005e78:	e019      	b.n	8005eae <LCD_ShowChar+0xaa>
		else if (size == 16)
 8005e7a:	78bb      	ldrb	r3, [r7, #2]
 8005e7c:	2b10      	cmp	r3, #16
 8005e7e:	d108      	bne.n	8005e92 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	7b7b      	ldrb	r3, [r7, #13]
 8005e84:	4931      	ldr	r1, [pc, #196]	; (8005f4c <LCD_ShowChar+0x148>)
 8005e86:	0112      	lsls	r2, r2, #4
 8005e88:	440a      	add	r2, r1
 8005e8a:	4413      	add	r3, r2
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	73fb      	strb	r3, [r7, #15]
 8005e90:	e00d      	b.n	8005eae <LCD_ShowChar+0xaa>
		else if (size == 24)
 8005e92:	78bb      	ldrb	r3, [r7, #2]
 8005e94:	2b18      	cmp	r3, #24
 8005e96:	d150      	bne.n	8005f3a <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8005e98:	78fa      	ldrb	r2, [r7, #3]
 8005e9a:	7b79      	ldrb	r1, [r7, #13]
 8005e9c:	482c      	ldr	r0, [pc, #176]	; (8005f50 <LCD_ShowChar+0x14c>)
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4403      	add	r3, r0
 8005ea8:	440b      	add	r3, r1
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8005eae:	2300      	movs	r3, #0
 8005eb0:	73bb      	strb	r3, [r7, #14]
 8005eb2:	e035      	b.n	8005f20 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8005eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	da07      	bge.n	8005ecc <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8005ebc:	4b25      	ldr	r3, [pc, #148]	; (8005f54 <LCD_ShowChar+0x150>)
 8005ebe:	881a      	ldrh	r2, [r3, #0]
 8005ec0:	88b9      	ldrh	r1, [r7, #4]
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fb fb65 	bl	8001594 <LCD_Fast_DrawPoint>
 8005eca:	e00a      	b.n	8005ee2 <LCD_ShowChar+0xde>
			else if (mode == 0)
 8005ecc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d106      	bne.n	8005ee2 <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8005ed4:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <LCD_ShowChar+0x154>)
 8005ed6:	881a      	ldrh	r2, [r3, #0]
 8005ed8:	88b9      	ldrh	r1, [r7, #4]
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fb fb59 	bl	8001594 <LCD_Fast_DrawPoint>
			temp <<= 1;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
			y++;
 8005ee8:	88bb      	ldrh	r3, [r7, #4]
 8005eea:	3301      	adds	r3, #1
 8005eec:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8005eee:	4b1b      	ldr	r3, [pc, #108]	; (8005f5c <LCD_ShowChar+0x158>)
 8005ef0:	885b      	ldrh	r3, [r3, #2]
 8005ef2:	88ba      	ldrh	r2, [r7, #4]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d222      	bcs.n	8005f3e <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8005ef8:	88ba      	ldrh	r2, [r7, #4]
 8005efa:	897b      	ldrh	r3, [r7, #10]
 8005efc:	1ad2      	subs	r2, r2, r3
 8005efe:	78bb      	ldrb	r3, [r7, #2]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d10a      	bne.n	8005f1a <LCD_ShowChar+0x116>
				y = y0;
 8005f04:	897b      	ldrh	r3, [r7, #10]
 8005f06:	80bb      	strh	r3, [r7, #4]
				x++;
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8005f0e:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <LCD_ShowChar+0x158>)
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	88fa      	ldrh	r2, [r7, #6]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d307      	bcc.n	8005f28 <LCD_ShowChar+0x124>
					return;	//超区域了
 8005f18:	e012      	b.n	8005f40 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8005f1a:	7bbb      	ldrb	r3, [r7, #14]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	73bb      	strb	r3, [r7, #14]
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
 8005f22:	2b07      	cmp	r3, #7
 8005f24:	d9c6      	bls.n	8005eb4 <LCD_ShowChar+0xb0>
 8005f26:	e000      	b.n	8005f2a <LCD_ShowChar+0x126>
				break;
 8005f28:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8005f2a:	7b7b      	ldrb	r3, [r7, #13]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	737b      	strb	r3, [r7, #13]
 8005f30:	7b7a      	ldrb	r2, [r7, #13]
 8005f32:	7a7b      	ldrb	r3, [r7, #9]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d391      	bcc.n	8005e5c <LCD_ShowChar+0x58>
 8005f38:	e002      	b.n	8005f40 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8005f3a:	bf00      	nop
 8005f3c:	e000      	b.n	8005f40 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8005f3e:	bf00      	nop
			}
		}
	}
}
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd90      	pop	{r4, r7, pc}
 8005f46:	bf00      	nop
 8005f48:	0800976c 	.word	0x0800976c
 8005f4c:	08009be0 	.word	0x08009be0
 8005f50:	0800a1d0 	.word	0x0800a1d0
 8005f54:	20009cd0 	.word	0x20009cd0
 8005f58:	20000000 	.word	0x20000000
 8005f5c:	20009ce0 	.word	0x20009ce0

08005f60 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8005f60:	b590      	push	{r4, r7, lr}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4623      	mov	r3, r4
 8005f70:	80fb      	strh	r3, [r7, #6]
 8005f72:	4603      	mov	r3, r0
 8005f74:	80bb      	strh	r3, [r7, #4]
 8005f76:	460b      	mov	r3, r1
 8005f78:	807b      	strh	r3, [r7, #2]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8005f7e:	88fb      	ldrh	r3, [r7, #6]
 8005f80:	73fb      	strb	r3, [r7, #15]
	width += x;
 8005f82:	887a      	ldrh	r2, [r7, #2]
 8005f84:	88fb      	ldrh	r3, [r7, #6]
 8005f86:	4413      	add	r3, r2
 8005f88:	807b      	strh	r3, [r7, #2]
	height += y;
 8005f8a:	883a      	ldrh	r2, [r7, #0]
 8005f8c:	88bb      	ldrh	r3, [r7, #4]
 8005f8e:	4413      	add	r3, r2
 8005f90:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8005f92:	e024      	b.n	8005fde <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	887b      	ldrh	r3, [r7, #2]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d307      	bcc.n	8005fac <LCD_ShowString+0x4c>
			x = x0;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	80fb      	strh	r3, [r7, #6]
			y += size;
 8005fa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	88bb      	ldrh	r3, [r7, #4]
 8005fa8:	4413      	add	r3, r2
 8005faa:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8005fac:	88ba      	ldrh	r2, [r7, #4]
 8005fae:	883b      	ldrh	r3, [r7, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d21d      	bcs.n	8005ff0 <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	781a      	ldrb	r2, [r3, #0]
 8005fb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fbc:	88b9      	ldrh	r1, [r7, #4]
 8005fbe:	88f8      	ldrh	r0, [r7, #6]
 8005fc0:	2400      	movs	r4, #0
 8005fc2:	9400      	str	r4, [sp, #0]
 8005fc4:	f7ff ff1e 	bl	8005e04 <LCD_ShowChar>
		x += size / 2;
 8005fc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	80fb      	strh	r3, [r7, #6]
		p++;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	3301      	adds	r3, #1
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b7e      	cmp	r3, #126	; 0x7e
 8005fe4:	d805      	bhi.n	8005ff2 <LCD_ShowString+0x92>
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b1f      	cmp	r3, #31
 8005fec:	d8d2      	bhi.n	8005f94 <LCD_ShowString+0x34>
	}
}
 8005fee:	e000      	b.n	8005ff2 <LCD_ShowString+0x92>
			break;	//退出
 8005ff0:	bf00      	nop
}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd90      	pop	{r4, r7, pc}
	...

08005ffc <judge_mode>:

}

//@parameter next : 0 for over ,1 for continue

static void judge_mode(int total_score,int next){
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08c      	sub	sp, #48	; 0x30
 8006000:	af02      	add	r7, sp, #8
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
	char msg[30];
	POINT_COLOR = BLACK;
 8006006:	4b1c      	ldr	r3, [pc, #112]	; (8006078 <judge_mode+0x7c>)
 8006008:	2200      	movs	r2, #0
 800600a:	801a      	strh	r2, [r3, #0]
	if(next){
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <judge_mode+0x2c>
		LCD_ShowString(10, 10, 200, 24, 24, "Continue");
 8006012:	4b1a      	ldr	r3, [pc, #104]	; (800607c <judge_mode+0x80>)
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	2318      	movs	r3, #24
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	2318      	movs	r3, #24
 800601c:	22c8      	movs	r2, #200	; 0xc8
 800601e:	210a      	movs	r1, #10
 8006020:	200a      	movs	r0, #10
 8006022:	f7ff ff9d 	bl	8005f60 <LCD_ShowString>
 8006026:	e009      	b.n	800603c <judge_mode+0x40>
	}else{
		LCD_ShowString(10, 10, 200, 24, 24, "Over");
 8006028:	4b15      	ldr	r3, [pc, #84]	; (8006080 <judge_mode+0x84>)
 800602a:	9301      	str	r3, [sp, #4]
 800602c:	2318      	movs	r3, #24
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	2318      	movs	r3, #24
 8006032:	22c8      	movs	r2, #200	; 0xc8
 8006034:	210a      	movs	r1, #10
 8006036:	200a      	movs	r0, #10
 8006038:	f7ff ff92 	bl	8005f60 <LCD_ShowString>
	}
	sprintf(msg, "Total points: %d",total_score);
 800603c:	f107 0308 	add.w	r3, r7, #8
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	4910      	ldr	r1, [pc, #64]	; (8006084 <judge_mode+0x88>)
 8006044:	4618      	mov	r0, r3
 8006046:	f002 ff03 	bl	8008e50 <siprintf>
	LCD_ShowString(10, 40, 200, 24, 24, msg);
 800604a:	f107 0308 	add.w	r3, r7, #8
 800604e:	9301      	str	r3, [sp, #4]
 8006050:	2318      	movs	r3, #24
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	2318      	movs	r3, #24
 8006056:	22c8      	movs	r2, #200	; 0xc8
 8006058:	2128      	movs	r1, #40	; 0x28
 800605a:	200a      	movs	r0, #10
 800605c:	f7ff ff80 	bl	8005f60 <LCD_ShowString>
	LCD_Color_Fill(1,101,200,200,cow_color); //指定区域填充色块（color为色块数组）
 8006060:	4b09      	ldr	r3, [pc, #36]	; (8006088 <judge_mode+0x8c>)
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	23c8      	movs	r3, #200	; 0xc8
 8006066:	22c8      	movs	r2, #200	; 0xc8
 8006068:	2165      	movs	r1, #101	; 0x65
 800606a:	2001      	movs	r0, #1
 800606c:	f7ff fe68 	bl	8005d40 <LCD_Color_Fill>

}
 8006070:	bf00      	nop
 8006072:	3728      	adds	r7, #40	; 0x28
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20009cd0 	.word	0x20009cd0
 800607c:	08009734 	.word	0x08009734
 8006080:	08009740 	.word	0x08009740
 8006084:	08009748 	.word	0x08009748
 8006088:	20000004 	.word	0x20000004

0800608c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006090:	f000 fcaa 	bl	80069e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006094:	f000 f8a0 	bl	80061d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006098:	f000 f984 	bl	80063a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800609c:	f000 f8e2 	bl	8006264 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80060a0:	f000 f92c 	bl	80062fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80060a4:	f000 f954 	bl	8006350 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &res1, 1);  		//开启串口1中断 需要修改IRHandler
 80060a8:	2201      	movs	r2, #1
 80060aa:	4942      	ldr	r1, [pc, #264]	; (80061b4 <main+0x128>)
 80060ac:	4842      	ldr	r0, [pc, #264]	; (80061b8 <main+0x12c>)
 80060ae:	f002 fa44 	bl	800853a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &res2, 1);  		//开启串口2中断 需要修改IRHandler
 80060b2:	2201      	movs	r2, #1
 80060b4:	4941      	ldr	r1, [pc, #260]	; (80061bc <main+0x130>)
 80060b6:	4842      	ldr	r0, [pc, #264]	; (80061c0 <main+0x134>)
 80060b8:	f002 fa3f 	bl	800853a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80060bc:	4841      	ldr	r0, [pc, #260]	; (80061c4 <main+0x138>)
 80060be:	f001 fd7f 	bl	8007bc0 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_DISABLE(&htim2);
 80060c2:	4b40      	ldr	r3, [pc, #256]	; (80061c4 <main+0x138>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6a1a      	ldr	r2, [r3, #32]
 80060c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10f      	bne.n	80060f2 <main+0x66>
 80060d2:	4b3c      	ldr	r3, [pc, #240]	; (80061c4 <main+0x138>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6a1a      	ldr	r2, [r3, #32]
 80060d8:	f240 4344 	movw	r3, #1092	; 0x444
 80060dc:	4013      	ands	r3, r2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d107      	bne.n	80060f2 <main+0x66>
 80060e2:	4b38      	ldr	r3, [pc, #224]	; (80061c4 <main+0x138>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	4b36      	ldr	r3, [pc, #216]	; (80061c4 <main+0x138>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0201 	bic.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]

  USART1_RX_STA=0;
 80060f2:	4b35      	ldr	r3, [pc, #212]	; (80061c8 <main+0x13c>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	801a      	strh	r2, [r3, #0]
  USART2_RX_STA=0;
 80060f8:	4b34      	ldr	r3, [pc, #208]	; (80061cc <main+0x140>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	801a      	strh	r2, [r3, #0]
  LCD_Init();
 80060fe:	f7fb fe8f 	bl	8001e20 <LCD_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (USART1_RX_STA&0x8000) {	//收到来自串口的消息
 8006102:	4b31      	ldr	r3, [pc, #196]	; (80061c8 <main+0x13c>)
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	b21b      	sxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	da32      	bge.n	8006174 <main+0xe8>
		  USART1_RX_STA &= 0x3fff;
 800610e:	4b2e      	ldr	r3, [pc, #184]	; (80061c8 <main+0x13c>)
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006118:	b29a      	uxth	r2, r3
 800611a:	4b2b      	ldr	r3, [pc, #172]	; (80061c8 <main+0x13c>)
 800611c:	801a      	strh	r2, [r3, #0]
		  USART1_RX_BUF[USART1_RX_STA++] = 0x0d;
 800611e:	4b2a      	ldr	r3, [pc, #168]	; (80061c8 <main+0x13c>)
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	b291      	uxth	r1, r2
 8006128:	4a27      	ldr	r2, [pc, #156]	; (80061c8 <main+0x13c>)
 800612a:	8011      	strh	r1, [r2, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <main+0x144>)
 8006130:	210d      	movs	r1, #13
 8006132:	5499      	strb	r1, [r3, r2]
		  USART1_RX_BUF[USART1_RX_STA++] = 0x0a;
 8006134:	4b24      	ldr	r3, [pc, #144]	; (80061c8 <main+0x13c>)
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	b29b      	uxth	r3, r3
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	b291      	uxth	r1, r2
 800613e:	4a22      	ldr	r2, [pc, #136]	; (80061c8 <main+0x13c>)
 8006140:	8011      	strh	r1, [r2, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	4b22      	ldr	r3, [pc, #136]	; (80061d0 <main+0x144>)
 8006146:	210a      	movs	r1, #10
 8006148:	5499      	strb	r1, [r3, r2]

		  HAL_UART_Transmit(&huart1, USART1_RX_BUF, USART1_RX_STA, HAL_MAX_DELAY);	//回显
 800614a:	4b1f      	ldr	r3, [pc, #124]	; (80061c8 <main+0x13c>)
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	b29a      	uxth	r2, r3
 8006150:	f04f 33ff 	mov.w	r3, #4294967295
 8006154:	491e      	ldr	r1, [pc, #120]	; (80061d0 <main+0x144>)
 8006156:	4818      	ldr	r0, [pc, #96]	; (80061b8 <main+0x12c>)
 8006158:	f002 f95d 	bl	8008416 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, USART1_RX_BUF, USART1_RX_STA, HAL_MAX_DELAY);  //发送给蓝牙
 800615c:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <main+0x13c>)
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29a      	uxth	r2, r3
 8006162:	f04f 33ff 	mov.w	r3, #4294967295
 8006166:	491a      	ldr	r1, [pc, #104]	; (80061d0 <main+0x144>)
 8006168:	4815      	ldr	r0, [pc, #84]	; (80061c0 <main+0x134>)
 800616a:	f002 f954 	bl	8008416 <HAL_UART_Transmit>
		  USART1_RX_STA = 0;
 800616e:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <main+0x13c>)
 8006170:	2200      	movs	r2, #0
 8006172:	801a      	strh	r2, [r3, #0]
	  }

	  if (USART2_RX_STA&0x8000) {	//收到来自蓝牙的消息
 8006174:	4b15      	ldr	r3, [pc, #84]	; (80061cc <main+0x140>)
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	b29b      	uxth	r3, r3
 800617a:	b21b      	sxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	da13      	bge.n	80061a8 <main+0x11c>
		  USART2_RX_STA &= 0x3fff;
 8006180:	4b12      	ldr	r3, [pc, #72]	; (80061cc <main+0x140>)
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800618a:	b29a      	uxth	r2, r3
 800618c:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <main+0x140>)
 800618e:	801a      	strh	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1, USART2_RX_BUF, USART2_RX_STA, HAL_MAX_DELAY);
 8006190:	4b0e      	ldr	r3, [pc, #56]	; (80061cc <main+0x140>)
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29a      	uxth	r2, r3
 8006196:	f04f 33ff 	mov.w	r3, #4294967295
 800619a:	490e      	ldr	r1, [pc, #56]	; (80061d4 <main+0x148>)
 800619c:	4806      	ldr	r0, [pc, #24]	; (80061b8 <main+0x12c>)
 800619e:	f002 f93a 	bl	8008416 <HAL_UART_Transmit>

		  USART2_RX_STA = 0;
 80061a2:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <main+0x140>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	801a      	strh	r2, [r3, #0]

//	  char content[30];
//	  sprintf(content, "1+1");
//	  question_mode(content,4,15);
//	  answer_received_mode(1);
	  judge_mode(30,0);
 80061a8:	2100      	movs	r1, #0
 80061aa:	201e      	movs	r0, #30
 80061ac:	f7ff ff26 	bl	8005ffc <judge_mode>
	  if (USART1_RX_STA&0x8000) {	//收到来自串口的消息
 80061b0:	e7a7      	b.n	8006102 <main+0x76>
 80061b2:	bf00      	nop
 80061b4:	20009cf1 	.word	0x20009cf1
 80061b8:	20009e88 	.word	0x20009e88
 80061bc:	20009cf0 	.word	0x20009cf0
 80061c0:	2000a3c4 	.word	0x2000a3c4
 80061c4:	2000a37c 	.word	0x2000a37c
 80061c8:	20009cf4 	.word	0x20009cf4
 80061cc:	20009cf2 	.word	0x20009cf2
 80061d0:	2000a05c 	.word	0x2000a05c
 80061d4:	20009cf8 	.word	0x20009cf8

080061d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b090      	sub	sp, #64	; 0x40
 80061dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80061de:	f107 0318 	add.w	r3, r7, #24
 80061e2:	2228      	movs	r2, #40	; 0x28
 80061e4:	2100      	movs	r1, #0
 80061e6:	4618      	mov	r0, r3
 80061e8:	f002 fe2a 	bl	8008e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061ec:	1d3b      	adds	r3, r7, #4
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	605a      	str	r2, [r3, #4]
 80061f4:	609a      	str	r2, [r3, #8]
 80061f6:	60da      	str	r2, [r3, #12]
 80061f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80061fa:	2301      	movs	r3, #1
 80061fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80061fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006202:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006204:	2300      	movs	r3, #0
 8006206:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006208:	2301      	movs	r3, #1
 800620a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800620c:	2302      	movs	r3, #2
 800620e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006216:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800621c:	f107 0318 	add.w	r3, r7, #24
 8006220:	4618      	mov	r0, r3
 8006222:	f001 f863 	bl	80072ec <HAL_RCC_OscConfig>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800622c:	f000 fa36 	bl	800669c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006230:	230f      	movs	r3, #15
 8006232:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006234:	2302      	movs	r3, #2
 8006236:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800623c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006246:	1d3b      	adds	r3, r7, #4
 8006248:	2102      	movs	r1, #2
 800624a:	4618      	mov	r0, r3
 800624c:	f001 face 	bl	80077ec <HAL_RCC_ClockConfig>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006256:	f000 fa21 	bl	800669c <Error_Handler>
  }
}
 800625a:	bf00      	nop
 800625c:	3740      	adds	r7, #64	; 0x40
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800626a:	f107 0308 	add.w	r3, r7, #8
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	605a      	str	r2, [r3, #4]
 8006274:	609a      	str	r2, [r3, #8]
 8006276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006278:	463b      	mov	r3, r7
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006280:	4b1d      	ldr	r3, [pc, #116]	; (80062f8 <MX_TIM2_Init+0x94>)
 8006282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006286:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8006288:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <MX_TIM2_Init+0x94>)
 800628a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800628e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006290:	4b19      	ldr	r3, [pc, #100]	; (80062f8 <MX_TIM2_Init+0x94>)
 8006292:	2200      	movs	r2, #0
 8006294:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8006296:	4b18      	ldr	r3, [pc, #96]	; (80062f8 <MX_TIM2_Init+0x94>)
 8006298:	2263      	movs	r2, #99	; 0x63
 800629a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800629c:	4b16      	ldr	r3, [pc, #88]	; (80062f8 <MX_TIM2_Init+0x94>)
 800629e:	2200      	movs	r2, #0
 80062a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062a2:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <MX_TIM2_Init+0x94>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80062a8:	4813      	ldr	r0, [pc, #76]	; (80062f8 <MX_TIM2_Init+0x94>)
 80062aa:	f001 fc39 	bl	8007b20 <HAL_TIM_Base_Init>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80062b4:	f000 f9f2 	bl	800669c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80062b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80062be:	f107 0308 	add.w	r3, r7, #8
 80062c2:	4619      	mov	r1, r3
 80062c4:	480c      	ldr	r0, [pc, #48]	; (80062f8 <MX_TIM2_Init+0x94>)
 80062c6:	f001 fde3 	bl	8007e90 <HAL_TIM_ConfigClockSource>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80062d0:	f000 f9e4 	bl	800669c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062d4:	2300      	movs	r3, #0
 80062d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062d8:	2300      	movs	r3, #0
 80062da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80062dc:	463b      	mov	r3, r7
 80062de:	4619      	mov	r1, r3
 80062e0:	4805      	ldr	r0, [pc, #20]	; (80062f8 <MX_TIM2_Init+0x94>)
 80062e2:	f001 ffcd 	bl	8008280 <HAL_TIMEx_MasterConfigSynchronization>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80062ec:	f000 f9d6 	bl	800669c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80062f0:	bf00      	nop
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	2000a37c 	.word	0x2000a37c

080062fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006300:	4b11      	ldr	r3, [pc, #68]	; (8006348 <MX_USART1_UART_Init+0x4c>)
 8006302:	4a12      	ldr	r2, [pc, #72]	; (800634c <MX_USART1_UART_Init+0x50>)
 8006304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006306:	4b10      	ldr	r3, [pc, #64]	; (8006348 <MX_USART1_UART_Init+0x4c>)
 8006308:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800630c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800630e:	4b0e      	ldr	r3, [pc, #56]	; (8006348 <MX_USART1_UART_Init+0x4c>)
 8006310:	2200      	movs	r2, #0
 8006312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006314:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <MX_USART1_UART_Init+0x4c>)
 8006316:	2200      	movs	r2, #0
 8006318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <MX_USART1_UART_Init+0x4c>)
 800631c:	2200      	movs	r2, #0
 800631e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006320:	4b09      	ldr	r3, [pc, #36]	; (8006348 <MX_USART1_UART_Init+0x4c>)
 8006322:	220c      	movs	r2, #12
 8006324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006326:	4b08      	ldr	r3, [pc, #32]	; (8006348 <MX_USART1_UART_Init+0x4c>)
 8006328:	2200      	movs	r2, #0
 800632a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <MX_USART1_UART_Init+0x4c>)
 800632e:	2200      	movs	r2, #0
 8006330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006332:	4805      	ldr	r0, [pc, #20]	; (8006348 <MX_USART1_UART_Init+0x4c>)
 8006334:	f002 f822 	bl	800837c <HAL_UART_Init>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800633e:	f000 f9ad 	bl	800669c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006342:	bf00      	nop
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20009e88 	.word	0x20009e88
 800634c:	40013800 	.word	0x40013800

08006350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006354:	4b11      	ldr	r3, [pc, #68]	; (800639c <MX_USART2_UART_Init+0x4c>)
 8006356:	4a12      	ldr	r2, [pc, #72]	; (80063a0 <MX_USART2_UART_Init+0x50>)
 8006358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800635a:	4b10      	ldr	r3, [pc, #64]	; (800639c <MX_USART2_UART_Init+0x4c>)
 800635c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006362:	4b0e      	ldr	r3, [pc, #56]	; (800639c <MX_USART2_UART_Init+0x4c>)
 8006364:	2200      	movs	r2, #0
 8006366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006368:	4b0c      	ldr	r3, [pc, #48]	; (800639c <MX_USART2_UART_Init+0x4c>)
 800636a:	2200      	movs	r2, #0
 800636c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800636e:	4b0b      	ldr	r3, [pc, #44]	; (800639c <MX_USART2_UART_Init+0x4c>)
 8006370:	2200      	movs	r2, #0
 8006372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006374:	4b09      	ldr	r3, [pc, #36]	; (800639c <MX_USART2_UART_Init+0x4c>)
 8006376:	220c      	movs	r2, #12
 8006378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800637a:	4b08      	ldr	r3, [pc, #32]	; (800639c <MX_USART2_UART_Init+0x4c>)
 800637c:	2200      	movs	r2, #0
 800637e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <MX_USART2_UART_Init+0x4c>)
 8006382:	2200      	movs	r2, #0
 8006384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006386:	4805      	ldr	r0, [pc, #20]	; (800639c <MX_USART2_UART_Init+0x4c>)
 8006388:	f001 fff8 	bl	800837c <HAL_UART_Init>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006392:	f000 f983 	bl	800669c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006396:	bf00      	nop
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	2000a3c4 	.word	0x2000a3c4
 80063a0:	40004400 	.word	0x40004400

080063a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063aa:	f107 0310 	add.w	r3, r7, #16
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	605a      	str	r2, [r3, #4]
 80063b4:	609a      	str	r2, [r3, #8]
 80063b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80063b8:	4b49      	ldr	r3, [pc, #292]	; (80064e0 <MX_GPIO_Init+0x13c>)
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	4a48      	ldr	r2, [pc, #288]	; (80064e0 <MX_GPIO_Init+0x13c>)
 80063be:	f043 0320 	orr.w	r3, r3, #32
 80063c2:	6193      	str	r3, [r2, #24]
 80063c4:	4b46      	ldr	r3, [pc, #280]	; (80064e0 <MX_GPIO_Init+0x13c>)
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80063d0:	4b43      	ldr	r3, [pc, #268]	; (80064e0 <MX_GPIO_Init+0x13c>)
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	4a42      	ldr	r2, [pc, #264]	; (80064e0 <MX_GPIO_Init+0x13c>)
 80063d6:	f043 0304 	orr.w	r3, r3, #4
 80063da:	6193      	str	r3, [r2, #24]
 80063dc:	4b40      	ldr	r3, [pc, #256]	; (80064e0 <MX_GPIO_Init+0x13c>)
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	60bb      	str	r3, [r7, #8]
 80063e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80063e8:	4b3d      	ldr	r3, [pc, #244]	; (80064e0 <MX_GPIO_Init+0x13c>)
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	4a3c      	ldr	r2, [pc, #240]	; (80064e0 <MX_GPIO_Init+0x13c>)
 80063ee:	f043 0310 	orr.w	r3, r3, #16
 80063f2:	6193      	str	r3, [r2, #24]
 80063f4:	4b3a      	ldr	r3, [pc, #232]	; (80064e0 <MX_GPIO_Init+0x13c>)
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	607b      	str	r3, [r7, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_EN_GPIO_Port, BL_EN_Pin, GPIO_PIN_RESET);
 8006400:	2200      	movs	r2, #0
 8006402:	2110      	movs	r1, #16
 8006404:	4837      	ldr	r0, [pc, #220]	; (80064e4 <MX_GPIO_Init+0x140>)
 8006406:	f000 ff59 	bl	80072bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800640a:	2200      	movs	r2, #0
 800640c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006410:	4835      	ldr	r0, [pc, #212]	; (80064e8 <MX_GPIO_Init+0x144>)
 8006412:	f000 ff53 	bl	80072bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8006416:	2200      	movs	r2, #0
 8006418:	2104      	movs	r1, #4
 800641a:	4834      	ldr	r0, [pc, #208]	; (80064ec <MX_GPIO_Init+0x148>)
 800641c:	f000 ff4e 	bl	80072bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8006420:	2301      	movs	r3, #1
 8006422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006424:	2300      	movs	r3, #0
 8006426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006428:	2302      	movs	r3, #2
 800642a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 800642c:	f107 0310 	add.w	r3, r7, #16
 8006430:	4619      	mov	r1, r3
 8006432:	482d      	ldr	r0, [pc, #180]	; (80064e8 <MX_GPIO_Init+0x144>)
 8006434:	f000 fdae 	bl	8006f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATE_Pin */
  GPIO_InitStruct.Pin = STATE_Pin;
 8006438:	2310      	movs	r3, #16
 800643a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006440:	2300      	movs	r3, #0
 8006442:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATE_GPIO_Port, &GPIO_InitStruct);
 8006444:	f107 0310 	add.w	r3, r7, #16
 8006448:	4619      	mov	r1, r3
 800644a:	4827      	ldr	r0, [pc, #156]	; (80064e8 <MX_GPIO_Init+0x144>)
 800644c:	f000 fda2 	bl	8006f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BL_EN_Pin */
  GPIO_InitStruct.Pin = BL_EN_Pin;
 8006450:	2310      	movs	r3, #16
 8006452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006454:	2301      	movs	r3, #1
 8006456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006458:	2300      	movs	r3, #0
 800645a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800645c:	2302      	movs	r3, #2
 800645e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BL_EN_GPIO_Port, &GPIO_InitStruct);
 8006460:	f107 0310 	add.w	r3, r7, #16
 8006464:	4619      	mov	r1, r3
 8006466:	481f      	ldr	r0, [pc, #124]	; (80064e4 <MX_GPIO_Init+0x140>)
 8006468:	f000 fd94 	bl	8006f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 800646c:	2320      	movs	r3, #32
 800646e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006474:	2301      	movs	r3, #1
 8006476:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8006478:	f107 0310 	add.w	r3, r7, #16
 800647c:	4619      	mov	r1, r3
 800647e:	4819      	ldr	r0, [pc, #100]	; (80064e4 <MX_GPIO_Init+0x140>)
 8006480:	f000 fd88 	bl	8006f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8006484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800648a:	2301      	movs	r3, #1
 800648c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800648e:	2300      	movs	r3, #0
 8006490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006492:	2302      	movs	r3, #2
 8006494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8006496:	f107 0310 	add.w	r3, r7, #16
 800649a:	4619      	mov	r1, r3
 800649c:	4812      	ldr	r0, [pc, #72]	; (80064e8 <MX_GPIO_Init+0x144>)
 800649e:	f000 fd79 	bl	8006f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80064a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064a8:	2300      	movs	r3, #0
 80064aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064ac:	2301      	movs	r3, #1
 80064ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80064b0:	f107 0310 	add.w	r3, r7, #16
 80064b4:	4619      	mov	r1, r3
 80064b6:	480c      	ldr	r0, [pc, #48]	; (80064e8 <MX_GPIO_Init+0x144>)
 80064b8:	f000 fd6c 	bl	8006f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80064bc:	2304      	movs	r3, #4
 80064be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064c0:	2301      	movs	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064c8:	2302      	movs	r3, #2
 80064ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80064cc:	f107 0310 	add.w	r3, r7, #16
 80064d0:	4619      	mov	r1, r3
 80064d2:	4806      	ldr	r0, [pc, #24]	; (80064ec <MX_GPIO_Init+0x148>)
 80064d4:	f000 fd5e 	bl	8006f94 <HAL_GPIO_Init>

}
 80064d8:	bf00      	nop
 80064da:	3720      	adds	r7, #32
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	40021000 	.word	0x40021000
 80064e4:	40011000 	.word	0x40011000
 80064e8:	40010800 	.word	0x40010800
 80064ec:	40011400 	.word	0x40011400

080064f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {	//定时器2 服务于蓝牙串口
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006500:	d126      	bne.n	8006550 <HAL_TIM_PeriodElapsedCallback+0x60>

	        __HAL_TIM_CLEAR_IT(&htim2,TIM_IT_UPDATE);            //清除中断
 8006502:	4b16      	ldr	r3, [pc, #88]	; (800655c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f06f 0201 	mvn.w	r2, #1
 800650a:	611a      	str	r2, [r3, #16]
	        USART2_RX_STA|=1<<15;	                             //标记接收完成
 800650c:	4b14      	ldr	r3, [pc, #80]	; (8006560 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651a:	b29a      	uxth	r2, r3
 800651c:	4b10      	ldr	r3, [pc, #64]	; (8006560 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800651e:	801a      	strh	r2, [r3, #0]
	        __HAL_TIM_DISABLE(&htim2);                           //关闭定时器2
 8006520:	4b0e      	ldr	r3, [pc, #56]	; (800655c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	f241 1311 	movw	r3, #4369	; 0x1111
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10f      	bne.n	8006550 <HAL_TIM_PeriodElapsedCallback+0x60>
 8006530:	4b0a      	ldr	r3, [pc, #40]	; (800655c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6a1a      	ldr	r2, [r3, #32]
 8006536:	f240 4344 	movw	r3, #1092	; 0x444
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d107      	bne.n	8006550 <HAL_TIM_PeriodElapsedCallback+0x60>
 8006540:	4b06      	ldr	r3, [pc, #24]	; (800655c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4b05      	ldr	r3, [pc, #20]	; (800655c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]

	}
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	2000a37c 	.word	0x2000a37c
 8006560:	20009cf2 	.word	0x20009cf2

08006564 <HAL_UART_RxCpltCallback>:

// USART1_RX_STA 第16位 置1表示接收完 第14位 置1表示收到\r
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){	// 串口1：与电脑相连
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a41      	ldr	r2, [pc, #260]	; (8006678 <HAL_UART_RxCpltCallback+0x114>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d142      	bne.n	80065fc <HAL_UART_RxCpltCallback+0x98>

//		HAL_UART_Transmit(&huart1, &res1, 1, HAL_MAX_DELAY);
			if((USART1_RX_STA&0x8000)==0)//接收未完成
 8006576:	4b41      	ldr	r3, [pc, #260]	; (800667c <HAL_UART_RxCpltCallback+0x118>)
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	b29b      	uxth	r3, r3
 800657c:	b21b      	sxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	db75      	blt.n	800666e <HAL_UART_RxCpltCallback+0x10a>
			{
				if(USART1_RX_STA&0x4000)//接收到了0x0d
 8006582:	4b3e      	ldr	r3, [pc, #248]	; (800667c <HAL_UART_RxCpltCallback+0x118>)
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d012      	beq.n	80065b6 <HAL_UART_RxCpltCallback+0x52>
				{
					if(res1!=0x0a) USART1_RX_STA=0; //接收错误,重新开始
 8006590:	4b3b      	ldr	r3, [pc, #236]	; (8006680 <HAL_UART_RxCpltCallback+0x11c>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b0a      	cmp	r3, #10
 8006596:	d003      	beq.n	80065a0 <HAL_UART_RxCpltCallback+0x3c>
 8006598:	4b38      	ldr	r3, [pc, #224]	; (800667c <HAL_UART_RxCpltCallback+0x118>)
 800659a:	2200      	movs	r2, #0
 800659c:	801a      	strh	r2, [r3, #0]
					USART2_RX_STA|=0x8000;				//强制标记接收完成
				}
			}

	}
}
 800659e:	e066      	b.n	800666e <HAL_UART_RxCpltCallback+0x10a>
					else USART1_RX_STA|=0x8000;		//接收完成了
 80065a0:	4b36      	ldr	r3, [pc, #216]	; (800667c <HAL_UART_RxCpltCallback+0x118>)
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	4b32      	ldr	r3, [pc, #200]	; (800667c <HAL_UART_RxCpltCallback+0x118>)
 80065b2:	801a      	strh	r2, [r3, #0]
}
 80065b4:	e05b      	b.n	800666e <HAL_UART_RxCpltCallback+0x10a>
					if(res1==0x0d) USART1_RX_STA|=0x4000;
 80065b6:	4b32      	ldr	r3, [pc, #200]	; (8006680 <HAL_UART_RxCpltCallback+0x11c>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b0d      	cmp	r3, #13
 80065bc:	d108      	bne.n	80065d0 <HAL_UART_RxCpltCallback+0x6c>
 80065be:	4b2f      	ldr	r3, [pc, #188]	; (800667c <HAL_UART_RxCpltCallback+0x118>)
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	4b2c      	ldr	r3, [pc, #176]	; (800667c <HAL_UART_RxCpltCallback+0x118>)
 80065cc:	801a      	strh	r2, [r3, #0]
}
 80065ce:	e04e      	b.n	800666e <HAL_UART_RxCpltCallback+0x10a>
						USART1_RX_BUF[USART1_RX_STA++]=res1;
 80065d0:	4b2a      	ldr	r3, [pc, #168]	; (800667c <HAL_UART_RxCpltCallback+0x118>)
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	b291      	uxth	r1, r2
 80065da:	4a28      	ldr	r2, [pc, #160]	; (800667c <HAL_UART_RxCpltCallback+0x118>)
 80065dc:	8011      	strh	r1, [r2, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	4b27      	ldr	r3, [pc, #156]	; (8006680 <HAL_UART_RxCpltCallback+0x11c>)
 80065e2:	7819      	ldrb	r1, [r3, #0]
 80065e4:	4b27      	ldr	r3, [pc, #156]	; (8006684 <HAL_UART_RxCpltCallback+0x120>)
 80065e6:	5499      	strb	r1, [r3, r2]
						if(USART1_RX_STA>(USART1_MAX_RX_LEN-1)) USART1_RX_STA=0;//接收数据错误,重新开始接收
 80065e8:	4b24      	ldr	r3, [pc, #144]	; (800667c <HAL_UART_RxCpltCallback+0x118>)
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80065f2:	d33c      	bcc.n	800666e <HAL_UART_RxCpltCallback+0x10a>
 80065f4:	4b21      	ldr	r3, [pc, #132]	; (800667c <HAL_UART_RxCpltCallback+0x118>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	801a      	strh	r2, [r3, #0]
}
 80065fa:	e038      	b.n	800666e <HAL_UART_RxCpltCallback+0x10a>
	} else if (huart->Instance==USART2) {	// 串口2：与蓝牙相连
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a21      	ldr	r2, [pc, #132]	; (8006688 <HAL_UART_RxCpltCallback+0x124>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d133      	bne.n	800666e <HAL_UART_RxCpltCallback+0x10a>
			if((USART2_RX_STA&0x8000)==0)		//接收完的一批数据,如果还没有被处理,则不再接收其他数据
 8006606:	4b21      	ldr	r3, [pc, #132]	; (800668c <HAL_UART_RxCpltCallback+0x128>)
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	b21b      	sxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	db2d      	blt.n	800666e <HAL_UART_RxCpltCallback+0x10a>
				if(USART2_RX_STA<USART2_MAX_RX_LEN)	//还可以接收数据
 8006612:	4b1e      	ldr	r3, [pc, #120]	; (800668c <HAL_UART_RxCpltCallback+0x128>)
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800661c:	d21d      	bcs.n	800665a <HAL_UART_RxCpltCallback+0xf6>
	                __HAL_TIM_SET_COUNTER(&htim2,0);	//重置计数器
 800661e:	4b1c      	ldr	r3, [pc, #112]	; (8006690 <HAL_UART_RxCpltCallback+0x12c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2200      	movs	r2, #0
 8006624:	625a      	str	r2, [r3, #36]	; 0x24
					if(USART2_RX_STA==0) 				//
 8006626:	4b19      	ldr	r3, [pc, #100]	; (800668c <HAL_UART_RxCpltCallback+0x128>)
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d107      	bne.n	8006640 <HAL_UART_RxCpltCallback+0xdc>
	                    __HAL_TIM_ENABLE(&htim2);		//使能定时器2 (10ms)
 8006630:	4b17      	ldr	r3, [pc, #92]	; (8006690 <HAL_UART_RxCpltCallback+0x12c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b16      	ldr	r3, [pc, #88]	; (8006690 <HAL_UART_RxCpltCallback+0x12c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]
					USART2_RX_BUF[USART2_RX_STA++]=res2;	//记录接收到的值
 8006640:	4b12      	ldr	r3, [pc, #72]	; (800668c <HAL_UART_RxCpltCallback+0x128>)
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	b29b      	uxth	r3, r3
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	b291      	uxth	r1, r2
 800664a:	4a10      	ldr	r2, [pc, #64]	; (800668c <HAL_UART_RxCpltCallback+0x128>)
 800664c:	8011      	strh	r1, [r2, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	4b10      	ldr	r3, [pc, #64]	; (8006694 <HAL_UART_RxCpltCallback+0x130>)
 8006652:	7819      	ldrb	r1, [r3, #0]
 8006654:	4b10      	ldr	r3, [pc, #64]	; (8006698 <HAL_UART_RxCpltCallback+0x134>)
 8006656:	5499      	strb	r1, [r3, r2]
}
 8006658:	e009      	b.n	800666e <HAL_UART_RxCpltCallback+0x10a>
					USART2_RX_STA|=0x8000;				//强制标记接收完成
 800665a:	4b0c      	ldr	r3, [pc, #48]	; (800668c <HAL_UART_RxCpltCallback+0x128>)
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006668:	b29a      	uxth	r2, r3
 800666a:	4b08      	ldr	r3, [pc, #32]	; (800668c <HAL_UART_RxCpltCallback+0x128>)
 800666c:	801a      	strh	r2, [r3, #0]
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr
 8006678:	40013800 	.word	0x40013800
 800667c:	20009cf4 	.word	0x20009cf4
 8006680:	20009cf1 	.word	0x20009cf1
 8006684:	2000a05c 	.word	0x2000a05c
 8006688:	40004400 	.word	0x40004400
 800668c:	20009cf2 	.word	0x20009cf2
 8006690:	2000a37c 	.word	0x2000a37c
 8006694:	20009cf0 	.word	0x20009cf0
 8006698:	20009cf8 	.word	0x20009cf8

0800669c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80066a0:	b672      	cpsid	i
}
 80066a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80066a4:	e7fe      	b.n	80066a4 <Error_Handler+0x8>
	...

080066a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80066ae:	4b16      	ldr	r3, [pc, #88]	; (8006708 <HAL_MspInit+0x60>)
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	4a15      	ldr	r2, [pc, #84]	; (8006708 <HAL_MspInit+0x60>)
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	6193      	str	r3, [r2, #24]
 80066ba:	4b13      	ldr	r3, [pc, #76]	; (8006708 <HAL_MspInit+0x60>)
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	60bb      	str	r3, [r7, #8]
 80066c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80066c6:	4b10      	ldr	r3, [pc, #64]	; (8006708 <HAL_MspInit+0x60>)
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	4a0f      	ldr	r2, [pc, #60]	; (8006708 <HAL_MspInit+0x60>)
 80066cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d0:	61d3      	str	r3, [r2, #28]
 80066d2:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <HAL_MspInit+0x60>)
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066da:	607b      	str	r3, [r7, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80066de:	2005      	movs	r0, #5
 80066e0:	f000 fad4 	bl	8006c8c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80066e4:	4b09      	ldr	r3, [pc, #36]	; (800670c <HAL_MspInit+0x64>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	4a04      	ldr	r2, [pc, #16]	; (800670c <HAL_MspInit+0x64>)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006700:	bf00      	nop
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	40021000 	.word	0x40021000
 800670c:	40010000 	.word	0x40010000

08006710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006720:	d113      	bne.n	800674a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006722:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <HAL_TIM_Base_MspInit+0x44>)
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	4a0b      	ldr	r2, [pc, #44]	; (8006754 <HAL_TIM_Base_MspInit+0x44>)
 8006728:	f043 0301 	orr.w	r3, r3, #1
 800672c:	61d3      	str	r3, [r2, #28]
 800672e:	4b09      	ldr	r3, [pc, #36]	; (8006754 <HAL_TIM_Base_MspInit+0x44>)
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800673a:	2202      	movs	r2, #2
 800673c:	2100      	movs	r1, #0
 800673e:	201c      	movs	r0, #28
 8006740:	f000 faaf 	bl	8006ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006744:	201c      	movs	r0, #28
 8006746:	f000 fac8 	bl	8006cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40021000 	.word	0x40021000

08006758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08a      	sub	sp, #40	; 0x28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006760:	f107 0318 	add.w	r3, r7, #24
 8006764:	2200      	movs	r2, #0
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	605a      	str	r2, [r3, #4]
 800676a:	609a      	str	r2, [r3, #8]
 800676c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a3f      	ldr	r2, [pc, #252]	; (8006870 <HAL_UART_MspInit+0x118>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d13a      	bne.n	80067ee <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006778:	4b3e      	ldr	r3, [pc, #248]	; (8006874 <HAL_UART_MspInit+0x11c>)
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	4a3d      	ldr	r2, [pc, #244]	; (8006874 <HAL_UART_MspInit+0x11c>)
 800677e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006782:	6193      	str	r3, [r2, #24]
 8006784:	4b3b      	ldr	r3, [pc, #236]	; (8006874 <HAL_UART_MspInit+0x11c>)
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006790:	4b38      	ldr	r3, [pc, #224]	; (8006874 <HAL_UART_MspInit+0x11c>)
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	4a37      	ldr	r2, [pc, #220]	; (8006874 <HAL_UART_MspInit+0x11c>)
 8006796:	f043 0304 	orr.w	r3, r3, #4
 800679a:	6193      	str	r3, [r2, #24]
 800679c:	4b35      	ldr	r3, [pc, #212]	; (8006874 <HAL_UART_MspInit+0x11c>)
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80067a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067ae:	2302      	movs	r3, #2
 80067b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80067b2:	2303      	movs	r3, #3
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067b6:	f107 0318 	add.w	r3, r7, #24
 80067ba:	4619      	mov	r1, r3
 80067bc:	482e      	ldr	r0, [pc, #184]	; (8006878 <HAL_UART_MspInit+0x120>)
 80067be:	f000 fbe9 	bl	8006f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80067c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067d0:	f107 0318 	add.w	r3, r7, #24
 80067d4:	4619      	mov	r1, r3
 80067d6:	4828      	ldr	r0, [pc, #160]	; (8006878 <HAL_UART_MspInit+0x120>)
 80067d8:	f000 fbdc 	bl	8006f94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80067dc:	2200      	movs	r2, #0
 80067de:	2101      	movs	r1, #1
 80067e0:	2025      	movs	r0, #37	; 0x25
 80067e2:	f000 fa5e 	bl	8006ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80067e6:	2025      	movs	r0, #37	; 0x25
 80067e8:	f000 fa77 	bl	8006cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80067ec:	e03c      	b.n	8006868 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a22      	ldr	r2, [pc, #136]	; (800687c <HAL_UART_MspInit+0x124>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d137      	bne.n	8006868 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80067f8:	4b1e      	ldr	r3, [pc, #120]	; (8006874 <HAL_UART_MspInit+0x11c>)
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	4a1d      	ldr	r2, [pc, #116]	; (8006874 <HAL_UART_MspInit+0x11c>)
 80067fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006802:	61d3      	str	r3, [r2, #28]
 8006804:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <HAL_UART_MspInit+0x11c>)
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006810:	4b18      	ldr	r3, [pc, #96]	; (8006874 <HAL_UART_MspInit+0x11c>)
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	4a17      	ldr	r2, [pc, #92]	; (8006874 <HAL_UART_MspInit+0x11c>)
 8006816:	f043 0304 	orr.w	r3, r3, #4
 800681a:	6193      	str	r3, [r2, #24]
 800681c:	4b15      	ldr	r3, [pc, #84]	; (8006874 <HAL_UART_MspInit+0x11c>)
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006828:	2304      	movs	r3, #4
 800682a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800682c:	2302      	movs	r3, #2
 800682e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006830:	2303      	movs	r3, #3
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006834:	f107 0318 	add.w	r3, r7, #24
 8006838:	4619      	mov	r1, r3
 800683a:	480f      	ldr	r0, [pc, #60]	; (8006878 <HAL_UART_MspInit+0x120>)
 800683c:	f000 fbaa 	bl	8006f94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006840:	2308      	movs	r3, #8
 8006842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006844:	2300      	movs	r3, #0
 8006846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006848:	2300      	movs	r3, #0
 800684a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800684c:	f107 0318 	add.w	r3, r7, #24
 8006850:	4619      	mov	r1, r3
 8006852:	4809      	ldr	r0, [pc, #36]	; (8006878 <HAL_UART_MspInit+0x120>)
 8006854:	f000 fb9e 	bl	8006f94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 2);
 8006858:	2202      	movs	r2, #2
 800685a:	2100      	movs	r1, #0
 800685c:	2026      	movs	r0, #38	; 0x26
 800685e:	f000 fa20 	bl	8006ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006862:	2026      	movs	r0, #38	; 0x26
 8006864:	f000 fa39 	bl	8006cda <HAL_NVIC_EnableIRQ>
}
 8006868:	bf00      	nop
 800686a:	3728      	adds	r7, #40	; 0x28
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	40013800 	.word	0x40013800
 8006874:	40021000 	.word	0x40021000
 8006878:	40010800 	.word	0x40010800
 800687c:	40004400 	.word	0x40004400

08006880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006884:	e7fe      	b.n	8006884 <NMI_Handler+0x4>

08006886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006886:	b480      	push	{r7}
 8006888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800688a:	e7fe      	b.n	800688a <HardFault_Handler+0x4>

0800688c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006890:	e7fe      	b.n	8006890 <MemManage_Handler+0x4>

08006892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006892:	b480      	push	{r7}
 8006894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006896:	e7fe      	b.n	8006896 <BusFault_Handler+0x4>

08006898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800689c:	e7fe      	b.n	800689c <UsageFault_Handler+0x4>

0800689e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800689e:	b480      	push	{r7}
 80068a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068a2:	bf00      	nop
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bc80      	pop	{r7}
 80068a8:	4770      	bx	lr

080068aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068aa:	b480      	push	{r7}
 80068ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068ae:	bf00      	nop
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr

080068b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80068b6:	b480      	push	{r7}
 80068b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80068ba:	bf00      	nop
 80068bc:	46bd      	mov	sp, r7
 80068be:	bc80      	pop	{r7}
 80068c0:	4770      	bx	lr

080068c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068c6:	f000 f8d5 	bl	8006a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068ca:	bf00      	nop
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80068d4:	4802      	ldr	r0, [pc, #8]	; (80068e0 <TIM2_IRQHandler+0x10>)
 80068d6:	f001 f9d3 	bl	8007c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80068da:	bf00      	nop
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	2000a37c 	.word	0x2000a37c

080068e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//	HAL_UART_Transmit(&huart1, "1", 1, HAL_MAX_DELAY);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80068e8:	4804      	ldr	r0, [pc, #16]	; (80068fc <USART1_IRQHandler+0x18>)
 80068ea:	f001 fe57 	bl	800859c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	HAL_UART_Receive_IT(&huart1, &res1, 1);
 80068ee:	2201      	movs	r2, #1
 80068f0:	4903      	ldr	r1, [pc, #12]	; (8006900 <USART1_IRQHandler+0x1c>)
 80068f2:	4802      	ldr	r0, [pc, #8]	; (80068fc <USART1_IRQHandler+0x18>)
 80068f4:	f001 fe21 	bl	800853a <HAL_UART_Receive_IT>

  /* USER CODE END USART1_IRQn 1 */
}
 80068f8:	bf00      	nop
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	20009e88 	.word	0x20009e88
 8006900:	20009cf1 	.word	0x20009cf1

08006904 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006908:	4804      	ldr	r0, [pc, #16]	; (800691c <USART2_IRQHandler+0x18>)
 800690a:	f001 fe47 	bl	800859c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	HAL_UART_Receive_IT(&huart2, &res2, 1);
 800690e:	2201      	movs	r2, #1
 8006910:	4903      	ldr	r1, [pc, #12]	; (8006920 <USART2_IRQHandler+0x1c>)
 8006912:	4802      	ldr	r0, [pc, #8]	; (800691c <USART2_IRQHandler+0x18>)
 8006914:	f001 fe11 	bl	800853a <HAL_UART_Receive_IT>
  //	  HAL_UART_Transmit(&huart1, "2", 1, HAL_MAX_DELAY);
  /* USER CODE END USART2_IRQn 1 */
}
 8006918:	bf00      	nop
 800691a:	bd80      	pop	{r7, pc}
 800691c:	2000a3c4 	.word	0x2000a3c4
 8006920:	20009cf0 	.word	0x20009cf0

08006924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800692c:	4a14      	ldr	r2, [pc, #80]	; (8006980 <_sbrk+0x5c>)
 800692e:	4b15      	ldr	r3, [pc, #84]	; (8006984 <_sbrk+0x60>)
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006938:	4b13      	ldr	r3, [pc, #76]	; (8006988 <_sbrk+0x64>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d102      	bne.n	8006946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006940:	4b11      	ldr	r3, [pc, #68]	; (8006988 <_sbrk+0x64>)
 8006942:	4a12      	ldr	r2, [pc, #72]	; (800698c <_sbrk+0x68>)
 8006944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006946:	4b10      	ldr	r3, [pc, #64]	; (8006988 <_sbrk+0x64>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4413      	add	r3, r2
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	429a      	cmp	r2, r3
 8006952:	d207      	bcs.n	8006964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006954:	f002 fa4a 	bl	8008dec <__errno>
 8006958:	4603      	mov	r3, r0
 800695a:	220c      	movs	r2, #12
 800695c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800695e:	f04f 33ff 	mov.w	r3, #4294967295
 8006962:	e009      	b.n	8006978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006964:	4b08      	ldr	r3, [pc, #32]	; (8006988 <_sbrk+0x64>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800696a:	4b07      	ldr	r3, [pc, #28]	; (8006988 <_sbrk+0x64>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4413      	add	r3, r2
 8006972:	4a05      	ldr	r2, [pc, #20]	; (8006988 <_sbrk+0x64>)
 8006974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006976:	68fb      	ldr	r3, [r7, #12]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	2000c000 	.word	0x2000c000
 8006984:	00000400 	.word	0x00000400
 8006988:	20009cd4 	.word	0x20009cd4
 800698c:	2000a420 	.word	0x2000a420

08006990 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006994:	bf00      	nop
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr

0800699c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800699c:	480c      	ldr	r0, [pc, #48]	; (80069d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800699e:	490d      	ldr	r1, [pc, #52]	; (80069d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80069a0:	4a0d      	ldr	r2, [pc, #52]	; (80069d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80069a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069a4:	e002      	b.n	80069ac <LoopCopyDataInit>

080069a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069aa:	3304      	adds	r3, #4

080069ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069b0:	d3f9      	bcc.n	80069a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069b2:	4a0a      	ldr	r2, [pc, #40]	; (80069dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80069b4:	4c0a      	ldr	r4, [pc, #40]	; (80069e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80069b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80069b8:	e001      	b.n	80069be <LoopFillZerobss>

080069ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80069ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80069bc:	3204      	adds	r2, #4

080069be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80069be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80069c0:	d3fb      	bcc.n	80069ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80069c2:	f7ff ffe5 	bl	8006990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80069c6:	f002 fa17 	bl	8008df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80069ca:	f7ff fb5f 	bl	800608c <main>
  bx lr
 80069ce:	4770      	bx	lr
  ldr r0, =_sdata
 80069d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80069d4:	20009cb4 	.word	0x20009cb4
  ldr r2, =_sidata
 80069d8:	0800af80 	.word	0x0800af80
  ldr r2, =_sbss
 80069dc:	20009cb4 	.word	0x20009cb4
  ldr r4, =_ebss
 80069e0:	2000a41c 	.word	0x2000a41c

080069e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80069e4:	e7fe      	b.n	80069e4 <ADC1_2_IRQHandler>
	...

080069e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069ec:	4b08      	ldr	r3, [pc, #32]	; (8006a10 <HAL_Init+0x28>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a07      	ldr	r2, [pc, #28]	; (8006a10 <HAL_Init+0x28>)
 80069f2:	f043 0310 	orr.w	r3, r3, #16
 80069f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069f8:	2003      	movs	r0, #3
 80069fa:	f000 f947 	bl	8006c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80069fe:	2000      	movs	r0, #0
 8006a00:	f000 f808 	bl	8006a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a04:	f7ff fe50 	bl	80066a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	40022000 	.word	0x40022000

08006a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006a1c:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <HAL_InitTick+0x54>)
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	4b12      	ldr	r3, [pc, #72]	; (8006a6c <HAL_InitTick+0x58>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	4619      	mov	r1, r3
 8006a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 f95f 	bl	8006cf6 <HAL_SYSTICK_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e00e      	b.n	8006a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b0f      	cmp	r3, #15
 8006a46:	d80a      	bhi.n	8006a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a48:	2200      	movs	r2, #0
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a50:	f000 f927 	bl	8006ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006a54:	4a06      	ldr	r2, [pc, #24]	; (8006a70 <HAL_InitTick+0x5c>)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e000      	b.n	8006a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20009c44 	.word	0x20009c44
 8006a6c:	20009c4c 	.word	0x20009c4c
 8006a70:	20009c48 	.word	0x20009c48

08006a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a78:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <HAL_IncTick+0x1c>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <HAL_IncTick+0x20>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4413      	add	r3, r2
 8006a84:	4a03      	ldr	r2, [pc, #12]	; (8006a94 <HAL_IncTick+0x20>)
 8006a86:	6013      	str	r3, [r2, #0]
}
 8006a88:	bf00      	nop
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr
 8006a90:	20009c4c 	.word	0x20009c4c
 8006a94:	2000a408 	.word	0x2000a408

08006a98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8006a9c:	4b02      	ldr	r3, [pc, #8]	; (8006aa8 <HAL_GetTick+0x10>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bc80      	pop	{r7}
 8006aa6:	4770      	bx	lr
 8006aa8:	2000a408 	.word	0x2000a408

08006aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ab4:	f7ff fff0 	bl	8006a98 <HAL_GetTick>
 8006ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac4:	d005      	beq.n	8006ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <HAL_Delay+0x44>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4413      	add	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006ad2:	bf00      	nop
 8006ad4:	f7ff ffe0 	bl	8006a98 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d8f7      	bhi.n	8006ad4 <HAL_Delay+0x28>
  {
  }
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20009c4c 	.word	0x20009c4c

08006af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b04:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <__NVIC_SetPriorityGrouping+0x44>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b10:	4013      	ands	r3, r2
 8006b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b26:	4a04      	ldr	r2, [pc, #16]	; (8006b38 <__NVIC_SetPriorityGrouping+0x44>)
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	60d3      	str	r3, [r2, #12]
}
 8006b2c:	bf00      	nop
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	e000ed00 	.word	0xe000ed00

08006b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b40:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <__NVIC_GetPriorityGrouping+0x18>)
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	0a1b      	lsrs	r3, r3, #8
 8006b46:	f003 0307 	and.w	r3, r3, #7
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bc80      	pop	{r7}
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	e000ed00 	.word	0xe000ed00

08006b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	db0b      	blt.n	8006b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	f003 021f 	and.w	r2, r3, #31
 8006b70:	4906      	ldr	r1, [pc, #24]	; (8006b8c <__NVIC_EnableIRQ+0x34>)
 8006b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b76:	095b      	lsrs	r3, r3, #5
 8006b78:	2001      	movs	r0, #1
 8006b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8006b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr
 8006b8c:	e000e100 	.word	0xe000e100

08006b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	6039      	str	r1, [r7, #0]
 8006b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	db0a      	blt.n	8006bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	490c      	ldr	r1, [pc, #48]	; (8006bdc <__NVIC_SetPriority+0x4c>)
 8006baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bae:	0112      	lsls	r2, r2, #4
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	440b      	add	r3, r1
 8006bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006bb8:	e00a      	b.n	8006bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	4908      	ldr	r1, [pc, #32]	; (8006be0 <__NVIC_SetPriority+0x50>)
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	3b04      	subs	r3, #4
 8006bc8:	0112      	lsls	r2, r2, #4
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	440b      	add	r3, r1
 8006bce:	761a      	strb	r2, [r3, #24]
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bc80      	pop	{r7}
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	e000e100 	.word	0xe000e100
 8006be0:	e000ed00 	.word	0xe000ed00

08006be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b089      	sub	sp, #36	; 0x24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	f1c3 0307 	rsb	r3, r3, #7
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	bf28      	it	cs
 8006c02:	2304      	movcs	r3, #4
 8006c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	2b06      	cmp	r3, #6
 8006c0c:	d902      	bls.n	8006c14 <NVIC_EncodePriority+0x30>
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	3b03      	subs	r3, #3
 8006c12:	e000      	b.n	8006c16 <NVIC_EncodePriority+0x32>
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c18:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c22:	43da      	mvns	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	401a      	ands	r2, r3
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	fa01 f303 	lsl.w	r3, r1, r3
 8006c36:	43d9      	mvns	r1, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c3c:	4313      	orrs	r3, r2
         );
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3724      	adds	r7, #36	; 0x24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr

08006c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c58:	d301      	bcc.n	8006c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e00f      	b.n	8006c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c5e:	4a0a      	ldr	r2, [pc, #40]	; (8006c88 <SysTick_Config+0x40>)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c66:	210f      	movs	r1, #15
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	f7ff ff90 	bl	8006b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c70:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <SysTick_Config+0x40>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c76:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <SysTick_Config+0x40>)
 8006c78:	2207      	movs	r2, #7
 8006c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	e000e010 	.word	0xe000e010

08006c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff ff2d 	bl	8006af4 <__NVIC_SetPriorityGrouping>
}
 8006c9a:	bf00      	nop
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b086      	sub	sp, #24
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	4603      	mov	r3, r0
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	607a      	str	r2, [r7, #4]
 8006cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006cb4:	f7ff ff42 	bl	8006b3c <__NVIC_GetPriorityGrouping>
 8006cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	6978      	ldr	r0, [r7, #20]
 8006cc0:	f7ff ff90 	bl	8006be4 <NVIC_EncodePriority>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff ff5f 	bl	8006b90 <__NVIC_SetPriority>
}
 8006cd2:	bf00      	nop
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff ff35 	bl	8006b58 <__NVIC_EnableIRQ>
}
 8006cee:	bf00      	nop
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b082      	sub	sp, #8
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff ffa2 	bl	8006c48 <SysTick_Config>
 8006d04:	4603      	mov	r3, r0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b085      	sub	sp, #20
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d008      	beq.n	8006d36 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2204      	movs	r2, #4
 8006d28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e020      	b.n	8006d78 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 020e 	bic.w	r2, r2, #14
 8006d44:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0201 	bic.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5e:	2101      	movs	r1, #1
 8006d60:	fa01 f202 	lsl.w	r2, r1, r2
 8006d64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bc80      	pop	{r7}
 8006d80:	4770      	bx	lr
	...

08006d84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d005      	beq.n	8006da6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2204      	movs	r2, #4
 8006d9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	73fb      	strb	r3, [r7, #15]
 8006da4:	e0d6      	b.n	8006f54 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 020e 	bic.w	r2, r2, #14
 8006db4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0201 	bic.w	r2, r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	4b64      	ldr	r3, [pc, #400]	; (8006f60 <HAL_DMA_Abort_IT+0x1dc>)
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d958      	bls.n	8006e84 <HAL_DMA_Abort_IT+0x100>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a63      	ldr	r2, [pc, #396]	; (8006f64 <HAL_DMA_Abort_IT+0x1e0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d04f      	beq.n	8006e7c <HAL_DMA_Abort_IT+0xf8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a61      	ldr	r2, [pc, #388]	; (8006f68 <HAL_DMA_Abort_IT+0x1e4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d048      	beq.n	8006e78 <HAL_DMA_Abort_IT+0xf4>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a60      	ldr	r2, [pc, #384]	; (8006f6c <HAL_DMA_Abort_IT+0x1e8>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d040      	beq.n	8006e72 <HAL_DMA_Abort_IT+0xee>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a5e      	ldr	r2, [pc, #376]	; (8006f70 <HAL_DMA_Abort_IT+0x1ec>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d038      	beq.n	8006e6c <HAL_DMA_Abort_IT+0xe8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a5d      	ldr	r2, [pc, #372]	; (8006f74 <HAL_DMA_Abort_IT+0x1f0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d030      	beq.n	8006e66 <HAL_DMA_Abort_IT+0xe2>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a5b      	ldr	r2, [pc, #364]	; (8006f78 <HAL_DMA_Abort_IT+0x1f4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d028      	beq.n	8006e60 <HAL_DMA_Abort_IT+0xdc>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a53      	ldr	r2, [pc, #332]	; (8006f60 <HAL_DMA_Abort_IT+0x1dc>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d020      	beq.n	8006e5a <HAL_DMA_Abort_IT+0xd6>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a57      	ldr	r2, [pc, #348]	; (8006f7c <HAL_DMA_Abort_IT+0x1f8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d019      	beq.n	8006e56 <HAL_DMA_Abort_IT+0xd2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a56      	ldr	r2, [pc, #344]	; (8006f80 <HAL_DMA_Abort_IT+0x1fc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d012      	beq.n	8006e52 <HAL_DMA_Abort_IT+0xce>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a54      	ldr	r2, [pc, #336]	; (8006f84 <HAL_DMA_Abort_IT+0x200>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00a      	beq.n	8006e4c <HAL_DMA_Abort_IT+0xc8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a53      	ldr	r2, [pc, #332]	; (8006f88 <HAL_DMA_Abort_IT+0x204>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d102      	bne.n	8006e46 <HAL_DMA_Abort_IT+0xc2>
 8006e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e44:	e01b      	b.n	8006e7e <HAL_DMA_Abort_IT+0xfa>
 8006e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e4a:	e018      	b.n	8006e7e <HAL_DMA_Abort_IT+0xfa>
 8006e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e50:	e015      	b.n	8006e7e <HAL_DMA_Abort_IT+0xfa>
 8006e52:	2310      	movs	r3, #16
 8006e54:	e013      	b.n	8006e7e <HAL_DMA_Abort_IT+0xfa>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e011      	b.n	8006e7e <HAL_DMA_Abort_IT+0xfa>
 8006e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e5e:	e00e      	b.n	8006e7e <HAL_DMA_Abort_IT+0xfa>
 8006e60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e64:	e00b      	b.n	8006e7e <HAL_DMA_Abort_IT+0xfa>
 8006e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e6a:	e008      	b.n	8006e7e <HAL_DMA_Abort_IT+0xfa>
 8006e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e70:	e005      	b.n	8006e7e <HAL_DMA_Abort_IT+0xfa>
 8006e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e76:	e002      	b.n	8006e7e <HAL_DMA_Abort_IT+0xfa>
 8006e78:	2310      	movs	r3, #16
 8006e7a:	e000      	b.n	8006e7e <HAL_DMA_Abort_IT+0xfa>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	4a43      	ldr	r2, [pc, #268]	; (8006f8c <HAL_DMA_Abort_IT+0x208>)
 8006e80:	6053      	str	r3, [r2, #4]
 8006e82:	e057      	b.n	8006f34 <HAL_DMA_Abort_IT+0x1b0>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a36      	ldr	r2, [pc, #216]	; (8006f64 <HAL_DMA_Abort_IT+0x1e0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d04f      	beq.n	8006f2e <HAL_DMA_Abort_IT+0x1aa>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a35      	ldr	r2, [pc, #212]	; (8006f68 <HAL_DMA_Abort_IT+0x1e4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d048      	beq.n	8006f2a <HAL_DMA_Abort_IT+0x1a6>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a33      	ldr	r2, [pc, #204]	; (8006f6c <HAL_DMA_Abort_IT+0x1e8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d040      	beq.n	8006f24 <HAL_DMA_Abort_IT+0x1a0>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a32      	ldr	r2, [pc, #200]	; (8006f70 <HAL_DMA_Abort_IT+0x1ec>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d038      	beq.n	8006f1e <HAL_DMA_Abort_IT+0x19a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a30      	ldr	r2, [pc, #192]	; (8006f74 <HAL_DMA_Abort_IT+0x1f0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d030      	beq.n	8006f18 <HAL_DMA_Abort_IT+0x194>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a2f      	ldr	r2, [pc, #188]	; (8006f78 <HAL_DMA_Abort_IT+0x1f4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d028      	beq.n	8006f12 <HAL_DMA_Abort_IT+0x18e>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a26      	ldr	r2, [pc, #152]	; (8006f60 <HAL_DMA_Abort_IT+0x1dc>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d020      	beq.n	8006f0c <HAL_DMA_Abort_IT+0x188>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a2b      	ldr	r2, [pc, #172]	; (8006f7c <HAL_DMA_Abort_IT+0x1f8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d019      	beq.n	8006f08 <HAL_DMA_Abort_IT+0x184>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a29      	ldr	r2, [pc, #164]	; (8006f80 <HAL_DMA_Abort_IT+0x1fc>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d012      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x180>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a28      	ldr	r2, [pc, #160]	; (8006f84 <HAL_DMA_Abort_IT+0x200>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00a      	beq.n	8006efe <HAL_DMA_Abort_IT+0x17a>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a26      	ldr	r2, [pc, #152]	; (8006f88 <HAL_DMA_Abort_IT+0x204>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d102      	bne.n	8006ef8 <HAL_DMA_Abort_IT+0x174>
 8006ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ef6:	e01b      	b.n	8006f30 <HAL_DMA_Abort_IT+0x1ac>
 8006ef8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006efc:	e018      	b.n	8006f30 <HAL_DMA_Abort_IT+0x1ac>
 8006efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f02:	e015      	b.n	8006f30 <HAL_DMA_Abort_IT+0x1ac>
 8006f04:	2310      	movs	r3, #16
 8006f06:	e013      	b.n	8006f30 <HAL_DMA_Abort_IT+0x1ac>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e011      	b.n	8006f30 <HAL_DMA_Abort_IT+0x1ac>
 8006f0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f10:	e00e      	b.n	8006f30 <HAL_DMA_Abort_IT+0x1ac>
 8006f12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f16:	e00b      	b.n	8006f30 <HAL_DMA_Abort_IT+0x1ac>
 8006f18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f1c:	e008      	b.n	8006f30 <HAL_DMA_Abort_IT+0x1ac>
 8006f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f22:	e005      	b.n	8006f30 <HAL_DMA_Abort_IT+0x1ac>
 8006f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f28:	e002      	b.n	8006f30 <HAL_DMA_Abort_IT+0x1ac>
 8006f2a:	2310      	movs	r3, #16
 8006f2c:	e000      	b.n	8006f30 <HAL_DMA_Abort_IT+0x1ac>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	4a17      	ldr	r2, [pc, #92]	; (8006f90 <HAL_DMA_Abort_IT+0x20c>)
 8006f32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4798      	blx	r3
    } 
  }
  return status;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	40020080 	.word	0x40020080
 8006f64:	40020008 	.word	0x40020008
 8006f68:	4002001c 	.word	0x4002001c
 8006f6c:	40020030 	.word	0x40020030
 8006f70:	40020044 	.word	0x40020044
 8006f74:	40020058 	.word	0x40020058
 8006f78:	4002006c 	.word	0x4002006c
 8006f7c:	40020408 	.word	0x40020408
 8006f80:	4002041c 	.word	0x4002041c
 8006f84:	40020430 	.word	0x40020430
 8006f88:	40020444 	.word	0x40020444
 8006f8c:	40020400 	.word	0x40020400
 8006f90:	40020000 	.word	0x40020000

08006f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b08b      	sub	sp, #44	; 0x2c
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006fa6:	e179      	b.n	800729c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006fa8:	2201      	movs	r2, #1
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69fa      	ldr	r2, [r7, #28]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	f040 8168 	bne.w	8007296 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	4aa0      	ldr	r2, [pc, #640]	; (800724c <HAL_GPIO_Init+0x2b8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d05e      	beq.n	800708e <HAL_GPIO_Init+0xfa>
 8006fd0:	4a9e      	ldr	r2, [pc, #632]	; (800724c <HAL_GPIO_Init+0x2b8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d875      	bhi.n	80070c2 <HAL_GPIO_Init+0x12e>
 8006fd6:	4a9e      	ldr	r2, [pc, #632]	; (8007250 <HAL_GPIO_Init+0x2bc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d058      	beq.n	800708e <HAL_GPIO_Init+0xfa>
 8006fdc:	4a9c      	ldr	r2, [pc, #624]	; (8007250 <HAL_GPIO_Init+0x2bc>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d86f      	bhi.n	80070c2 <HAL_GPIO_Init+0x12e>
 8006fe2:	4a9c      	ldr	r2, [pc, #624]	; (8007254 <HAL_GPIO_Init+0x2c0>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d052      	beq.n	800708e <HAL_GPIO_Init+0xfa>
 8006fe8:	4a9a      	ldr	r2, [pc, #616]	; (8007254 <HAL_GPIO_Init+0x2c0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d869      	bhi.n	80070c2 <HAL_GPIO_Init+0x12e>
 8006fee:	4a9a      	ldr	r2, [pc, #616]	; (8007258 <HAL_GPIO_Init+0x2c4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d04c      	beq.n	800708e <HAL_GPIO_Init+0xfa>
 8006ff4:	4a98      	ldr	r2, [pc, #608]	; (8007258 <HAL_GPIO_Init+0x2c4>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d863      	bhi.n	80070c2 <HAL_GPIO_Init+0x12e>
 8006ffa:	4a98      	ldr	r2, [pc, #608]	; (800725c <HAL_GPIO_Init+0x2c8>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d046      	beq.n	800708e <HAL_GPIO_Init+0xfa>
 8007000:	4a96      	ldr	r2, [pc, #600]	; (800725c <HAL_GPIO_Init+0x2c8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d85d      	bhi.n	80070c2 <HAL_GPIO_Init+0x12e>
 8007006:	2b12      	cmp	r3, #18
 8007008:	d82a      	bhi.n	8007060 <HAL_GPIO_Init+0xcc>
 800700a:	2b12      	cmp	r3, #18
 800700c:	d859      	bhi.n	80070c2 <HAL_GPIO_Init+0x12e>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <HAL_GPIO_Init+0x80>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	0800708f 	.word	0x0800708f
 8007018:	08007069 	.word	0x08007069
 800701c:	0800707b 	.word	0x0800707b
 8007020:	080070bd 	.word	0x080070bd
 8007024:	080070c3 	.word	0x080070c3
 8007028:	080070c3 	.word	0x080070c3
 800702c:	080070c3 	.word	0x080070c3
 8007030:	080070c3 	.word	0x080070c3
 8007034:	080070c3 	.word	0x080070c3
 8007038:	080070c3 	.word	0x080070c3
 800703c:	080070c3 	.word	0x080070c3
 8007040:	080070c3 	.word	0x080070c3
 8007044:	080070c3 	.word	0x080070c3
 8007048:	080070c3 	.word	0x080070c3
 800704c:	080070c3 	.word	0x080070c3
 8007050:	080070c3 	.word	0x080070c3
 8007054:	080070c3 	.word	0x080070c3
 8007058:	08007071 	.word	0x08007071
 800705c:	08007085 	.word	0x08007085
 8007060:	4a7f      	ldr	r2, [pc, #508]	; (8007260 <HAL_GPIO_Init+0x2cc>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d013      	beq.n	800708e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007066:	e02c      	b.n	80070c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	623b      	str	r3, [r7, #32]
          break;
 800706e:	e029      	b.n	80070c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	3304      	adds	r3, #4
 8007076:	623b      	str	r3, [r7, #32]
          break;
 8007078:	e024      	b.n	80070c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	3308      	adds	r3, #8
 8007080:	623b      	str	r3, [r7, #32]
          break;
 8007082:	e01f      	b.n	80070c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	330c      	adds	r3, #12
 800708a:	623b      	str	r3, [r7, #32]
          break;
 800708c:	e01a      	b.n	80070c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d102      	bne.n	800709c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007096:	2304      	movs	r3, #4
 8007098:	623b      	str	r3, [r7, #32]
          break;
 800709a:	e013      	b.n	80070c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d105      	bne.n	80070b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80070a4:	2308      	movs	r3, #8
 80070a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	611a      	str	r2, [r3, #16]
          break;
 80070ae:	e009      	b.n	80070c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80070b0:	2308      	movs	r3, #8
 80070b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	615a      	str	r2, [r3, #20]
          break;
 80070ba:	e003      	b.n	80070c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80070bc:	2300      	movs	r3, #0
 80070be:	623b      	str	r3, [r7, #32]
          break;
 80070c0:	e000      	b.n	80070c4 <HAL_GPIO_Init+0x130>
          break;
 80070c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	2bff      	cmp	r3, #255	; 0xff
 80070c8:	d801      	bhi.n	80070ce <HAL_GPIO_Init+0x13a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	e001      	b.n	80070d2 <HAL_GPIO_Init+0x13e>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3304      	adds	r3, #4
 80070d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	2bff      	cmp	r3, #255	; 0xff
 80070d8:	d802      	bhi.n	80070e0 <HAL_GPIO_Init+0x14c>
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	e002      	b.n	80070e6 <HAL_GPIO_Init+0x152>
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	3b08      	subs	r3, #8
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	210f      	movs	r1, #15
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	fa01 f303 	lsl.w	r3, r1, r3
 80070f4:	43db      	mvns	r3, r3
 80070f6:	401a      	ands	r2, r3
 80070f8:	6a39      	ldr	r1, [r7, #32]
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007100:	431a      	orrs	r2, r3
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 80c1 	beq.w	8007296 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007114:	4b53      	ldr	r3, [pc, #332]	; (8007264 <HAL_GPIO_Init+0x2d0>)
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	4a52      	ldr	r2, [pc, #328]	; (8007264 <HAL_GPIO_Init+0x2d0>)
 800711a:	f043 0301 	orr.w	r3, r3, #1
 800711e:	6193      	str	r3, [r2, #24]
 8007120:	4b50      	ldr	r3, [pc, #320]	; (8007264 <HAL_GPIO_Init+0x2d0>)
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	60bb      	str	r3, [r7, #8]
 800712a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800712c:	4a4e      	ldr	r2, [pc, #312]	; (8007268 <HAL_GPIO_Init+0x2d4>)
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	089b      	lsrs	r3, r3, #2
 8007132:	3302      	adds	r3, #2
 8007134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007138:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	f003 0303 	and.w	r3, r3, #3
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	220f      	movs	r2, #15
 8007144:	fa02 f303 	lsl.w	r3, r2, r3
 8007148:	43db      	mvns	r3, r3
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4013      	ands	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a46      	ldr	r2, [pc, #280]	; (800726c <HAL_GPIO_Init+0x2d8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d01f      	beq.n	8007198 <HAL_GPIO_Init+0x204>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a45      	ldr	r2, [pc, #276]	; (8007270 <HAL_GPIO_Init+0x2dc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d019      	beq.n	8007194 <HAL_GPIO_Init+0x200>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a44      	ldr	r2, [pc, #272]	; (8007274 <HAL_GPIO_Init+0x2e0>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d013      	beq.n	8007190 <HAL_GPIO_Init+0x1fc>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a43      	ldr	r2, [pc, #268]	; (8007278 <HAL_GPIO_Init+0x2e4>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00d      	beq.n	800718c <HAL_GPIO_Init+0x1f8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a42      	ldr	r2, [pc, #264]	; (800727c <HAL_GPIO_Init+0x2e8>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d007      	beq.n	8007188 <HAL_GPIO_Init+0x1f4>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a41      	ldr	r2, [pc, #260]	; (8007280 <HAL_GPIO_Init+0x2ec>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d101      	bne.n	8007184 <HAL_GPIO_Init+0x1f0>
 8007180:	2305      	movs	r3, #5
 8007182:	e00a      	b.n	800719a <HAL_GPIO_Init+0x206>
 8007184:	2306      	movs	r3, #6
 8007186:	e008      	b.n	800719a <HAL_GPIO_Init+0x206>
 8007188:	2304      	movs	r3, #4
 800718a:	e006      	b.n	800719a <HAL_GPIO_Init+0x206>
 800718c:	2303      	movs	r3, #3
 800718e:	e004      	b.n	800719a <HAL_GPIO_Init+0x206>
 8007190:	2302      	movs	r3, #2
 8007192:	e002      	b.n	800719a <HAL_GPIO_Init+0x206>
 8007194:	2301      	movs	r3, #1
 8007196:	e000      	b.n	800719a <HAL_GPIO_Init+0x206>
 8007198:	2300      	movs	r3, #0
 800719a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719c:	f002 0203 	and.w	r2, r2, #3
 80071a0:	0092      	lsls	r2, r2, #2
 80071a2:	4093      	lsls	r3, r2
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80071aa:	492f      	ldr	r1, [pc, #188]	; (8007268 <HAL_GPIO_Init+0x2d4>)
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	089b      	lsrs	r3, r3, #2
 80071b0:	3302      	adds	r3, #2
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d006      	beq.n	80071d2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80071c4:	4b2f      	ldr	r3, [pc, #188]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	492e      	ldr	r1, [pc, #184]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	600b      	str	r3, [r1, #0]
 80071d0:	e006      	b.n	80071e0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80071d2:	4b2c      	ldr	r3, [pc, #176]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	43db      	mvns	r3, r3
 80071da:	492a      	ldr	r1, [pc, #168]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 80071dc:	4013      	ands	r3, r2
 80071de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d006      	beq.n	80071fa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80071ec:	4b25      	ldr	r3, [pc, #148]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	4924      	ldr	r1, [pc, #144]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	604b      	str	r3, [r1, #4]
 80071f8:	e006      	b.n	8007208 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80071fa:	4b22      	ldr	r3, [pc, #136]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	43db      	mvns	r3, r3
 8007202:	4920      	ldr	r1, [pc, #128]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 8007204:	4013      	ands	r3, r2
 8007206:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d006      	beq.n	8007222 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007214:	4b1b      	ldr	r3, [pc, #108]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	491a      	ldr	r1, [pc, #104]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	4313      	orrs	r3, r2
 800721e:	608b      	str	r3, [r1, #8]
 8007220:	e006      	b.n	8007230 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007222:	4b18      	ldr	r3, [pc, #96]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 8007224:	689a      	ldr	r2, [r3, #8]
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	43db      	mvns	r3, r3
 800722a:	4916      	ldr	r1, [pc, #88]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 800722c:	4013      	ands	r3, r2
 800722e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d025      	beq.n	8007288 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800723c:	4b11      	ldr	r3, [pc, #68]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 800723e:	68da      	ldr	r2, [r3, #12]
 8007240:	4910      	ldr	r1, [pc, #64]	; (8007284 <HAL_GPIO_Init+0x2f0>)
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	4313      	orrs	r3, r2
 8007246:	60cb      	str	r3, [r1, #12]
 8007248:	e025      	b.n	8007296 <HAL_GPIO_Init+0x302>
 800724a:	bf00      	nop
 800724c:	10320000 	.word	0x10320000
 8007250:	10310000 	.word	0x10310000
 8007254:	10220000 	.word	0x10220000
 8007258:	10210000 	.word	0x10210000
 800725c:	10120000 	.word	0x10120000
 8007260:	10110000 	.word	0x10110000
 8007264:	40021000 	.word	0x40021000
 8007268:	40010000 	.word	0x40010000
 800726c:	40010800 	.word	0x40010800
 8007270:	40010c00 	.word	0x40010c00
 8007274:	40011000 	.word	0x40011000
 8007278:	40011400 	.word	0x40011400
 800727c:	40011800 	.word	0x40011800
 8007280:	40011c00 	.word	0x40011c00
 8007284:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007288:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <HAL_GPIO_Init+0x324>)
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	43db      	mvns	r3, r3
 8007290:	4909      	ldr	r1, [pc, #36]	; (80072b8 <HAL_GPIO_Init+0x324>)
 8007292:	4013      	ands	r3, r2
 8007294:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	3301      	adds	r3, #1
 800729a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	fa22 f303 	lsr.w	r3, r2, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f47f ae7e 	bne.w	8006fa8 <HAL_GPIO_Init+0x14>
  }
}
 80072ac:	bf00      	nop
 80072ae:	bf00      	nop
 80072b0:	372c      	adds	r7, #44	; 0x2c
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr
 80072b8:	40010400 	.word	0x40010400

080072bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	807b      	strh	r3, [r7, #2]
 80072c8:	4613      	mov	r3, r2
 80072ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80072cc:	787b      	ldrb	r3, [r7, #1]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072d2:	887a      	ldrh	r2, [r7, #2]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80072d8:	e003      	b.n	80072e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80072da:	887b      	ldrh	r3, [r7, #2]
 80072dc:	041a      	lsls	r2, r3, #16
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	611a      	str	r2, [r3, #16]
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr

080072ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e26c      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 8087 	beq.w	800741a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800730c:	4b92      	ldr	r3, [pc, #584]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f003 030c 	and.w	r3, r3, #12
 8007314:	2b04      	cmp	r3, #4
 8007316:	d00c      	beq.n	8007332 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007318:	4b8f      	ldr	r3, [pc, #572]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f003 030c 	and.w	r3, r3, #12
 8007320:	2b08      	cmp	r3, #8
 8007322:	d112      	bne.n	800734a <HAL_RCC_OscConfig+0x5e>
 8007324:	4b8c      	ldr	r3, [pc, #560]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800732c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007330:	d10b      	bne.n	800734a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007332:	4b89      	ldr	r3, [pc, #548]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d06c      	beq.n	8007418 <HAL_RCC_OscConfig+0x12c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d168      	bne.n	8007418 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e246      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007352:	d106      	bne.n	8007362 <HAL_RCC_OscConfig+0x76>
 8007354:	4b80      	ldr	r3, [pc, #512]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a7f      	ldr	r2, [pc, #508]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800735a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	e02e      	b.n	80073c0 <HAL_RCC_OscConfig+0xd4>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10c      	bne.n	8007384 <HAL_RCC_OscConfig+0x98>
 800736a:	4b7b      	ldr	r3, [pc, #492]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a7a      	ldr	r2, [pc, #488]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	4b78      	ldr	r3, [pc, #480]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a77      	ldr	r2, [pc, #476]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800737c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	e01d      	b.n	80073c0 <HAL_RCC_OscConfig+0xd4>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800738c:	d10c      	bne.n	80073a8 <HAL_RCC_OscConfig+0xbc>
 800738e:	4b72      	ldr	r3, [pc, #456]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a71      	ldr	r2, [pc, #452]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	4b6f      	ldr	r3, [pc, #444]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a6e      	ldr	r2, [pc, #440]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	e00b      	b.n	80073c0 <HAL_RCC_OscConfig+0xd4>
 80073a8:	4b6b      	ldr	r3, [pc, #428]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a6a      	ldr	r2, [pc, #424]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	4b68      	ldr	r3, [pc, #416]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a67      	ldr	r2, [pc, #412]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d013      	beq.n	80073f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073c8:	f7ff fb66 	bl	8006a98 <HAL_GetTick>
 80073cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073d0:	f7ff fb62 	bl	8006a98 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b64      	cmp	r3, #100	; 0x64
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e1fa      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e2:	4b5d      	ldr	r3, [pc, #372]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f0      	beq.n	80073d0 <HAL_RCC_OscConfig+0xe4>
 80073ee:	e014      	b.n	800741a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f0:	f7ff fb52 	bl	8006a98 <HAL_GetTick>
 80073f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073f6:	e008      	b.n	800740a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073f8:	f7ff fb4e 	bl	8006a98 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2b64      	cmp	r3, #100	; 0x64
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e1e6      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800740a:	4b53      	ldr	r3, [pc, #332]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1f0      	bne.n	80073f8 <HAL_RCC_OscConfig+0x10c>
 8007416:	e000      	b.n	800741a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d063      	beq.n	80074ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007426:	4b4c      	ldr	r3, [pc, #304]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f003 030c 	and.w	r3, r3, #12
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007432:	4b49      	ldr	r3, [pc, #292]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f003 030c 	and.w	r3, r3, #12
 800743a:	2b08      	cmp	r3, #8
 800743c:	d11c      	bne.n	8007478 <HAL_RCC_OscConfig+0x18c>
 800743e:	4b46      	ldr	r3, [pc, #280]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d116      	bne.n	8007478 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800744a:	4b43      	ldr	r3, [pc, #268]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d005      	beq.n	8007462 <HAL_RCC_OscConfig+0x176>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d001      	beq.n	8007462 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e1ba      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007462:	4b3d      	ldr	r3, [pc, #244]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	4939      	ldr	r1, [pc, #228]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007472:	4313      	orrs	r3, r2
 8007474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007476:	e03a      	b.n	80074ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d020      	beq.n	80074c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007480:	4b36      	ldr	r3, [pc, #216]	; (800755c <HAL_RCC_OscConfig+0x270>)
 8007482:	2201      	movs	r2, #1
 8007484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007486:	f7ff fb07 	bl	8006a98 <HAL_GetTick>
 800748a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800748c:	e008      	b.n	80074a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800748e:	f7ff fb03 	bl	8006a98 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d901      	bls.n	80074a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e19b      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a0:	4b2d      	ldr	r3, [pc, #180]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0f0      	beq.n	800748e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ac:	4b2a      	ldr	r3, [pc, #168]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	4927      	ldr	r1, [pc, #156]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	600b      	str	r3, [r1, #0]
 80074c0:	e015      	b.n	80074ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074c2:	4b26      	ldr	r3, [pc, #152]	; (800755c <HAL_RCC_OscConfig+0x270>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074c8:	f7ff fae6 	bl	8006a98 <HAL_GetTick>
 80074cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074d0:	f7ff fae2 	bl	8006a98 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e17a      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074e2:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1f0      	bne.n	80074d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d03a      	beq.n	8007570 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d019      	beq.n	8007536 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007502:	4b17      	ldr	r3, [pc, #92]	; (8007560 <HAL_RCC_OscConfig+0x274>)
 8007504:	2201      	movs	r2, #1
 8007506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007508:	f7ff fac6 	bl	8006a98 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007510:	f7ff fac2 	bl	8006a98 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e15a      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007522:	4b0d      	ldr	r3, [pc, #52]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f0      	beq.n	8007510 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800752e:	2001      	movs	r0, #1
 8007530:	f000 fad8 	bl	8007ae4 <RCC_Delay>
 8007534:	e01c      	b.n	8007570 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007536:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <HAL_RCC_OscConfig+0x274>)
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800753c:	f7ff faac 	bl	8006a98 <HAL_GetTick>
 8007540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007542:	e00f      	b.n	8007564 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007544:	f7ff faa8 	bl	8006a98 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b02      	cmp	r3, #2
 8007550:	d908      	bls.n	8007564 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e140      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
 8007556:	bf00      	nop
 8007558:	40021000 	.word	0x40021000
 800755c:	42420000 	.word	0x42420000
 8007560:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007564:	4b9e      	ldr	r3, [pc, #632]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e9      	bne.n	8007544 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 80a6 	beq.w	80076ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800757e:	2300      	movs	r3, #0
 8007580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007582:	4b97      	ldr	r3, [pc, #604]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10d      	bne.n	80075aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800758e:	4b94      	ldr	r3, [pc, #592]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	4a93      	ldr	r2, [pc, #588]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007598:	61d3      	str	r3, [r2, #28]
 800759a:	4b91      	ldr	r3, [pc, #580]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a2:	60bb      	str	r3, [r7, #8]
 80075a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075a6:	2301      	movs	r3, #1
 80075a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075aa:	4b8e      	ldr	r3, [pc, #568]	; (80077e4 <HAL_RCC_OscConfig+0x4f8>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d118      	bne.n	80075e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075b6:	4b8b      	ldr	r3, [pc, #556]	; (80077e4 <HAL_RCC_OscConfig+0x4f8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a8a      	ldr	r2, [pc, #552]	; (80077e4 <HAL_RCC_OscConfig+0x4f8>)
 80075bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075c2:	f7ff fa69 	bl	8006a98 <HAL_GetTick>
 80075c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075c8:	e008      	b.n	80075dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ca:	f7ff fa65 	bl	8006a98 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b64      	cmp	r3, #100	; 0x64
 80075d6:	d901      	bls.n	80075dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e0fd      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075dc:	4b81      	ldr	r3, [pc, #516]	; (80077e4 <HAL_RCC_OscConfig+0x4f8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0f0      	beq.n	80075ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d106      	bne.n	80075fe <HAL_RCC_OscConfig+0x312>
 80075f0:	4b7b      	ldr	r3, [pc, #492]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	4a7a      	ldr	r2, [pc, #488]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	6213      	str	r3, [r2, #32]
 80075fc:	e02d      	b.n	800765a <HAL_RCC_OscConfig+0x36e>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10c      	bne.n	8007620 <HAL_RCC_OscConfig+0x334>
 8007606:	4b76      	ldr	r3, [pc, #472]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	4a75      	ldr	r2, [pc, #468]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 800760c:	f023 0301 	bic.w	r3, r3, #1
 8007610:	6213      	str	r3, [r2, #32]
 8007612:	4b73      	ldr	r3, [pc, #460]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	4a72      	ldr	r2, [pc, #456]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007618:	f023 0304 	bic.w	r3, r3, #4
 800761c:	6213      	str	r3, [r2, #32]
 800761e:	e01c      	b.n	800765a <HAL_RCC_OscConfig+0x36e>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	2b05      	cmp	r3, #5
 8007626:	d10c      	bne.n	8007642 <HAL_RCC_OscConfig+0x356>
 8007628:	4b6d      	ldr	r3, [pc, #436]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	4a6c      	ldr	r2, [pc, #432]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 800762e:	f043 0304 	orr.w	r3, r3, #4
 8007632:	6213      	str	r3, [r2, #32]
 8007634:	4b6a      	ldr	r3, [pc, #424]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	4a69      	ldr	r2, [pc, #420]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 800763a:	f043 0301 	orr.w	r3, r3, #1
 800763e:	6213      	str	r3, [r2, #32]
 8007640:	e00b      	b.n	800765a <HAL_RCC_OscConfig+0x36e>
 8007642:	4b67      	ldr	r3, [pc, #412]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	4a66      	ldr	r2, [pc, #408]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007648:	f023 0301 	bic.w	r3, r3, #1
 800764c:	6213      	str	r3, [r2, #32]
 800764e:	4b64      	ldr	r3, [pc, #400]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	4a63      	ldr	r2, [pc, #396]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007654:	f023 0304 	bic.w	r3, r3, #4
 8007658:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d015      	beq.n	800768e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007662:	f7ff fa19 	bl	8006a98 <HAL_GetTick>
 8007666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007668:	e00a      	b.n	8007680 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800766a:	f7ff fa15 	bl	8006a98 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	f241 3288 	movw	r2, #5000	; 0x1388
 8007678:	4293      	cmp	r3, r2
 800767a:	d901      	bls.n	8007680 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e0ab      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007680:	4b57      	ldr	r3, [pc, #348]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0ee      	beq.n	800766a <HAL_RCC_OscConfig+0x37e>
 800768c:	e014      	b.n	80076b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800768e:	f7ff fa03 	bl	8006a98 <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007694:	e00a      	b.n	80076ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007696:	f7ff f9ff 	bl	8006a98 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e095      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ac:	4b4c      	ldr	r3, [pc, #304]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1ee      	bne.n	8007696 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d105      	bne.n	80076ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076be:	4b48      	ldr	r3, [pc, #288]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	4a47      	ldr	r2, [pc, #284]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 80076c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 8081 	beq.w	80077d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076d4:	4b42      	ldr	r3, [pc, #264]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f003 030c 	and.w	r3, r3, #12
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d061      	beq.n	80077a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d146      	bne.n	8007776 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076e8:	4b3f      	ldr	r3, [pc, #252]	; (80077e8 <HAL_RCC_OscConfig+0x4fc>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ee:	f7ff f9d3 	bl	8006a98 <HAL_GetTick>
 80076f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076f4:	e008      	b.n	8007708 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f6:	f7ff f9cf 	bl	8006a98 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	2b02      	cmp	r3, #2
 8007702:	d901      	bls.n	8007708 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e067      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007708:	4b35      	ldr	r3, [pc, #212]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1f0      	bne.n	80076f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800771c:	d108      	bne.n	8007730 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800771e:	4b30      	ldr	r3, [pc, #192]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	492d      	ldr	r1, [pc, #180]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 800772c:	4313      	orrs	r3, r2
 800772e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007730:	4b2b      	ldr	r3, [pc, #172]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a19      	ldr	r1, [r3, #32]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	430b      	orrs	r3, r1
 8007742:	4927      	ldr	r1, [pc, #156]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007744:	4313      	orrs	r3, r2
 8007746:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007748:	4b27      	ldr	r3, [pc, #156]	; (80077e8 <HAL_RCC_OscConfig+0x4fc>)
 800774a:	2201      	movs	r2, #1
 800774c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800774e:	f7ff f9a3 	bl	8006a98 <HAL_GetTick>
 8007752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007754:	e008      	b.n	8007768 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007756:	f7ff f99f 	bl	8006a98 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e037      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007768:	4b1d      	ldr	r3, [pc, #116]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0f0      	beq.n	8007756 <HAL_RCC_OscConfig+0x46a>
 8007774:	e02f      	b.n	80077d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007776:	4b1c      	ldr	r3, [pc, #112]	; (80077e8 <HAL_RCC_OscConfig+0x4fc>)
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800777c:	f7ff f98c 	bl	8006a98 <HAL_GetTick>
 8007780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007782:	e008      	b.n	8007796 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007784:	f7ff f988 	bl	8006a98 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b02      	cmp	r3, #2
 8007790:	d901      	bls.n	8007796 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e020      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007796:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f0      	bne.n	8007784 <HAL_RCC_OscConfig+0x498>
 80077a2:	e018      	b.n	80077d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d101      	bne.n	80077b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e013      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <HAL_RCC_OscConfig+0x4f4>)
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d106      	bne.n	80077d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d001      	beq.n	80077d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e000      	b.n	80077d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	40021000 	.word	0x40021000
 80077e4:	40007000 	.word	0x40007000
 80077e8:	42420060 	.word	0x42420060

080077ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e0d0      	b.n	80079a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007800:	4b6a      	ldr	r3, [pc, #424]	; (80079ac <HAL_RCC_ClockConfig+0x1c0>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	429a      	cmp	r2, r3
 800780c:	d910      	bls.n	8007830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800780e:	4b67      	ldr	r3, [pc, #412]	; (80079ac <HAL_RCC_ClockConfig+0x1c0>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f023 0207 	bic.w	r2, r3, #7
 8007816:	4965      	ldr	r1, [pc, #404]	; (80079ac <HAL_RCC_ClockConfig+0x1c0>)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	4313      	orrs	r3, r2
 800781c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800781e:	4b63      	ldr	r3, [pc, #396]	; (80079ac <HAL_RCC_ClockConfig+0x1c0>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0307 	and.w	r3, r3, #7
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	429a      	cmp	r2, r3
 800782a:	d001      	beq.n	8007830 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e0b8      	b.n	80079a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d020      	beq.n	800787e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0304 	and.w	r3, r3, #4
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007848:	4b59      	ldr	r3, [pc, #356]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	4a58      	ldr	r2, [pc, #352]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 800784e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007852:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0308 	and.w	r3, r3, #8
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007860:	4b53      	ldr	r3, [pc, #332]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	4a52      	ldr	r2, [pc, #328]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007866:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800786a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800786c:	4b50      	ldr	r3, [pc, #320]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	494d      	ldr	r1, [pc, #308]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 800787a:	4313      	orrs	r3, r2
 800787c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	d040      	beq.n	800790c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d107      	bne.n	80078a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007892:	4b47      	ldr	r3, [pc, #284]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d115      	bne.n	80078ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e07f      	b.n	80079a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d107      	bne.n	80078ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078aa:	4b41      	ldr	r3, [pc, #260]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e073      	b.n	80079a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078ba:	4b3d      	ldr	r3, [pc, #244]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e06b      	b.n	80079a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078ca:	4b39      	ldr	r3, [pc, #228]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f023 0203 	bic.w	r2, r3, #3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	4936      	ldr	r1, [pc, #216]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078dc:	f7ff f8dc 	bl	8006a98 <HAL_GetTick>
 80078e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e2:	e00a      	b.n	80078fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078e4:	f7ff f8d8 	bl	8006a98 <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e053      	b.n	80079a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078fa:	4b2d      	ldr	r3, [pc, #180]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f003 020c 	and.w	r2, r3, #12
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	429a      	cmp	r2, r3
 800790a:	d1eb      	bne.n	80078e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800790c:	4b27      	ldr	r3, [pc, #156]	; (80079ac <HAL_RCC_ClockConfig+0x1c0>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d210      	bcs.n	800793c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800791a:	4b24      	ldr	r3, [pc, #144]	; (80079ac <HAL_RCC_ClockConfig+0x1c0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f023 0207 	bic.w	r2, r3, #7
 8007922:	4922      	ldr	r1, [pc, #136]	; (80079ac <HAL_RCC_ClockConfig+0x1c0>)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	4313      	orrs	r3, r2
 8007928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800792a:	4b20      	ldr	r3, [pc, #128]	; (80079ac <HAL_RCC_ClockConfig+0x1c0>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	429a      	cmp	r2, r3
 8007936:	d001      	beq.n	800793c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e032      	b.n	80079a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	d008      	beq.n	800795a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007948:	4b19      	ldr	r3, [pc, #100]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	4916      	ldr	r1, [pc, #88]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007956:	4313      	orrs	r3, r2
 8007958:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0308 	and.w	r3, r3, #8
 8007962:	2b00      	cmp	r3, #0
 8007964:	d009      	beq.n	800797a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007966:	4b12      	ldr	r3, [pc, #72]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	490e      	ldr	r1, [pc, #56]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007976:	4313      	orrs	r3, r2
 8007978:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800797a:	f000 f821 	bl	80079c0 <HAL_RCC_GetSysClockFreq>
 800797e:	4602      	mov	r2, r0
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	091b      	lsrs	r3, r3, #4
 8007986:	f003 030f 	and.w	r3, r3, #15
 800798a:	490a      	ldr	r1, [pc, #40]	; (80079b4 <HAL_RCC_ClockConfig+0x1c8>)
 800798c:	5ccb      	ldrb	r3, [r1, r3]
 800798e:	fa22 f303 	lsr.w	r3, r2, r3
 8007992:	4a09      	ldr	r2, [pc, #36]	; (80079b8 <HAL_RCC_ClockConfig+0x1cc>)
 8007994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007996:	4b09      	ldr	r3, [pc, #36]	; (80079bc <HAL_RCC_ClockConfig+0x1d0>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4618      	mov	r0, r3
 800799c:	f7ff f83a 	bl	8006a14 <HAL_InitTick>

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	40022000 	.word	0x40022000
 80079b0:	40021000 	.word	0x40021000
 80079b4:	0800af2c 	.word	0x0800af2c
 80079b8:	20009c44 	.word	0x20009c44
 80079bc:	20009c48 	.word	0x20009c48

080079c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079c0:	b490      	push	{r4, r7}
 80079c2:	b08a      	sub	sp, #40	; 0x28
 80079c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80079c6:	4b2a      	ldr	r3, [pc, #168]	; (8007a70 <HAL_RCC_GetSysClockFreq+0xb0>)
 80079c8:	1d3c      	adds	r4, r7, #4
 80079ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80079d0:	f240 2301 	movw	r3, #513	; 0x201
 80079d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61fb      	str	r3, [r7, #28]
 80079da:	2300      	movs	r3, #0
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	2300      	movs	r3, #0
 80079e0:	627b      	str	r3, [r7, #36]	; 0x24
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80079ea:	4b22      	ldr	r3, [pc, #136]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xb4>)
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	f003 030c 	and.w	r3, r3, #12
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d002      	beq.n	8007a00 <HAL_RCC_GetSysClockFreq+0x40>
 80079fa:	2b08      	cmp	r3, #8
 80079fc:	d003      	beq.n	8007a06 <HAL_RCC_GetSysClockFreq+0x46>
 80079fe:	e02d      	b.n	8007a5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007a00:	4b1d      	ldr	r3, [pc, #116]	; (8007a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a02:	623b      	str	r3, [r7, #32]
      break;
 8007a04:	e02d      	b.n	8007a62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	0c9b      	lsrs	r3, r3, #18
 8007a0a:	f003 030f 	and.w	r3, r3, #15
 8007a0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007a12:	4413      	add	r3, r2
 8007a14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007a18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d013      	beq.n	8007a4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007a24:	4b13      	ldr	r3, [pc, #76]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	0c5b      	lsrs	r3, r3, #17
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007a32:	4413      	add	r3, r2
 8007a34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007a38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	4a0e      	ldr	r2, [pc, #56]	; (8007a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a3e:	fb02 f203 	mul.w	r2, r2, r3
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
 8007a4a:	e004      	b.n	8007a56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	4a0b      	ldr	r2, [pc, #44]	; (8007a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007a50:	fb02 f303 	mul.w	r3, r2, r3
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	623b      	str	r3, [r7, #32]
      break;
 8007a5a:	e002      	b.n	8007a62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007a5c:	4b06      	ldr	r3, [pc, #24]	; (8007a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a5e:	623b      	str	r3, [r7, #32]
      break;
 8007a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a62:	6a3b      	ldr	r3, [r7, #32]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3728      	adds	r7, #40	; 0x28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bc90      	pop	{r4, r7}
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	0800975c 	.word	0x0800975c
 8007a74:	40021000 	.word	0x40021000
 8007a78:	007a1200 	.word	0x007a1200
 8007a7c:	003d0900 	.word	0x003d0900

08007a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a84:	4b02      	ldr	r3, [pc, #8]	; (8007a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8007a86:	681b      	ldr	r3, [r3, #0]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bc80      	pop	{r7}
 8007a8e:	4770      	bx	lr
 8007a90:	20009c44 	.word	0x20009c44

08007a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a98:	f7ff fff2 	bl	8007a80 <HAL_RCC_GetHCLKFreq>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	0a1b      	lsrs	r3, r3, #8
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	4903      	ldr	r1, [pc, #12]	; (8007ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aaa:	5ccb      	ldrb	r3, [r1, r3]
 8007aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	40021000 	.word	0x40021000
 8007ab8:	0800af3c 	.word	0x0800af3c

08007abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ac0:	f7ff ffde 	bl	8007a80 <HAL_RCC_GetHCLKFreq>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	4b05      	ldr	r3, [pc, #20]	; (8007adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	0adb      	lsrs	r3, r3, #11
 8007acc:	f003 0307 	and.w	r3, r3, #7
 8007ad0:	4903      	ldr	r1, [pc, #12]	; (8007ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ad2:	5ccb      	ldrb	r3, [r1, r3]
 8007ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	40021000 	.word	0x40021000
 8007ae0:	0800af3c 	.word	0x0800af3c

08007ae4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007aec:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <RCC_Delay+0x34>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <RCC_Delay+0x38>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	0a5b      	lsrs	r3, r3, #9
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	fb02 f303 	mul.w	r3, r2, r3
 8007afe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007b00:	bf00      	nop
  }
  while (Delay --);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	1e5a      	subs	r2, r3, #1
 8007b06:	60fa      	str	r2, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1f9      	bne.n	8007b00 <RCC_Delay+0x1c>
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr
 8007b18:	20009c44 	.word	0x20009c44
 8007b1c:	10624dd3 	.word	0x10624dd3

08007b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e041      	b.n	8007bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7fe fde2 	bl	8006710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4610      	mov	r0, r2
 8007b60:	f000 fa7e 	bl	8008060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d001      	beq.n	8007bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e044      	b.n	8007c62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0201 	orr.w	r2, r2, #1
 8007bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a1d      	ldr	r2, [pc, #116]	; (8007c6c <HAL_TIM_Base_Start_IT+0xac>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d018      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x6c>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a1c      	ldr	r2, [pc, #112]	; (8007c70 <HAL_TIM_Base_Start_IT+0xb0>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d013      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x6c>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c0c:	d00e      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x6c>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a18      	ldr	r2, [pc, #96]	; (8007c74 <HAL_TIM_Base_Start_IT+0xb4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d009      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x6c>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a16      	ldr	r2, [pc, #88]	; (8007c78 <HAL_TIM_Base_Start_IT+0xb8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d004      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x6c>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a15      	ldr	r2, [pc, #84]	; (8007c7c <HAL_TIM_Base_Start_IT+0xbc>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d111      	bne.n	8007c50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b06      	cmp	r3, #6
 8007c3c:	d010      	beq.n	8007c60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0201 	orr.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4e:	e007      	b.n	8007c60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	40013400 	.word	0x40013400
 8007c74:	40000400 	.word	0x40000400
 8007c78:	40000800 	.word	0x40000800
 8007c7c:	40000c00 	.word	0x40000c00

08007c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d122      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f003 0302 	and.w	r3, r3, #2
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d11b      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0202 	mvn.w	r2, #2
 8007cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f9b1 	bl	800802a <HAL_TIM_IC_CaptureCallback>
 8007cc8:	e005      	b.n	8007cd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f9a4 	bl	8008018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f9b3 	bl	800803c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	f003 0304 	and.w	r3, r3, #4
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d122      	bne.n	8007d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	d11b      	bne.n	8007d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f06f 0204 	mvn.w	r2, #4
 8007d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2202      	movs	r2, #2
 8007d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f987 	bl	800802a <HAL_TIM_IC_CaptureCallback>
 8007d1c:	e005      	b.n	8007d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f97a 	bl	8008018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f989 	bl	800803c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d122      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	f003 0308 	and.w	r3, r3, #8
 8007d48:	2b08      	cmp	r3, #8
 8007d4a:	d11b      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0208 	mvn.w	r2, #8
 8007d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2204      	movs	r2, #4
 8007d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f95d 	bl	800802a <HAL_TIM_IC_CaptureCallback>
 8007d70:	e005      	b.n	8007d7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f950 	bl	8008018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f95f 	bl	800803c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f003 0310 	and.w	r3, r3, #16
 8007d8e:	2b10      	cmp	r3, #16
 8007d90:	d122      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f003 0310 	and.w	r3, r3, #16
 8007d9c:	2b10      	cmp	r3, #16
 8007d9e:	d11b      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f06f 0210 	mvn.w	r2, #16
 8007da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2208      	movs	r2, #8
 8007dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f933 	bl	800802a <HAL_TIM_IC_CaptureCallback>
 8007dc4:	e005      	b.n	8007dd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f926 	bl	8008018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f935 	bl	800803c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d10e      	bne.n	8007e04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d107      	bne.n	8007e04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f06f 0201 	mvn.w	r2, #1
 8007dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7fe fb76 	bl	80064f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e0e:	2b80      	cmp	r3, #128	; 0x80
 8007e10:	d10e      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1c:	2b80      	cmp	r3, #128	; 0x80
 8007e1e:	d107      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fa9d 	bl	800836a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3a:	2b40      	cmp	r3, #64	; 0x40
 8007e3c:	d10e      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e48:	2b40      	cmp	r3, #64	; 0x40
 8007e4a:	d107      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f8f9 	bl	800804e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0320 	and.w	r3, r3, #32
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	d10e      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d107      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0220 	mvn.w	r2, #32
 8007e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa68 	bl	8008358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d101      	bne.n	8007ea8 <HAL_TIM_ConfigClockSource+0x18>
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e0b3      	b.n	8008010 <HAL_TIM_ConfigClockSource+0x180>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ec6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ece:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee0:	d03e      	beq.n	8007f60 <HAL_TIM_ConfigClockSource+0xd0>
 8007ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee6:	f200 8087 	bhi.w	8007ff8 <HAL_TIM_ConfigClockSource+0x168>
 8007eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eee:	f000 8085 	beq.w	8007ffc <HAL_TIM_ConfigClockSource+0x16c>
 8007ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef6:	d87f      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x168>
 8007ef8:	2b70      	cmp	r3, #112	; 0x70
 8007efa:	d01a      	beq.n	8007f32 <HAL_TIM_ConfigClockSource+0xa2>
 8007efc:	2b70      	cmp	r3, #112	; 0x70
 8007efe:	d87b      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x168>
 8007f00:	2b60      	cmp	r3, #96	; 0x60
 8007f02:	d050      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x116>
 8007f04:	2b60      	cmp	r3, #96	; 0x60
 8007f06:	d877      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x168>
 8007f08:	2b50      	cmp	r3, #80	; 0x50
 8007f0a:	d03c      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0xf6>
 8007f0c:	2b50      	cmp	r3, #80	; 0x50
 8007f0e:	d873      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x168>
 8007f10:	2b40      	cmp	r3, #64	; 0x40
 8007f12:	d058      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x136>
 8007f14:	2b40      	cmp	r3, #64	; 0x40
 8007f16:	d86f      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x168>
 8007f18:	2b30      	cmp	r3, #48	; 0x30
 8007f1a:	d064      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x156>
 8007f1c:	2b30      	cmp	r3, #48	; 0x30
 8007f1e:	d86b      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x168>
 8007f20:	2b20      	cmp	r3, #32
 8007f22:	d060      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x156>
 8007f24:	2b20      	cmp	r3, #32
 8007f26:	d867      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x168>
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d05c      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x156>
 8007f2c:	2b10      	cmp	r3, #16
 8007f2e:	d05a      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007f30:	e062      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6899      	ldr	r1, [r3, #8]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	f000 f97e 	bl	8008242 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	609a      	str	r2, [r3, #8]
      break;
 8007f5e:	e04e      	b.n	8007ffe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	6899      	ldr	r1, [r3, #8]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f000 f967 	bl	8008242 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f82:	609a      	str	r2, [r3, #8]
      break;
 8007f84:	e03b      	b.n	8007ffe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6818      	ldr	r0, [r3, #0]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6859      	ldr	r1, [r3, #4]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	461a      	mov	r2, r3
 8007f94:	f000 f8de 	bl	8008154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2150      	movs	r1, #80	; 0x50
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f935 	bl	800820e <TIM_ITRx_SetConfig>
      break;
 8007fa4:	e02b      	b.n	8007ffe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6859      	ldr	r1, [r3, #4]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f000 f8fc 	bl	80081b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2160      	movs	r1, #96	; 0x60
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 f925 	bl	800820e <TIM_ITRx_SetConfig>
      break;
 8007fc4:	e01b      	b.n	8007ffe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	6859      	ldr	r1, [r3, #4]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f000 f8be 	bl	8008154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2140      	movs	r1, #64	; 0x40
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 f915 	bl	800820e <TIM_ITRx_SetConfig>
      break;
 8007fe4:	e00b      	b.n	8007ffe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	f000 f90c 	bl	800820e <TIM_ITRx_SetConfig>
        break;
 8007ff6:	e002      	b.n	8007ffe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ff8:	bf00      	nop
 8007ffa:	e000      	b.n	8007ffe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ffc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	bc80      	pop	{r7}
 8008028:	4770      	bx	lr

0800802a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr

0800803c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	bc80      	pop	{r7}
 800804c:	4770      	bx	lr

0800804e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	bc80      	pop	{r7}
 800805e:	4770      	bx	lr

08008060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a33      	ldr	r2, [pc, #204]	; (8008140 <TIM_Base_SetConfig+0xe0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d013      	beq.n	80080a0 <TIM_Base_SetConfig+0x40>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a32      	ldr	r2, [pc, #200]	; (8008144 <TIM_Base_SetConfig+0xe4>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00f      	beq.n	80080a0 <TIM_Base_SetConfig+0x40>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008086:	d00b      	beq.n	80080a0 <TIM_Base_SetConfig+0x40>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a2f      	ldr	r2, [pc, #188]	; (8008148 <TIM_Base_SetConfig+0xe8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d007      	beq.n	80080a0 <TIM_Base_SetConfig+0x40>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a2e      	ldr	r2, [pc, #184]	; (800814c <TIM_Base_SetConfig+0xec>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d003      	beq.n	80080a0 <TIM_Base_SetConfig+0x40>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a2d      	ldr	r2, [pc, #180]	; (8008150 <TIM_Base_SetConfig+0xf0>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d108      	bne.n	80080b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a22      	ldr	r2, [pc, #136]	; (8008140 <TIM_Base_SetConfig+0xe0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d013      	beq.n	80080e2 <TIM_Base_SetConfig+0x82>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a21      	ldr	r2, [pc, #132]	; (8008144 <TIM_Base_SetConfig+0xe4>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d00f      	beq.n	80080e2 <TIM_Base_SetConfig+0x82>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c8:	d00b      	beq.n	80080e2 <TIM_Base_SetConfig+0x82>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a1e      	ldr	r2, [pc, #120]	; (8008148 <TIM_Base_SetConfig+0xe8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d007      	beq.n	80080e2 <TIM_Base_SetConfig+0x82>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a1d      	ldr	r2, [pc, #116]	; (800814c <TIM_Base_SetConfig+0xec>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d003      	beq.n	80080e2 <TIM_Base_SetConfig+0x82>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a1c      	ldr	r2, [pc, #112]	; (8008150 <TIM_Base_SetConfig+0xf0>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d108      	bne.n	80080f4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a09      	ldr	r2, [pc, #36]	; (8008140 <TIM_Base_SetConfig+0xe0>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d003      	beq.n	8008128 <TIM_Base_SetConfig+0xc8>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a08      	ldr	r2, [pc, #32]	; (8008144 <TIM_Base_SetConfig+0xe4>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d103      	bne.n	8008130 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	691a      	ldr	r2, [r3, #16]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	615a      	str	r2, [r3, #20]
}
 8008136:	bf00      	nop
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	bc80      	pop	{r7}
 800813e:	4770      	bx	lr
 8008140:	40012c00 	.word	0x40012c00
 8008144:	40013400 	.word	0x40013400
 8008148:	40000400 	.word	0x40000400
 800814c:	40000800 	.word	0x40000800
 8008150:	40000c00 	.word	0x40000c00

08008154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	f023 0201 	bic.w	r2, r3, #1
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800817e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f023 030a 	bic.w	r3, r3, #10
 8008190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	621a      	str	r2, [r3, #32]
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bc80      	pop	{r7}
 80081ae:	4770      	bx	lr

080081b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6a1b      	ldr	r3, [r3, #32]
 80081c0:	f023 0210 	bic.w	r2, r3, #16
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	031b      	lsls	r3, r3, #12
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	621a      	str	r2, [r3, #32]
}
 8008204:	bf00      	nop
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	bc80      	pop	{r7}
 800820c:	4770      	bx	lr

0800820e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800820e:	b480      	push	{r7}
 8008210:	b085      	sub	sp, #20
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4313      	orrs	r3, r2
 800822c:	f043 0307 	orr.w	r3, r3, #7
 8008230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	609a      	str	r2, [r3, #8]
}
 8008238:	bf00      	nop
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	bc80      	pop	{r7}
 8008240:	4770      	bx	lr

08008242 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008242:	b480      	push	{r7}
 8008244:	b087      	sub	sp, #28
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
 800824e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800825c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	021a      	lsls	r2, r3, #8
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	431a      	orrs	r2, r3
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	4313      	orrs	r3, r2
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	4313      	orrs	r3, r2
 800826e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	609a      	str	r2, [r3, #8]
}
 8008276:	bf00      	nop
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	bc80      	pop	{r7}
 800827e:	4770      	bx	lr

08008280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008290:	2b01      	cmp	r3, #1
 8008292:	d101      	bne.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008294:	2302      	movs	r3, #2
 8008296:	e050      	b.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2202      	movs	r2, #2
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a1b      	ldr	r2, [pc, #108]	; (8008344 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d018      	beq.n	800830e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a19      	ldr	r2, [pc, #100]	; (8008348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d013      	beq.n	800830e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ee:	d00e      	beq.n	800830e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a15      	ldr	r2, [pc, #84]	; (800834c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d009      	beq.n	800830e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a14      	ldr	r2, [pc, #80]	; (8008350 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d004      	beq.n	800830e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a12      	ldr	r2, [pc, #72]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d10c      	bne.n	8008328 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	4313      	orrs	r3, r2
 800831e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	bc80      	pop	{r7}
 8008342:	4770      	bx	lr
 8008344:	40012c00 	.word	0x40012c00
 8008348:	40013400 	.word	0x40013400
 800834c:	40000400 	.word	0x40000400
 8008350:	40000800 	.word	0x40000800
 8008354:	40000c00 	.word	0x40000c00

08008358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	bc80      	pop	{r7}
 8008368:	4770      	bx	lr

0800836a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008372:	bf00      	nop
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	bc80      	pop	{r7}
 800837a:	4770      	bx	lr

0800837c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e03f      	b.n	800840e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d106      	bne.n	80083a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7fe f9d8 	bl	8006758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2224      	movs	r2, #36	; 0x24
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fc85 	bl	8008cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	695a      	ldr	r2, [r3, #20]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68da      	ldr	r2, [r3, #12]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2220      	movs	r2, #32
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b08a      	sub	sp, #40	; 0x28
 800841a:	af02      	add	r7, sp, #8
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	603b      	str	r3, [r7, #0]
 8008422:	4613      	mov	r3, r2
 8008424:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b20      	cmp	r3, #32
 8008434:	d17c      	bne.n	8008530 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <HAL_UART_Transmit+0x2c>
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e075      	b.n	8008532 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800844c:	2b01      	cmp	r3, #1
 800844e:	d101      	bne.n	8008454 <HAL_UART_Transmit+0x3e>
 8008450:	2302      	movs	r3, #2
 8008452:	e06e      	b.n	8008532 <HAL_UART_Transmit+0x11c>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2221      	movs	r2, #33	; 0x21
 8008466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800846a:	f7fe fb15 	bl	8006a98 <HAL_GetTick>
 800846e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	88fa      	ldrh	r2, [r7, #6]
 8008474:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	88fa      	ldrh	r2, [r7, #6]
 800847a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008484:	d108      	bne.n	8008498 <HAL_UART_Transmit+0x82>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d104      	bne.n	8008498 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800848e:	2300      	movs	r3, #0
 8008490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	61bb      	str	r3, [r7, #24]
 8008496:	e003      	b.n	80084a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800849c:	2300      	movs	r3, #0
 800849e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80084a8:	e02a      	b.n	8008500 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2200      	movs	r2, #0
 80084b2:	2180      	movs	r1, #128	; 0x80
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 fa38 	bl	800892a <UART_WaitOnFlagUntilTimeout>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e036      	b.n	8008532 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10b      	bne.n	80084e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	3302      	adds	r3, #2
 80084de:	61bb      	str	r3, [r7, #24]
 80084e0:	e007      	b.n	80084f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	781a      	ldrb	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	3301      	adds	r3, #1
 80084f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008504:	b29b      	uxth	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1cf      	bne.n	80084aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2200      	movs	r2, #0
 8008512:	2140      	movs	r1, #64	; 0x40
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 fa08 	bl	800892a <UART_WaitOnFlagUntilTimeout>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e006      	b.n	8008532 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2220      	movs	r2, #32
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	e000      	b.n	8008532 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008530:	2302      	movs	r3, #2
  }
}
 8008532:	4618      	mov	r0, r3
 8008534:	3720      	adds	r7, #32
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	4613      	mov	r3, r2
 8008546:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b20      	cmp	r3, #32
 8008552:	d11d      	bne.n	8008590 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <HAL_UART_Receive_IT+0x26>
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e016      	b.n	8008592 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800856a:	2b01      	cmp	r3, #1
 800856c:	d101      	bne.n	8008572 <HAL_UART_Receive_IT+0x38>
 800856e:	2302      	movs	r3, #2
 8008570:	e00f      	b.n	8008592 <HAL_UART_Receive_IT+0x58>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008580:	88fb      	ldrh	r3, [r7, #6]
 8008582:	461a      	mov	r2, r3
 8008584:	68b9      	ldr	r1, [r7, #8]
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 fa19 	bl	80089be <UART_Start_Receive_IT>
 800858c:	4603      	mov	r3, r0
 800858e:	e000      	b.n	8008592 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008590:	2302      	movs	r3, #2
  }
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08a      	sub	sp, #40	; 0x28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80085bc:	2300      	movs	r3, #0
 80085be:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	f003 030f 	and.w	r3, r3, #15
 80085ca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10d      	bne.n	80085ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	f003 0320 	and.w	r3, r3, #32
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d008      	beq.n	80085ee <HAL_UART_IRQHandler+0x52>
 80085dc:	6a3b      	ldr	r3, [r7, #32]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fac9 	bl	8008b7e <UART_Receive_IT>
      return;
 80085ec:	e17b      	b.n	80088e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 80b1 	beq.w	8008758 <HAL_UART_IRQHandler+0x1bc>
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d105      	bne.n	800860c <HAL_UART_IRQHandler+0x70>
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 80a6 	beq.w	8008758 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <HAL_UART_IRQHandler+0x90>
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800861c:	2b00      	cmp	r3, #0
 800861e:	d005      	beq.n	800862c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008624:	f043 0201 	orr.w	r2, r3, #1
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	f003 0304 	and.w	r3, r3, #4
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <HAL_UART_IRQHandler+0xb0>
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008644:	f043 0202 	orr.w	r2, r3, #2
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <HAL_UART_IRQHandler+0xd0>
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008664:	f043 0204 	orr.w	r2, r3, #4
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	f003 0308 	and.w	r3, r3, #8
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00f      	beq.n	8008696 <HAL_UART_IRQHandler+0xfa>
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	f003 0320 	and.w	r3, r3, #32
 800867c:	2b00      	cmp	r3, #0
 800867e:	d104      	bne.n	800868a <HAL_UART_IRQHandler+0xee>
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d005      	beq.n	8008696 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	f043 0208 	orr.w	r2, r3, #8
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 811e 	beq.w	80088dc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d007      	beq.n	80086ba <HAL_UART_IRQHandler+0x11e>
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	f003 0320 	and.w	r3, r3, #32
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fa62 	bl	8008b7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bf14      	ite	ne
 80086c8:	2301      	movne	r3, #1
 80086ca:	2300      	moveq	r3, #0
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	f003 0308 	and.w	r3, r3, #8
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <HAL_UART_IRQHandler+0x146>
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d031      	beq.n	8008746 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f9a4 	bl	8008a30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d023      	beq.n	800873e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	695a      	ldr	r2, [r3, #20]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008704:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870a:	2b00      	cmp	r3, #0
 800870c:	d013      	beq.n	8008736 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008712:	4a76      	ldr	r2, [pc, #472]	; (80088ec <HAL_UART_IRQHandler+0x350>)
 8008714:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe fb32 	bl	8006d84 <HAL_DMA_Abort_IT>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d016      	beq.n	8008754 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008730:	4610      	mov	r0, r2
 8008732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008734:	e00e      	b.n	8008754 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f8e3 	bl	8008902 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800873c:	e00a      	b.n	8008754 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f8df 	bl	8008902 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008744:	e006      	b.n	8008754 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f8db 	bl	8008902 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008752:	e0c3      	b.n	80088dc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008754:	bf00      	nop
    return;
 8008756:	e0c1      	b.n	80088dc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875c:	2b01      	cmp	r3, #1
 800875e:	f040 80a1 	bne.w	80088a4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	f003 0310 	and.w	r3, r3, #16
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 809b 	beq.w	80088a4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	f003 0310 	and.w	r3, r3, #16
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 8095 	beq.w	80088a4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800877a:	2300      	movs	r3, #0
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	60fb      	str	r3, [r7, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	d04e      	beq.n	800883c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80087a8:	8a3b      	ldrh	r3, [r7, #16]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 8098 	beq.w	80088e0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087b4:	8a3a      	ldrh	r2, [r7, #16]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	f080 8092 	bcs.w	80088e0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	8a3a      	ldrh	r2, [r7, #16]
 80087c0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	2b20      	cmp	r3, #32
 80087ca:	d02b      	beq.n	8008824 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68da      	ldr	r2, [r3, #12]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087da:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	695a      	ldr	r2, [r3, #20]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0201 	bic.w	r2, r2, #1
 80087ea:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	695a      	ldr	r2, [r3, #20]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087fa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2220      	movs	r2, #32
 8008800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68da      	ldr	r2, [r3, #12]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0210 	bic.w	r2, r2, #16
 8008818:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe fa75 	bl	8006d0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800882c:	b29b      	uxth	r3, r3
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	b29b      	uxth	r3, r3
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f86d 	bl	8008914 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800883a:	e051      	b.n	80088e0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008844:	b29b      	uxth	r3, r3
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800884e:	b29b      	uxth	r3, r3
 8008850:	2b00      	cmp	r3, #0
 8008852:	d047      	beq.n	80088e4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008854:	8a7b      	ldrh	r3, [r7, #18]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d044      	beq.n	80088e4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008868:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	695a      	ldr	r2, [r3, #20]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 0201 	bic.w	r2, r2, #1
 8008878:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2220      	movs	r2, #32
 800887e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0210 	bic.w	r2, r2, #16
 8008896:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008898:	8a7b      	ldrh	r3, [r7, #18]
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f839 	bl	8008914 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80088a2:	e01f      	b.n	80088e4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d008      	beq.n	80088c0 <HAL_UART_IRQHandler+0x324>
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d003      	beq.n	80088c0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f8f9 	bl	8008ab0 <UART_Transmit_IT>
    return;
 80088be:	e012      	b.n	80088e6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00d      	beq.n	80088e6 <HAL_UART_IRQHandler+0x34a>
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d008      	beq.n	80088e6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f93a 	bl	8008b4e <UART_EndTransmit_IT>
    return;
 80088da:	e004      	b.n	80088e6 <HAL_UART_IRQHandler+0x34a>
    return;
 80088dc:	bf00      	nop
 80088de:	e002      	b.n	80088e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80088e0:	bf00      	nop
 80088e2:	e000      	b.n	80088e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80088e4:	bf00      	nop
  }
}
 80088e6:	3728      	adds	r7, #40	; 0x28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	08008a89 	.word	0x08008a89

080088f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bc80      	pop	{r7}
 8008900:	4770      	bx	lr

08008902 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800890a:	bf00      	nop
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	bc80      	pop	{r7}
 8008912:	4770      	bx	lr

08008914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	bc80      	pop	{r7}
 8008928:	4770      	bx	lr

0800892a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	60f8      	str	r0, [r7, #12]
 8008932:	60b9      	str	r1, [r7, #8]
 8008934:	603b      	str	r3, [r7, #0]
 8008936:	4613      	mov	r3, r2
 8008938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800893a:	e02c      	b.n	8008996 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008942:	d028      	beq.n	8008996 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d007      	beq.n	800895a <UART_WaitOnFlagUntilTimeout+0x30>
 800894a:	f7fe f8a5 	bl	8006a98 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	429a      	cmp	r2, r3
 8008958:	d21d      	bcs.n	8008996 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008968:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	695a      	ldr	r2, [r3, #20]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f022 0201 	bic.w	r2, r2, #1
 8008978:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2220      	movs	r2, #32
 800897e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2220      	movs	r2, #32
 8008986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e00f      	b.n	80089b6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4013      	ands	r3, r2
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	bf0c      	ite	eq
 80089a6:	2301      	moveq	r3, #1
 80089a8:	2300      	movne	r3, #0
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	461a      	mov	r2, r3
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d0c3      	beq.n	800893c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089be:	b480      	push	{r7}
 80089c0:	b085      	sub	sp, #20
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	60f8      	str	r0, [r7, #12]
 80089c6:	60b9      	str	r1, [r7, #8]
 80089c8:	4613      	mov	r3, r2
 80089ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	88fa      	ldrh	r2, [r7, #6]
 80089d6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	88fa      	ldrh	r2, [r7, #6]
 80089dc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2222      	movs	r2, #34	; 0x22
 80089e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a02:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	695a      	ldr	r2, [r3, #20]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f042 0201 	orr.w	r2, r2, #1
 8008a12:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f042 0220 	orr.w	r2, r2, #32
 8008a22:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bc80      	pop	{r7}
 8008a2e:	4770      	bx	lr

08008a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68da      	ldr	r2, [r3, #12]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a46:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	695a      	ldr	r2, [r3, #20]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 0201 	bic.w	r2, r2, #1
 8008a56:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d107      	bne.n	8008a70 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0210 	bic.w	r2, r2, #16
 8008a6e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2220      	movs	r2, #32
 8008a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008a7e:	bf00      	nop
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bc80      	pop	{r7}
 8008a86:	4770      	bx	lr

08008a88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f7ff ff2d 	bl	8008902 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aa8:	bf00      	nop
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b21      	cmp	r3, #33	; 0x21
 8008ac2:	d13e      	bne.n	8008b42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008acc:	d114      	bne.n	8008af8 <UART_Transmit_IT+0x48>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d110      	bne.n	8008af8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	1c9a      	adds	r2, r3, #2
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	621a      	str	r2, [r3, #32]
 8008af6:	e008      	b.n	8008b0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	1c59      	adds	r1, r3, #1
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6211      	str	r1, [r2, #32]
 8008b02:	781a      	ldrb	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	4619      	mov	r1, r3
 8008b18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10f      	bne.n	8008b3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68da      	ldr	r2, [r3, #12]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e000      	b.n	8008b44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b42:	2302      	movs	r3, #2
  }
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr

08008b4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b082      	sub	sp, #8
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68da      	ldr	r2, [r3, #12]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7ff febe 	bl	80088f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b086      	sub	sp, #24
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b22      	cmp	r3, #34	; 0x22
 8008b90:	f040 8099 	bne.w	8008cc6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9c:	d117      	bne.n	8008bce <UART_Receive_IT+0x50>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d113      	bne.n	8008bce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bae:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc6:	1c9a      	adds	r2, r3, #2
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	629a      	str	r2, [r3, #40]	; 0x28
 8008bcc:	e026      	b.n	8008c1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008be0:	d007      	beq.n	8008bf2 <UART_Receive_IT+0x74>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10a      	bne.n	8008c00 <UART_Receive_IT+0x82>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d106      	bne.n	8008c00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	701a      	strb	r2, [r3, #0]
 8008bfe:	e008      	b.n	8008c12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	3b01      	subs	r3, #1
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d148      	bne.n	8008cc2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68da      	ldr	r2, [r3, #12]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 0220 	bic.w	r2, r2, #32
 8008c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	695a      	ldr	r2, [r3, #20]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 0201 	bic.w	r2, r2, #1
 8008c5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2220      	movs	r2, #32
 8008c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d123      	bne.n	8008cb8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0210 	bic.w	r2, r2, #16
 8008c84:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0310 	and.w	r3, r3, #16
 8008c90:	2b10      	cmp	r3, #16
 8008c92:	d10a      	bne.n	8008caa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff fe2f 	bl	8008914 <HAL_UARTEx_RxEventCallback>
 8008cb6:	e002      	b.n	8008cbe <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7fd fc53 	bl	8006564 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	e002      	b.n	8008cc8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e000      	b.n	8008cc8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008cc6:	2302      	movs	r3, #2
  }
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68da      	ldr	r2, [r3, #12]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	689a      	ldr	r2, [r3, #8]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008d0a:	f023 030c 	bic.w	r3, r3, #12
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	68b9      	ldr	r1, [r7, #8]
 8008d14:	430b      	orrs	r3, r1
 8008d16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	699a      	ldr	r2, [r3, #24]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a2c      	ldr	r2, [pc, #176]	; (8008de4 <UART_SetConfig+0x114>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d103      	bne.n	8008d40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008d38:	f7fe fec0 	bl	8007abc <HAL_RCC_GetPCLK2Freq>
 8008d3c:	60f8      	str	r0, [r7, #12]
 8008d3e:	e002      	b.n	8008d46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008d40:	f7fe fea8 	bl	8007a94 <HAL_RCC_GetPCLK1Freq>
 8008d44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	009a      	lsls	r2, r3, #2
 8008d50:	441a      	add	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d5c:	4a22      	ldr	r2, [pc, #136]	; (8008de8 <UART_SetConfig+0x118>)
 8008d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d62:	095b      	lsrs	r3, r3, #5
 8008d64:	0119      	lsls	r1, r3, #4
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	009a      	lsls	r2, r3, #2
 8008d70:	441a      	add	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d7c:	4b1a      	ldr	r3, [pc, #104]	; (8008de8 <UART_SetConfig+0x118>)
 8008d7e:	fba3 0302 	umull	r0, r3, r3, r2
 8008d82:	095b      	lsrs	r3, r3, #5
 8008d84:	2064      	movs	r0, #100	; 0x64
 8008d86:	fb00 f303 	mul.w	r3, r0, r3
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	011b      	lsls	r3, r3, #4
 8008d8e:	3332      	adds	r3, #50	; 0x32
 8008d90:	4a15      	ldr	r2, [pc, #84]	; (8008de8 <UART_SetConfig+0x118>)
 8008d92:	fba2 2303 	umull	r2, r3, r2, r3
 8008d96:	095b      	lsrs	r3, r3, #5
 8008d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d9c:	4419      	add	r1, r3
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009a      	lsls	r2, r3, #2
 8008da8:	441a      	add	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008db4:	4b0c      	ldr	r3, [pc, #48]	; (8008de8 <UART_SetConfig+0x118>)
 8008db6:	fba3 0302 	umull	r0, r3, r3, r2
 8008dba:	095b      	lsrs	r3, r3, #5
 8008dbc:	2064      	movs	r0, #100	; 0x64
 8008dbe:	fb00 f303 	mul.w	r3, r0, r3
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	3332      	adds	r3, #50	; 0x32
 8008dc8:	4a07      	ldr	r2, [pc, #28]	; (8008de8 <UART_SetConfig+0x118>)
 8008dca:	fba2 2303 	umull	r2, r3, r2, r3
 8008dce:	095b      	lsrs	r3, r3, #5
 8008dd0:	f003 020f 	and.w	r2, r3, #15
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	440a      	add	r2, r1
 8008dda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008ddc:	bf00      	nop
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	40013800 	.word	0x40013800
 8008de8:	51eb851f 	.word	0x51eb851f

08008dec <__errno>:
 8008dec:	4b01      	ldr	r3, [pc, #4]	; (8008df4 <__errno+0x8>)
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	20009c50 	.word	0x20009c50

08008df8 <__libc_init_array>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	2600      	movs	r6, #0
 8008dfc:	4d0c      	ldr	r5, [pc, #48]	; (8008e30 <__libc_init_array+0x38>)
 8008dfe:	4c0d      	ldr	r4, [pc, #52]	; (8008e34 <__libc_init_array+0x3c>)
 8008e00:	1b64      	subs	r4, r4, r5
 8008e02:	10a4      	asrs	r4, r4, #2
 8008e04:	42a6      	cmp	r6, r4
 8008e06:	d109      	bne.n	8008e1c <__libc_init_array+0x24>
 8008e08:	f000 fc5c 	bl	80096c4 <_init>
 8008e0c:	2600      	movs	r6, #0
 8008e0e:	4d0a      	ldr	r5, [pc, #40]	; (8008e38 <__libc_init_array+0x40>)
 8008e10:	4c0a      	ldr	r4, [pc, #40]	; (8008e3c <__libc_init_array+0x44>)
 8008e12:	1b64      	subs	r4, r4, r5
 8008e14:	10a4      	asrs	r4, r4, #2
 8008e16:	42a6      	cmp	r6, r4
 8008e18:	d105      	bne.n	8008e26 <__libc_init_array+0x2e>
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e20:	4798      	blx	r3
 8008e22:	3601      	adds	r6, #1
 8008e24:	e7ee      	b.n	8008e04 <__libc_init_array+0xc>
 8008e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2a:	4798      	blx	r3
 8008e2c:	3601      	adds	r6, #1
 8008e2e:	e7f2      	b.n	8008e16 <__libc_init_array+0x1e>
 8008e30:	0800af78 	.word	0x0800af78
 8008e34:	0800af78 	.word	0x0800af78
 8008e38:	0800af78 	.word	0x0800af78
 8008e3c:	0800af7c 	.word	0x0800af7c

08008e40 <memset>:
 8008e40:	4603      	mov	r3, r0
 8008e42:	4402      	add	r2, r0
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d100      	bne.n	8008e4a <memset+0xa>
 8008e48:	4770      	bx	lr
 8008e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e4e:	e7f9      	b.n	8008e44 <memset+0x4>

08008e50 <siprintf>:
 8008e50:	b40e      	push	{r1, r2, r3}
 8008e52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e56:	b500      	push	{lr}
 8008e58:	b09c      	sub	sp, #112	; 0x70
 8008e5a:	ab1d      	add	r3, sp, #116	; 0x74
 8008e5c:	9002      	str	r0, [sp, #8]
 8008e5e:	9006      	str	r0, [sp, #24]
 8008e60:	9107      	str	r1, [sp, #28]
 8008e62:	9104      	str	r1, [sp, #16]
 8008e64:	4808      	ldr	r0, [pc, #32]	; (8008e88 <siprintf+0x38>)
 8008e66:	4909      	ldr	r1, [pc, #36]	; (8008e8c <siprintf+0x3c>)
 8008e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e6c:	9105      	str	r1, [sp, #20]
 8008e6e:	6800      	ldr	r0, [r0, #0]
 8008e70:	a902      	add	r1, sp, #8
 8008e72:	9301      	str	r3, [sp, #4]
 8008e74:	f000 f868 	bl	8008f48 <_svfiprintf_r>
 8008e78:	2200      	movs	r2, #0
 8008e7a:	9b02      	ldr	r3, [sp, #8]
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	b01c      	add	sp, #112	; 0x70
 8008e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e84:	b003      	add	sp, #12
 8008e86:	4770      	bx	lr
 8008e88:	20009c50 	.word	0x20009c50
 8008e8c:	ffff0208 	.word	0xffff0208

08008e90 <__ssputs_r>:
 8008e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e94:	688e      	ldr	r6, [r1, #8]
 8008e96:	4682      	mov	sl, r0
 8008e98:	429e      	cmp	r6, r3
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	4690      	mov	r8, r2
 8008e9e:	461f      	mov	r7, r3
 8008ea0:	d838      	bhi.n	8008f14 <__ssputs_r+0x84>
 8008ea2:	898a      	ldrh	r2, [r1, #12]
 8008ea4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ea8:	d032      	beq.n	8008f10 <__ssputs_r+0x80>
 8008eaa:	6825      	ldr	r5, [r4, #0]
 8008eac:	6909      	ldr	r1, [r1, #16]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	eba5 0901 	sub.w	r9, r5, r1
 8008eb4:	6965      	ldr	r5, [r4, #20]
 8008eb6:	444b      	add	r3, r9
 8008eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ebc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ec0:	106d      	asrs	r5, r5, #1
 8008ec2:	429d      	cmp	r5, r3
 8008ec4:	bf38      	it	cc
 8008ec6:	461d      	movcc	r5, r3
 8008ec8:	0553      	lsls	r3, r2, #21
 8008eca:	d531      	bpl.n	8008f30 <__ssputs_r+0xa0>
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f000 fb53 	bl	8009578 <_malloc_r>
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	b950      	cbnz	r0, 8008eec <__ssputs_r+0x5c>
 8008ed6:	230c      	movs	r3, #12
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8008edc:	f8ca 3000 	str.w	r3, [sl]
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eec:	464a      	mov	r2, r9
 8008eee:	6921      	ldr	r1, [r4, #16]
 8008ef0:	f000 face 	bl	8009490 <memcpy>
 8008ef4:	89a3      	ldrh	r3, [r4, #12]
 8008ef6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efe:	81a3      	strh	r3, [r4, #12]
 8008f00:	6126      	str	r6, [r4, #16]
 8008f02:	444e      	add	r6, r9
 8008f04:	6026      	str	r6, [r4, #0]
 8008f06:	463e      	mov	r6, r7
 8008f08:	6165      	str	r5, [r4, #20]
 8008f0a:	eba5 0509 	sub.w	r5, r5, r9
 8008f0e:	60a5      	str	r5, [r4, #8]
 8008f10:	42be      	cmp	r6, r7
 8008f12:	d900      	bls.n	8008f16 <__ssputs_r+0x86>
 8008f14:	463e      	mov	r6, r7
 8008f16:	4632      	mov	r2, r6
 8008f18:	4641      	mov	r1, r8
 8008f1a:	6820      	ldr	r0, [r4, #0]
 8008f1c:	f000 fac6 	bl	80094ac <memmove>
 8008f20:	68a3      	ldr	r3, [r4, #8]
 8008f22:	6822      	ldr	r2, [r4, #0]
 8008f24:	1b9b      	subs	r3, r3, r6
 8008f26:	4432      	add	r2, r6
 8008f28:	2000      	movs	r0, #0
 8008f2a:	60a3      	str	r3, [r4, #8]
 8008f2c:	6022      	str	r2, [r4, #0]
 8008f2e:	e7db      	b.n	8008ee8 <__ssputs_r+0x58>
 8008f30:	462a      	mov	r2, r5
 8008f32:	f000 fb7b 	bl	800962c <_realloc_r>
 8008f36:	4606      	mov	r6, r0
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d1e1      	bne.n	8008f00 <__ssputs_r+0x70>
 8008f3c:	4650      	mov	r0, sl
 8008f3e:	6921      	ldr	r1, [r4, #16]
 8008f40:	f000 face 	bl	80094e0 <_free_r>
 8008f44:	e7c7      	b.n	8008ed6 <__ssputs_r+0x46>
	...

08008f48 <_svfiprintf_r>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	4698      	mov	r8, r3
 8008f4e:	898b      	ldrh	r3, [r1, #12]
 8008f50:	4607      	mov	r7, r0
 8008f52:	061b      	lsls	r3, r3, #24
 8008f54:	460d      	mov	r5, r1
 8008f56:	4614      	mov	r4, r2
 8008f58:	b09d      	sub	sp, #116	; 0x74
 8008f5a:	d50e      	bpl.n	8008f7a <_svfiprintf_r+0x32>
 8008f5c:	690b      	ldr	r3, [r1, #16]
 8008f5e:	b963      	cbnz	r3, 8008f7a <_svfiprintf_r+0x32>
 8008f60:	2140      	movs	r1, #64	; 0x40
 8008f62:	f000 fb09 	bl	8009578 <_malloc_r>
 8008f66:	6028      	str	r0, [r5, #0]
 8008f68:	6128      	str	r0, [r5, #16]
 8008f6a:	b920      	cbnz	r0, 8008f76 <_svfiprintf_r+0x2e>
 8008f6c:	230c      	movs	r3, #12
 8008f6e:	603b      	str	r3, [r7, #0]
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	e0d1      	b.n	800911a <_svfiprintf_r+0x1d2>
 8008f76:	2340      	movs	r3, #64	; 0x40
 8008f78:	616b      	str	r3, [r5, #20]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f7e:	2320      	movs	r3, #32
 8008f80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f84:	2330      	movs	r3, #48	; 0x30
 8008f86:	f04f 0901 	mov.w	r9, #1
 8008f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009134 <_svfiprintf_r+0x1ec>
 8008f92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f96:	4623      	mov	r3, r4
 8008f98:	469a      	mov	sl, r3
 8008f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f9e:	b10a      	cbz	r2, 8008fa4 <_svfiprintf_r+0x5c>
 8008fa0:	2a25      	cmp	r2, #37	; 0x25
 8008fa2:	d1f9      	bne.n	8008f98 <_svfiprintf_r+0x50>
 8008fa4:	ebba 0b04 	subs.w	fp, sl, r4
 8008fa8:	d00b      	beq.n	8008fc2 <_svfiprintf_r+0x7a>
 8008faa:	465b      	mov	r3, fp
 8008fac:	4622      	mov	r2, r4
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	f7ff ff6d 	bl	8008e90 <__ssputs_r>
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	f000 80aa 	beq.w	8009110 <_svfiprintf_r+0x1c8>
 8008fbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fbe:	445a      	add	r2, fp
 8008fc0:	9209      	str	r2, [sp, #36]	; 0x24
 8008fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 80a2 	beq.w	8009110 <_svfiprintf_r+0x1c8>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fd6:	f10a 0a01 	add.w	sl, sl, #1
 8008fda:	9304      	str	r3, [sp, #16]
 8008fdc:	9307      	str	r3, [sp, #28]
 8008fde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fe2:	931a      	str	r3, [sp, #104]	; 0x68
 8008fe4:	4654      	mov	r4, sl
 8008fe6:	2205      	movs	r2, #5
 8008fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fec:	4851      	ldr	r0, [pc, #324]	; (8009134 <_svfiprintf_r+0x1ec>)
 8008fee:	f000 fa41 	bl	8009474 <memchr>
 8008ff2:	9a04      	ldr	r2, [sp, #16]
 8008ff4:	b9d8      	cbnz	r0, 800902e <_svfiprintf_r+0xe6>
 8008ff6:	06d0      	lsls	r0, r2, #27
 8008ff8:	bf44      	itt	mi
 8008ffa:	2320      	movmi	r3, #32
 8008ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009000:	0711      	lsls	r1, r2, #28
 8009002:	bf44      	itt	mi
 8009004:	232b      	movmi	r3, #43	; 0x2b
 8009006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800900a:	f89a 3000 	ldrb.w	r3, [sl]
 800900e:	2b2a      	cmp	r3, #42	; 0x2a
 8009010:	d015      	beq.n	800903e <_svfiprintf_r+0xf6>
 8009012:	4654      	mov	r4, sl
 8009014:	2000      	movs	r0, #0
 8009016:	f04f 0c0a 	mov.w	ip, #10
 800901a:	9a07      	ldr	r2, [sp, #28]
 800901c:	4621      	mov	r1, r4
 800901e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009022:	3b30      	subs	r3, #48	; 0x30
 8009024:	2b09      	cmp	r3, #9
 8009026:	d94e      	bls.n	80090c6 <_svfiprintf_r+0x17e>
 8009028:	b1b0      	cbz	r0, 8009058 <_svfiprintf_r+0x110>
 800902a:	9207      	str	r2, [sp, #28]
 800902c:	e014      	b.n	8009058 <_svfiprintf_r+0x110>
 800902e:	eba0 0308 	sub.w	r3, r0, r8
 8009032:	fa09 f303 	lsl.w	r3, r9, r3
 8009036:	4313      	orrs	r3, r2
 8009038:	46a2      	mov	sl, r4
 800903a:	9304      	str	r3, [sp, #16]
 800903c:	e7d2      	b.n	8008fe4 <_svfiprintf_r+0x9c>
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	1d19      	adds	r1, r3, #4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	9103      	str	r1, [sp, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	bfbb      	ittet	lt
 800904a:	425b      	neglt	r3, r3
 800904c:	f042 0202 	orrlt.w	r2, r2, #2
 8009050:	9307      	strge	r3, [sp, #28]
 8009052:	9307      	strlt	r3, [sp, #28]
 8009054:	bfb8      	it	lt
 8009056:	9204      	strlt	r2, [sp, #16]
 8009058:	7823      	ldrb	r3, [r4, #0]
 800905a:	2b2e      	cmp	r3, #46	; 0x2e
 800905c:	d10c      	bne.n	8009078 <_svfiprintf_r+0x130>
 800905e:	7863      	ldrb	r3, [r4, #1]
 8009060:	2b2a      	cmp	r3, #42	; 0x2a
 8009062:	d135      	bne.n	80090d0 <_svfiprintf_r+0x188>
 8009064:	9b03      	ldr	r3, [sp, #12]
 8009066:	3402      	adds	r4, #2
 8009068:	1d1a      	adds	r2, r3, #4
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	9203      	str	r2, [sp, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	bfb8      	it	lt
 8009072:	f04f 33ff 	movlt.w	r3, #4294967295
 8009076:	9305      	str	r3, [sp, #20]
 8009078:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009144 <_svfiprintf_r+0x1fc>
 800907c:	2203      	movs	r2, #3
 800907e:	4650      	mov	r0, sl
 8009080:	7821      	ldrb	r1, [r4, #0]
 8009082:	f000 f9f7 	bl	8009474 <memchr>
 8009086:	b140      	cbz	r0, 800909a <_svfiprintf_r+0x152>
 8009088:	2340      	movs	r3, #64	; 0x40
 800908a:	eba0 000a 	sub.w	r0, r0, sl
 800908e:	fa03 f000 	lsl.w	r0, r3, r0
 8009092:	9b04      	ldr	r3, [sp, #16]
 8009094:	3401      	adds	r4, #1
 8009096:	4303      	orrs	r3, r0
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800909e:	2206      	movs	r2, #6
 80090a0:	4825      	ldr	r0, [pc, #148]	; (8009138 <_svfiprintf_r+0x1f0>)
 80090a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090a6:	f000 f9e5 	bl	8009474 <memchr>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d038      	beq.n	8009120 <_svfiprintf_r+0x1d8>
 80090ae:	4b23      	ldr	r3, [pc, #140]	; (800913c <_svfiprintf_r+0x1f4>)
 80090b0:	bb1b      	cbnz	r3, 80090fa <_svfiprintf_r+0x1b2>
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	3307      	adds	r3, #7
 80090b6:	f023 0307 	bic.w	r3, r3, #7
 80090ba:	3308      	adds	r3, #8
 80090bc:	9303      	str	r3, [sp, #12]
 80090be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c0:	4433      	add	r3, r6
 80090c2:	9309      	str	r3, [sp, #36]	; 0x24
 80090c4:	e767      	b.n	8008f96 <_svfiprintf_r+0x4e>
 80090c6:	460c      	mov	r4, r1
 80090c8:	2001      	movs	r0, #1
 80090ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ce:	e7a5      	b.n	800901c <_svfiprintf_r+0xd4>
 80090d0:	2300      	movs	r3, #0
 80090d2:	f04f 0c0a 	mov.w	ip, #10
 80090d6:	4619      	mov	r1, r3
 80090d8:	3401      	adds	r4, #1
 80090da:	9305      	str	r3, [sp, #20]
 80090dc:	4620      	mov	r0, r4
 80090de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090e2:	3a30      	subs	r2, #48	; 0x30
 80090e4:	2a09      	cmp	r2, #9
 80090e6:	d903      	bls.n	80090f0 <_svfiprintf_r+0x1a8>
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d0c5      	beq.n	8009078 <_svfiprintf_r+0x130>
 80090ec:	9105      	str	r1, [sp, #20]
 80090ee:	e7c3      	b.n	8009078 <_svfiprintf_r+0x130>
 80090f0:	4604      	mov	r4, r0
 80090f2:	2301      	movs	r3, #1
 80090f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80090f8:	e7f0      	b.n	80090dc <_svfiprintf_r+0x194>
 80090fa:	ab03      	add	r3, sp, #12
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	462a      	mov	r2, r5
 8009100:	4638      	mov	r0, r7
 8009102:	4b0f      	ldr	r3, [pc, #60]	; (8009140 <_svfiprintf_r+0x1f8>)
 8009104:	a904      	add	r1, sp, #16
 8009106:	f3af 8000 	nop.w
 800910a:	1c42      	adds	r2, r0, #1
 800910c:	4606      	mov	r6, r0
 800910e:	d1d6      	bne.n	80090be <_svfiprintf_r+0x176>
 8009110:	89ab      	ldrh	r3, [r5, #12]
 8009112:	065b      	lsls	r3, r3, #25
 8009114:	f53f af2c 	bmi.w	8008f70 <_svfiprintf_r+0x28>
 8009118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800911a:	b01d      	add	sp, #116	; 0x74
 800911c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009120:	ab03      	add	r3, sp, #12
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	462a      	mov	r2, r5
 8009126:	4638      	mov	r0, r7
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <_svfiprintf_r+0x1f8>)
 800912a:	a904      	add	r1, sp, #16
 800912c:	f000 f87c 	bl	8009228 <_printf_i>
 8009130:	e7eb      	b.n	800910a <_svfiprintf_r+0x1c2>
 8009132:	bf00      	nop
 8009134:	0800af44 	.word	0x0800af44
 8009138:	0800af4e 	.word	0x0800af4e
 800913c:	00000000 	.word	0x00000000
 8009140:	08008e91 	.word	0x08008e91
 8009144:	0800af4a 	.word	0x0800af4a

08009148 <_printf_common>:
 8009148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800914c:	4616      	mov	r6, r2
 800914e:	4699      	mov	r9, r3
 8009150:	688a      	ldr	r2, [r1, #8]
 8009152:	690b      	ldr	r3, [r1, #16]
 8009154:	4607      	mov	r7, r0
 8009156:	4293      	cmp	r3, r2
 8009158:	bfb8      	it	lt
 800915a:	4613      	movlt	r3, r2
 800915c:	6033      	str	r3, [r6, #0]
 800915e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009162:	460c      	mov	r4, r1
 8009164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009168:	b10a      	cbz	r2, 800916e <_printf_common+0x26>
 800916a:	3301      	adds	r3, #1
 800916c:	6033      	str	r3, [r6, #0]
 800916e:	6823      	ldr	r3, [r4, #0]
 8009170:	0699      	lsls	r1, r3, #26
 8009172:	bf42      	ittt	mi
 8009174:	6833      	ldrmi	r3, [r6, #0]
 8009176:	3302      	addmi	r3, #2
 8009178:	6033      	strmi	r3, [r6, #0]
 800917a:	6825      	ldr	r5, [r4, #0]
 800917c:	f015 0506 	ands.w	r5, r5, #6
 8009180:	d106      	bne.n	8009190 <_printf_common+0x48>
 8009182:	f104 0a19 	add.w	sl, r4, #25
 8009186:	68e3      	ldr	r3, [r4, #12]
 8009188:	6832      	ldr	r2, [r6, #0]
 800918a:	1a9b      	subs	r3, r3, r2
 800918c:	42ab      	cmp	r3, r5
 800918e:	dc28      	bgt.n	80091e2 <_printf_common+0x9a>
 8009190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009194:	1e13      	subs	r3, r2, #0
 8009196:	6822      	ldr	r2, [r4, #0]
 8009198:	bf18      	it	ne
 800919a:	2301      	movne	r3, #1
 800919c:	0692      	lsls	r2, r2, #26
 800919e:	d42d      	bmi.n	80091fc <_printf_common+0xb4>
 80091a0:	4649      	mov	r1, r9
 80091a2:	4638      	mov	r0, r7
 80091a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091a8:	47c0      	blx	r8
 80091aa:	3001      	adds	r0, #1
 80091ac:	d020      	beq.n	80091f0 <_printf_common+0xa8>
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	68e5      	ldr	r5, [r4, #12]
 80091b2:	f003 0306 	and.w	r3, r3, #6
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	bf18      	it	ne
 80091ba:	2500      	movne	r5, #0
 80091bc:	6832      	ldr	r2, [r6, #0]
 80091be:	f04f 0600 	mov.w	r6, #0
 80091c2:	68a3      	ldr	r3, [r4, #8]
 80091c4:	bf08      	it	eq
 80091c6:	1aad      	subeq	r5, r5, r2
 80091c8:	6922      	ldr	r2, [r4, #16]
 80091ca:	bf08      	it	eq
 80091cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091d0:	4293      	cmp	r3, r2
 80091d2:	bfc4      	itt	gt
 80091d4:	1a9b      	subgt	r3, r3, r2
 80091d6:	18ed      	addgt	r5, r5, r3
 80091d8:	341a      	adds	r4, #26
 80091da:	42b5      	cmp	r5, r6
 80091dc:	d11a      	bne.n	8009214 <_printf_common+0xcc>
 80091de:	2000      	movs	r0, #0
 80091e0:	e008      	b.n	80091f4 <_printf_common+0xac>
 80091e2:	2301      	movs	r3, #1
 80091e4:	4652      	mov	r2, sl
 80091e6:	4649      	mov	r1, r9
 80091e8:	4638      	mov	r0, r7
 80091ea:	47c0      	blx	r8
 80091ec:	3001      	adds	r0, #1
 80091ee:	d103      	bne.n	80091f8 <_printf_common+0xb0>
 80091f0:	f04f 30ff 	mov.w	r0, #4294967295
 80091f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f8:	3501      	adds	r5, #1
 80091fa:	e7c4      	b.n	8009186 <_printf_common+0x3e>
 80091fc:	2030      	movs	r0, #48	; 0x30
 80091fe:	18e1      	adds	r1, r4, r3
 8009200:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009204:	1c5a      	adds	r2, r3, #1
 8009206:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800920a:	4422      	add	r2, r4
 800920c:	3302      	adds	r3, #2
 800920e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009212:	e7c5      	b.n	80091a0 <_printf_common+0x58>
 8009214:	2301      	movs	r3, #1
 8009216:	4622      	mov	r2, r4
 8009218:	4649      	mov	r1, r9
 800921a:	4638      	mov	r0, r7
 800921c:	47c0      	blx	r8
 800921e:	3001      	adds	r0, #1
 8009220:	d0e6      	beq.n	80091f0 <_printf_common+0xa8>
 8009222:	3601      	adds	r6, #1
 8009224:	e7d9      	b.n	80091da <_printf_common+0x92>
	...

08009228 <_printf_i>:
 8009228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800922c:	460c      	mov	r4, r1
 800922e:	7e27      	ldrb	r7, [r4, #24]
 8009230:	4691      	mov	r9, r2
 8009232:	2f78      	cmp	r7, #120	; 0x78
 8009234:	4680      	mov	r8, r0
 8009236:	469a      	mov	sl, r3
 8009238:	990c      	ldr	r1, [sp, #48]	; 0x30
 800923a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800923e:	d807      	bhi.n	8009250 <_printf_i+0x28>
 8009240:	2f62      	cmp	r7, #98	; 0x62
 8009242:	d80a      	bhi.n	800925a <_printf_i+0x32>
 8009244:	2f00      	cmp	r7, #0
 8009246:	f000 80d9 	beq.w	80093fc <_printf_i+0x1d4>
 800924a:	2f58      	cmp	r7, #88	; 0x58
 800924c:	f000 80a4 	beq.w	8009398 <_printf_i+0x170>
 8009250:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009254:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009258:	e03a      	b.n	80092d0 <_printf_i+0xa8>
 800925a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800925e:	2b15      	cmp	r3, #21
 8009260:	d8f6      	bhi.n	8009250 <_printf_i+0x28>
 8009262:	a001      	add	r0, pc, #4	; (adr r0, 8009268 <_printf_i+0x40>)
 8009264:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009268:	080092c1 	.word	0x080092c1
 800926c:	080092d5 	.word	0x080092d5
 8009270:	08009251 	.word	0x08009251
 8009274:	08009251 	.word	0x08009251
 8009278:	08009251 	.word	0x08009251
 800927c:	08009251 	.word	0x08009251
 8009280:	080092d5 	.word	0x080092d5
 8009284:	08009251 	.word	0x08009251
 8009288:	08009251 	.word	0x08009251
 800928c:	08009251 	.word	0x08009251
 8009290:	08009251 	.word	0x08009251
 8009294:	080093e3 	.word	0x080093e3
 8009298:	08009305 	.word	0x08009305
 800929c:	080093c5 	.word	0x080093c5
 80092a0:	08009251 	.word	0x08009251
 80092a4:	08009251 	.word	0x08009251
 80092a8:	08009405 	.word	0x08009405
 80092ac:	08009251 	.word	0x08009251
 80092b0:	08009305 	.word	0x08009305
 80092b4:	08009251 	.word	0x08009251
 80092b8:	08009251 	.word	0x08009251
 80092bc:	080093cd 	.word	0x080093cd
 80092c0:	680b      	ldr	r3, [r1, #0]
 80092c2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092c6:	1d1a      	adds	r2, r3, #4
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	600a      	str	r2, [r1, #0]
 80092cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092d0:	2301      	movs	r3, #1
 80092d2:	e0a4      	b.n	800941e <_printf_i+0x1f6>
 80092d4:	6825      	ldr	r5, [r4, #0]
 80092d6:	6808      	ldr	r0, [r1, #0]
 80092d8:	062e      	lsls	r6, r5, #24
 80092da:	f100 0304 	add.w	r3, r0, #4
 80092de:	d50a      	bpl.n	80092f6 <_printf_i+0xce>
 80092e0:	6805      	ldr	r5, [r0, #0]
 80092e2:	600b      	str	r3, [r1, #0]
 80092e4:	2d00      	cmp	r5, #0
 80092e6:	da03      	bge.n	80092f0 <_printf_i+0xc8>
 80092e8:	232d      	movs	r3, #45	; 0x2d
 80092ea:	426d      	negs	r5, r5
 80092ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092f0:	230a      	movs	r3, #10
 80092f2:	485e      	ldr	r0, [pc, #376]	; (800946c <_printf_i+0x244>)
 80092f4:	e019      	b.n	800932a <_printf_i+0x102>
 80092f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80092fa:	6805      	ldr	r5, [r0, #0]
 80092fc:	600b      	str	r3, [r1, #0]
 80092fe:	bf18      	it	ne
 8009300:	b22d      	sxthne	r5, r5
 8009302:	e7ef      	b.n	80092e4 <_printf_i+0xbc>
 8009304:	680b      	ldr	r3, [r1, #0]
 8009306:	6825      	ldr	r5, [r4, #0]
 8009308:	1d18      	adds	r0, r3, #4
 800930a:	6008      	str	r0, [r1, #0]
 800930c:	0628      	lsls	r0, r5, #24
 800930e:	d501      	bpl.n	8009314 <_printf_i+0xec>
 8009310:	681d      	ldr	r5, [r3, #0]
 8009312:	e002      	b.n	800931a <_printf_i+0xf2>
 8009314:	0669      	lsls	r1, r5, #25
 8009316:	d5fb      	bpl.n	8009310 <_printf_i+0xe8>
 8009318:	881d      	ldrh	r5, [r3, #0]
 800931a:	2f6f      	cmp	r7, #111	; 0x6f
 800931c:	bf0c      	ite	eq
 800931e:	2308      	moveq	r3, #8
 8009320:	230a      	movne	r3, #10
 8009322:	4852      	ldr	r0, [pc, #328]	; (800946c <_printf_i+0x244>)
 8009324:	2100      	movs	r1, #0
 8009326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800932a:	6866      	ldr	r6, [r4, #4]
 800932c:	2e00      	cmp	r6, #0
 800932e:	bfa8      	it	ge
 8009330:	6821      	ldrge	r1, [r4, #0]
 8009332:	60a6      	str	r6, [r4, #8]
 8009334:	bfa4      	itt	ge
 8009336:	f021 0104 	bicge.w	r1, r1, #4
 800933a:	6021      	strge	r1, [r4, #0]
 800933c:	b90d      	cbnz	r5, 8009342 <_printf_i+0x11a>
 800933e:	2e00      	cmp	r6, #0
 8009340:	d04d      	beq.n	80093de <_printf_i+0x1b6>
 8009342:	4616      	mov	r6, r2
 8009344:	fbb5 f1f3 	udiv	r1, r5, r3
 8009348:	fb03 5711 	mls	r7, r3, r1, r5
 800934c:	5dc7      	ldrb	r7, [r0, r7]
 800934e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009352:	462f      	mov	r7, r5
 8009354:	42bb      	cmp	r3, r7
 8009356:	460d      	mov	r5, r1
 8009358:	d9f4      	bls.n	8009344 <_printf_i+0x11c>
 800935a:	2b08      	cmp	r3, #8
 800935c:	d10b      	bne.n	8009376 <_printf_i+0x14e>
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	07df      	lsls	r7, r3, #31
 8009362:	d508      	bpl.n	8009376 <_printf_i+0x14e>
 8009364:	6923      	ldr	r3, [r4, #16]
 8009366:	6861      	ldr	r1, [r4, #4]
 8009368:	4299      	cmp	r1, r3
 800936a:	bfde      	ittt	le
 800936c:	2330      	movle	r3, #48	; 0x30
 800936e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009372:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009376:	1b92      	subs	r2, r2, r6
 8009378:	6122      	str	r2, [r4, #16]
 800937a:	464b      	mov	r3, r9
 800937c:	4621      	mov	r1, r4
 800937e:	4640      	mov	r0, r8
 8009380:	f8cd a000 	str.w	sl, [sp]
 8009384:	aa03      	add	r2, sp, #12
 8009386:	f7ff fedf 	bl	8009148 <_printf_common>
 800938a:	3001      	adds	r0, #1
 800938c:	d14c      	bne.n	8009428 <_printf_i+0x200>
 800938e:	f04f 30ff 	mov.w	r0, #4294967295
 8009392:	b004      	add	sp, #16
 8009394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009398:	4834      	ldr	r0, [pc, #208]	; (800946c <_printf_i+0x244>)
 800939a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800939e:	680e      	ldr	r6, [r1, #0]
 80093a0:	6823      	ldr	r3, [r4, #0]
 80093a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80093a6:	061f      	lsls	r7, r3, #24
 80093a8:	600e      	str	r6, [r1, #0]
 80093aa:	d514      	bpl.n	80093d6 <_printf_i+0x1ae>
 80093ac:	07d9      	lsls	r1, r3, #31
 80093ae:	bf44      	itt	mi
 80093b0:	f043 0320 	orrmi.w	r3, r3, #32
 80093b4:	6023      	strmi	r3, [r4, #0]
 80093b6:	b91d      	cbnz	r5, 80093c0 <_printf_i+0x198>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	f023 0320 	bic.w	r3, r3, #32
 80093be:	6023      	str	r3, [r4, #0]
 80093c0:	2310      	movs	r3, #16
 80093c2:	e7af      	b.n	8009324 <_printf_i+0xfc>
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	f043 0320 	orr.w	r3, r3, #32
 80093ca:	6023      	str	r3, [r4, #0]
 80093cc:	2378      	movs	r3, #120	; 0x78
 80093ce:	4828      	ldr	r0, [pc, #160]	; (8009470 <_printf_i+0x248>)
 80093d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093d4:	e7e3      	b.n	800939e <_printf_i+0x176>
 80093d6:	065e      	lsls	r6, r3, #25
 80093d8:	bf48      	it	mi
 80093da:	b2ad      	uxthmi	r5, r5
 80093dc:	e7e6      	b.n	80093ac <_printf_i+0x184>
 80093de:	4616      	mov	r6, r2
 80093e0:	e7bb      	b.n	800935a <_printf_i+0x132>
 80093e2:	680b      	ldr	r3, [r1, #0]
 80093e4:	6826      	ldr	r6, [r4, #0]
 80093e6:	1d1d      	adds	r5, r3, #4
 80093e8:	6960      	ldr	r0, [r4, #20]
 80093ea:	600d      	str	r5, [r1, #0]
 80093ec:	0635      	lsls	r5, r6, #24
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	d501      	bpl.n	80093f6 <_printf_i+0x1ce>
 80093f2:	6018      	str	r0, [r3, #0]
 80093f4:	e002      	b.n	80093fc <_printf_i+0x1d4>
 80093f6:	0671      	lsls	r1, r6, #25
 80093f8:	d5fb      	bpl.n	80093f2 <_printf_i+0x1ca>
 80093fa:	8018      	strh	r0, [r3, #0]
 80093fc:	2300      	movs	r3, #0
 80093fe:	4616      	mov	r6, r2
 8009400:	6123      	str	r3, [r4, #16]
 8009402:	e7ba      	b.n	800937a <_printf_i+0x152>
 8009404:	680b      	ldr	r3, [r1, #0]
 8009406:	1d1a      	adds	r2, r3, #4
 8009408:	600a      	str	r2, [r1, #0]
 800940a:	681e      	ldr	r6, [r3, #0]
 800940c:	2100      	movs	r1, #0
 800940e:	4630      	mov	r0, r6
 8009410:	6862      	ldr	r2, [r4, #4]
 8009412:	f000 f82f 	bl	8009474 <memchr>
 8009416:	b108      	cbz	r0, 800941c <_printf_i+0x1f4>
 8009418:	1b80      	subs	r0, r0, r6
 800941a:	6060      	str	r0, [r4, #4]
 800941c:	6863      	ldr	r3, [r4, #4]
 800941e:	6123      	str	r3, [r4, #16]
 8009420:	2300      	movs	r3, #0
 8009422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009426:	e7a8      	b.n	800937a <_printf_i+0x152>
 8009428:	4632      	mov	r2, r6
 800942a:	4649      	mov	r1, r9
 800942c:	4640      	mov	r0, r8
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	47d0      	blx	sl
 8009432:	3001      	adds	r0, #1
 8009434:	d0ab      	beq.n	800938e <_printf_i+0x166>
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	079b      	lsls	r3, r3, #30
 800943a:	d413      	bmi.n	8009464 <_printf_i+0x23c>
 800943c:	68e0      	ldr	r0, [r4, #12]
 800943e:	9b03      	ldr	r3, [sp, #12]
 8009440:	4298      	cmp	r0, r3
 8009442:	bfb8      	it	lt
 8009444:	4618      	movlt	r0, r3
 8009446:	e7a4      	b.n	8009392 <_printf_i+0x16a>
 8009448:	2301      	movs	r3, #1
 800944a:	4632      	mov	r2, r6
 800944c:	4649      	mov	r1, r9
 800944e:	4640      	mov	r0, r8
 8009450:	47d0      	blx	sl
 8009452:	3001      	adds	r0, #1
 8009454:	d09b      	beq.n	800938e <_printf_i+0x166>
 8009456:	3501      	adds	r5, #1
 8009458:	68e3      	ldr	r3, [r4, #12]
 800945a:	9903      	ldr	r1, [sp, #12]
 800945c:	1a5b      	subs	r3, r3, r1
 800945e:	42ab      	cmp	r3, r5
 8009460:	dcf2      	bgt.n	8009448 <_printf_i+0x220>
 8009462:	e7eb      	b.n	800943c <_printf_i+0x214>
 8009464:	2500      	movs	r5, #0
 8009466:	f104 0619 	add.w	r6, r4, #25
 800946a:	e7f5      	b.n	8009458 <_printf_i+0x230>
 800946c:	0800af55 	.word	0x0800af55
 8009470:	0800af66 	.word	0x0800af66

08009474 <memchr>:
 8009474:	4603      	mov	r3, r0
 8009476:	b510      	push	{r4, lr}
 8009478:	b2c9      	uxtb	r1, r1
 800947a:	4402      	add	r2, r0
 800947c:	4293      	cmp	r3, r2
 800947e:	4618      	mov	r0, r3
 8009480:	d101      	bne.n	8009486 <memchr+0x12>
 8009482:	2000      	movs	r0, #0
 8009484:	e003      	b.n	800948e <memchr+0x1a>
 8009486:	7804      	ldrb	r4, [r0, #0]
 8009488:	3301      	adds	r3, #1
 800948a:	428c      	cmp	r4, r1
 800948c:	d1f6      	bne.n	800947c <memchr+0x8>
 800948e:	bd10      	pop	{r4, pc}

08009490 <memcpy>:
 8009490:	440a      	add	r2, r1
 8009492:	4291      	cmp	r1, r2
 8009494:	f100 33ff 	add.w	r3, r0, #4294967295
 8009498:	d100      	bne.n	800949c <memcpy+0xc>
 800949a:	4770      	bx	lr
 800949c:	b510      	push	{r4, lr}
 800949e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094a2:	4291      	cmp	r1, r2
 80094a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094a8:	d1f9      	bne.n	800949e <memcpy+0xe>
 80094aa:	bd10      	pop	{r4, pc}

080094ac <memmove>:
 80094ac:	4288      	cmp	r0, r1
 80094ae:	b510      	push	{r4, lr}
 80094b0:	eb01 0402 	add.w	r4, r1, r2
 80094b4:	d902      	bls.n	80094bc <memmove+0x10>
 80094b6:	4284      	cmp	r4, r0
 80094b8:	4623      	mov	r3, r4
 80094ba:	d807      	bhi.n	80094cc <memmove+0x20>
 80094bc:	1e43      	subs	r3, r0, #1
 80094be:	42a1      	cmp	r1, r4
 80094c0:	d008      	beq.n	80094d4 <memmove+0x28>
 80094c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ca:	e7f8      	b.n	80094be <memmove+0x12>
 80094cc:	4601      	mov	r1, r0
 80094ce:	4402      	add	r2, r0
 80094d0:	428a      	cmp	r2, r1
 80094d2:	d100      	bne.n	80094d6 <memmove+0x2a>
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094de:	e7f7      	b.n	80094d0 <memmove+0x24>

080094e0 <_free_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4605      	mov	r5, r0
 80094e4:	2900      	cmp	r1, #0
 80094e6:	d043      	beq.n	8009570 <_free_r+0x90>
 80094e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ec:	1f0c      	subs	r4, r1, #4
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	bfb8      	it	lt
 80094f2:	18e4      	addlt	r4, r4, r3
 80094f4:	f000 f8d0 	bl	8009698 <__malloc_lock>
 80094f8:	4a1e      	ldr	r2, [pc, #120]	; (8009574 <_free_r+0x94>)
 80094fa:	6813      	ldr	r3, [r2, #0]
 80094fc:	4610      	mov	r0, r2
 80094fe:	b933      	cbnz	r3, 800950e <_free_r+0x2e>
 8009500:	6063      	str	r3, [r4, #4]
 8009502:	6014      	str	r4, [r2, #0]
 8009504:	4628      	mov	r0, r5
 8009506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800950a:	f000 b8cb 	b.w	80096a4 <__malloc_unlock>
 800950e:	42a3      	cmp	r3, r4
 8009510:	d90a      	bls.n	8009528 <_free_r+0x48>
 8009512:	6821      	ldr	r1, [r4, #0]
 8009514:	1862      	adds	r2, r4, r1
 8009516:	4293      	cmp	r3, r2
 8009518:	bf01      	itttt	eq
 800951a:	681a      	ldreq	r2, [r3, #0]
 800951c:	685b      	ldreq	r3, [r3, #4]
 800951e:	1852      	addeq	r2, r2, r1
 8009520:	6022      	streq	r2, [r4, #0]
 8009522:	6063      	str	r3, [r4, #4]
 8009524:	6004      	str	r4, [r0, #0]
 8009526:	e7ed      	b.n	8009504 <_free_r+0x24>
 8009528:	461a      	mov	r2, r3
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	b10b      	cbz	r3, 8009532 <_free_r+0x52>
 800952e:	42a3      	cmp	r3, r4
 8009530:	d9fa      	bls.n	8009528 <_free_r+0x48>
 8009532:	6811      	ldr	r1, [r2, #0]
 8009534:	1850      	adds	r0, r2, r1
 8009536:	42a0      	cmp	r0, r4
 8009538:	d10b      	bne.n	8009552 <_free_r+0x72>
 800953a:	6820      	ldr	r0, [r4, #0]
 800953c:	4401      	add	r1, r0
 800953e:	1850      	adds	r0, r2, r1
 8009540:	4283      	cmp	r3, r0
 8009542:	6011      	str	r1, [r2, #0]
 8009544:	d1de      	bne.n	8009504 <_free_r+0x24>
 8009546:	6818      	ldr	r0, [r3, #0]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	4401      	add	r1, r0
 800954c:	6011      	str	r1, [r2, #0]
 800954e:	6053      	str	r3, [r2, #4]
 8009550:	e7d8      	b.n	8009504 <_free_r+0x24>
 8009552:	d902      	bls.n	800955a <_free_r+0x7a>
 8009554:	230c      	movs	r3, #12
 8009556:	602b      	str	r3, [r5, #0]
 8009558:	e7d4      	b.n	8009504 <_free_r+0x24>
 800955a:	6820      	ldr	r0, [r4, #0]
 800955c:	1821      	adds	r1, r4, r0
 800955e:	428b      	cmp	r3, r1
 8009560:	bf01      	itttt	eq
 8009562:	6819      	ldreq	r1, [r3, #0]
 8009564:	685b      	ldreq	r3, [r3, #4]
 8009566:	1809      	addeq	r1, r1, r0
 8009568:	6021      	streq	r1, [r4, #0]
 800956a:	6063      	str	r3, [r4, #4]
 800956c:	6054      	str	r4, [r2, #4]
 800956e:	e7c9      	b.n	8009504 <_free_r+0x24>
 8009570:	bd38      	pop	{r3, r4, r5, pc}
 8009572:	bf00      	nop
 8009574:	20009cd8 	.word	0x20009cd8

08009578 <_malloc_r>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	1ccd      	adds	r5, r1, #3
 800957c:	f025 0503 	bic.w	r5, r5, #3
 8009580:	3508      	adds	r5, #8
 8009582:	2d0c      	cmp	r5, #12
 8009584:	bf38      	it	cc
 8009586:	250c      	movcc	r5, #12
 8009588:	2d00      	cmp	r5, #0
 800958a:	4606      	mov	r6, r0
 800958c:	db01      	blt.n	8009592 <_malloc_r+0x1a>
 800958e:	42a9      	cmp	r1, r5
 8009590:	d903      	bls.n	800959a <_malloc_r+0x22>
 8009592:	230c      	movs	r3, #12
 8009594:	6033      	str	r3, [r6, #0]
 8009596:	2000      	movs	r0, #0
 8009598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800959a:	f000 f87d 	bl	8009698 <__malloc_lock>
 800959e:	4921      	ldr	r1, [pc, #132]	; (8009624 <_malloc_r+0xac>)
 80095a0:	680a      	ldr	r2, [r1, #0]
 80095a2:	4614      	mov	r4, r2
 80095a4:	b99c      	cbnz	r4, 80095ce <_malloc_r+0x56>
 80095a6:	4f20      	ldr	r7, [pc, #128]	; (8009628 <_malloc_r+0xb0>)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	b923      	cbnz	r3, 80095b6 <_malloc_r+0x3e>
 80095ac:	4621      	mov	r1, r4
 80095ae:	4630      	mov	r0, r6
 80095b0:	f000 f862 	bl	8009678 <_sbrk_r>
 80095b4:	6038      	str	r0, [r7, #0]
 80095b6:	4629      	mov	r1, r5
 80095b8:	4630      	mov	r0, r6
 80095ba:	f000 f85d 	bl	8009678 <_sbrk_r>
 80095be:	1c43      	adds	r3, r0, #1
 80095c0:	d123      	bne.n	800960a <_malloc_r+0x92>
 80095c2:	230c      	movs	r3, #12
 80095c4:	4630      	mov	r0, r6
 80095c6:	6033      	str	r3, [r6, #0]
 80095c8:	f000 f86c 	bl	80096a4 <__malloc_unlock>
 80095cc:	e7e3      	b.n	8009596 <_malloc_r+0x1e>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	1b5b      	subs	r3, r3, r5
 80095d2:	d417      	bmi.n	8009604 <_malloc_r+0x8c>
 80095d4:	2b0b      	cmp	r3, #11
 80095d6:	d903      	bls.n	80095e0 <_malloc_r+0x68>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	441c      	add	r4, r3
 80095dc:	6025      	str	r5, [r4, #0]
 80095de:	e004      	b.n	80095ea <_malloc_r+0x72>
 80095e0:	6863      	ldr	r3, [r4, #4]
 80095e2:	42a2      	cmp	r2, r4
 80095e4:	bf0c      	ite	eq
 80095e6:	600b      	streq	r3, [r1, #0]
 80095e8:	6053      	strne	r3, [r2, #4]
 80095ea:	4630      	mov	r0, r6
 80095ec:	f000 f85a 	bl	80096a4 <__malloc_unlock>
 80095f0:	f104 000b 	add.w	r0, r4, #11
 80095f4:	1d23      	adds	r3, r4, #4
 80095f6:	f020 0007 	bic.w	r0, r0, #7
 80095fa:	1ac2      	subs	r2, r0, r3
 80095fc:	d0cc      	beq.n	8009598 <_malloc_r+0x20>
 80095fe:	1a1b      	subs	r3, r3, r0
 8009600:	50a3      	str	r3, [r4, r2]
 8009602:	e7c9      	b.n	8009598 <_malloc_r+0x20>
 8009604:	4622      	mov	r2, r4
 8009606:	6864      	ldr	r4, [r4, #4]
 8009608:	e7cc      	b.n	80095a4 <_malloc_r+0x2c>
 800960a:	1cc4      	adds	r4, r0, #3
 800960c:	f024 0403 	bic.w	r4, r4, #3
 8009610:	42a0      	cmp	r0, r4
 8009612:	d0e3      	beq.n	80095dc <_malloc_r+0x64>
 8009614:	1a21      	subs	r1, r4, r0
 8009616:	4630      	mov	r0, r6
 8009618:	f000 f82e 	bl	8009678 <_sbrk_r>
 800961c:	3001      	adds	r0, #1
 800961e:	d1dd      	bne.n	80095dc <_malloc_r+0x64>
 8009620:	e7cf      	b.n	80095c2 <_malloc_r+0x4a>
 8009622:	bf00      	nop
 8009624:	20009cd8 	.word	0x20009cd8
 8009628:	20009cdc 	.word	0x20009cdc

0800962c <_realloc_r>:
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	4607      	mov	r7, r0
 8009630:	4614      	mov	r4, r2
 8009632:	460e      	mov	r6, r1
 8009634:	b921      	cbnz	r1, 8009640 <_realloc_r+0x14>
 8009636:	4611      	mov	r1, r2
 8009638:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800963c:	f7ff bf9c 	b.w	8009578 <_malloc_r>
 8009640:	b922      	cbnz	r2, 800964c <_realloc_r+0x20>
 8009642:	f7ff ff4d 	bl	80094e0 <_free_r>
 8009646:	4625      	mov	r5, r4
 8009648:	4628      	mov	r0, r5
 800964a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800964c:	f000 f830 	bl	80096b0 <_malloc_usable_size_r>
 8009650:	42a0      	cmp	r0, r4
 8009652:	d20f      	bcs.n	8009674 <_realloc_r+0x48>
 8009654:	4621      	mov	r1, r4
 8009656:	4638      	mov	r0, r7
 8009658:	f7ff ff8e 	bl	8009578 <_malloc_r>
 800965c:	4605      	mov	r5, r0
 800965e:	2800      	cmp	r0, #0
 8009660:	d0f2      	beq.n	8009648 <_realloc_r+0x1c>
 8009662:	4631      	mov	r1, r6
 8009664:	4622      	mov	r2, r4
 8009666:	f7ff ff13 	bl	8009490 <memcpy>
 800966a:	4631      	mov	r1, r6
 800966c:	4638      	mov	r0, r7
 800966e:	f7ff ff37 	bl	80094e0 <_free_r>
 8009672:	e7e9      	b.n	8009648 <_realloc_r+0x1c>
 8009674:	4635      	mov	r5, r6
 8009676:	e7e7      	b.n	8009648 <_realloc_r+0x1c>

08009678 <_sbrk_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	2300      	movs	r3, #0
 800967c:	4d05      	ldr	r5, [pc, #20]	; (8009694 <_sbrk_r+0x1c>)
 800967e:	4604      	mov	r4, r0
 8009680:	4608      	mov	r0, r1
 8009682:	602b      	str	r3, [r5, #0]
 8009684:	f7fd f94e 	bl	8006924 <_sbrk>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	d102      	bne.n	8009692 <_sbrk_r+0x1a>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b103      	cbz	r3, 8009692 <_sbrk_r+0x1a>
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	2000a40c 	.word	0x2000a40c

08009698 <__malloc_lock>:
 8009698:	4801      	ldr	r0, [pc, #4]	; (80096a0 <__malloc_lock+0x8>)
 800969a:	f000 b811 	b.w	80096c0 <__retarget_lock_acquire_recursive>
 800969e:	bf00      	nop
 80096a0:	2000a414 	.word	0x2000a414

080096a4 <__malloc_unlock>:
 80096a4:	4801      	ldr	r0, [pc, #4]	; (80096ac <__malloc_unlock+0x8>)
 80096a6:	f000 b80c 	b.w	80096c2 <__retarget_lock_release_recursive>
 80096aa:	bf00      	nop
 80096ac:	2000a414 	.word	0x2000a414

080096b0 <_malloc_usable_size_r>:
 80096b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b4:	1f18      	subs	r0, r3, #4
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	bfbc      	itt	lt
 80096ba:	580b      	ldrlt	r3, [r1, r0]
 80096bc:	18c0      	addlt	r0, r0, r3
 80096be:	4770      	bx	lr

080096c0 <__retarget_lock_acquire_recursive>:
 80096c0:	4770      	bx	lr

080096c2 <__retarget_lock_release_recursive>:
 80096c2:	4770      	bx	lr

080096c4 <_init>:
 80096c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c6:	bf00      	nop
 80096c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ca:	bc08      	pop	{r3}
 80096cc:	469e      	mov	lr, r3
 80096ce:	4770      	bx	lr

080096d0 <_fini>:
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	bf00      	nop
 80096d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d6:	bc08      	pop	{r3}
 80096d8:	469e      	mov	lr, r3
 80096da:	4770      	bx	lr
